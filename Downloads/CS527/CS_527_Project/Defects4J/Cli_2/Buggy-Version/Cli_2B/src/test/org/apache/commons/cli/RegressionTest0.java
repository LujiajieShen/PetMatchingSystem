package org.apache.commons.cli;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test01() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test01");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Option option1 = null;
        java.util.ListIterator listIterator2 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option1, listIterator2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test02");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        java.util.Iterator iterator18 = commandLine17.iterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(iterator18);
    }

    @Test
    public void test03() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test03");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", true, "arg");
        java.lang.String str33 = option32.getDescription();
        option32.addValue("arg");
        java.util.ListIterator listIterator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option32, listIterator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "arg" + "'", str33, "arg");
    }

    @Test
    public void test04() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test04");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        boolean boolean43 = option38.hasValueSeparator();
        java.lang.String str44 = option38.getDescription();
        option38.setDescription("");
        java.util.ListIterator listIterator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option38, listIterator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test05() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test05");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        boolean boolean70 = options68.hasOption("hi!");
        java.lang.String[] strArray75 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", "arg", "[ option:    ::  ]" };
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options68, strArray75, false);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        java.lang.String str87 = option82.toString();
        option82.setArgs((int) (byte) 1);
        java.lang.String str90 = option82.getValue();
        java.lang.String str91 = option82.toString();
        java.util.ListIterator listIterator92 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option82, listIterator92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[ option:    ::  ]" + "'", str87, "[ option:    ::  ]");
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[ option:    ::  ]" + "'", str91, "[ option:    ::  ]");
    }

    @Test
    public void test06() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test06");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = option4.toString();
        option4.setArgs((int) (byte) 1);
        java.lang.String str12 = option4.getKey();
        option4.addValue("");
        boolean boolean15 = option4.hasArgs();
        java.lang.String str16 = option4.getValue();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean22 = option21.hasOptionalArg();
        java.lang.String str23 = option21.getArgName();
        boolean boolean25 = option21.equals((java.lang.Object) (byte) 100);
        boolean boolean26 = option21.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        boolean boolean30 = options28.hasOption("hi!");
        org.apache.commons.cli.Options options34 = options28.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder35 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options34);
        org.apache.commons.cli.CommandLine commandLine36 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray37 = commandLine36.getArgs();
        java.lang.String[] strArray38 = commandLine36.getArgs();
        java.lang.Object obj40 = commandLine36.getOptionObject(' ');
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasOptionalArg();
        java.lang.String str47 = option45.getArgName();
        boolean boolean49 = option45.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = option45.toString();
        commandLine36.addOption(option45);
        java.lang.String[] strArray52 = commandLine36.getArgs();
        java.lang.String[] strArray54 = posixParser27.flatten(options34, strArray52, true);
        boolean boolean55 = option21.equals((java.lang.Object) posixParser27);
        option4.setType((java.lang.Object) posixParser27);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[ option:    ::  ]" + "'", str9, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(optionBuilder35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "arg" + "'", str47, "arg");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test07() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test07");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options38 = options28.addOption("hi!", "", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '!'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
    }

    @Test
    public void test08() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test08");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        java.util.Iterator iterator30 = commandLine29.iterator();
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(iterator30);
    }

    @Test
    public void test09() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test09");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        posixParser28.burstToken("", true);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.util.Collection collection33 = options32.getOptions();
        java.lang.String[] strArray34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser28.parse(options32, strArray34, true);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        boolean boolean41 = options37.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine42 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray43 = commandLine42.getArgs();
        java.lang.String[] strArray44 = commandLine42.getArgs();
        java.lang.String[] strArray46 = posixParser28.flatten(options37, strArray44, true);
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options37, strArray47);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(collection33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
    }

    @Test
    public void test10() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test10");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        char char78 = option73.getValueSeparator();
        commandLine68.addOption(option73);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + char78 + "' != '" + '\000' + "'", char78 == '\000');
    }

    @Test
    public void test11() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test11");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.util.Collection collection35 = options34.getOptions();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean41 = option40.hasArg();
        boolean boolean42 = option40.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup43 = options34.getOptionGroup(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        boolean boolean47 = options45.hasOption("hi!");
        org.apache.commons.cli.Options options51 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option53 = options51.getOption("");
        java.lang.String[] strArray59 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine61 = posixParser44.parse(options51, strArray59, false);
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options34, strArray59);
        java.lang.String str63 = options34.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str63, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test12() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test12");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.OptionBuilder optionBuilder69 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) strArray63);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(optionBuilder69);
    }

    @Test
    public void test13() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test13");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Option[] optionArray9 = commandLine8.getOptions();
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(optionArray9);
    }

    @Test
    public void test14() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test14");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        java.util.Collection collection69 = options68.getOptions();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean75 = option74.hasArg();
        boolean boolean76 = option74.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup77 = options68.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine78 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray79 = commandLine78.getArgs();
        java.lang.String[] strArray80 = commandLine78.getArgs();
        java.lang.Object obj82 = commandLine78.getOptionObject(' ');
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean88 = option87.hasOptionalArg();
        java.lang.String str89 = option87.getArgName();
        boolean boolean91 = option87.equals((java.lang.Object) (byte) 100);
        java.lang.String str92 = option87.toString();
        commandLine78.addOption(option87);
        java.lang.String[] strArray94 = commandLine78.getArgs();
        java.util.Properties properties95 = null;
        org.apache.commons.cli.CommandLine commandLine97 = posixParser0.parse(options68, strArray94, properties95, false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "arg" + "'", str89, "arg");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[ option:    ::  ]" + "'", str92, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(commandLine97);
    }

    @Test
    public void test15() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test15");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        boolean boolean70 = options68.hasOption("hi!");
        java.lang.String[] strArray75 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", "arg", "[ option:    ::  ]" };
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options68, strArray75, false);
        java.lang.String[] strArray79 = commandLine77.getOptionValues('#');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNull(strArray79);
    }

    @Test
    public void test16() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test16");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasOptionalArg();
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        boolean boolean11 = options9.hasOption("hi!");
        org.apache.commons.cli.Options options15 = options9.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder16 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options15);
        org.apache.commons.cli.CommandLine commandLine17 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray18 = commandLine17.getArgs();
        java.lang.String[] strArray19 = commandLine17.getArgs();
        java.lang.Object obj21 = commandLine17.getOptionObject(' ');
        org.apache.commons.cli.Option option26 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean27 = option26.hasOptionalArg();
        java.lang.String str28 = option26.getArgName();
        boolean boolean30 = option26.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = option26.toString();
        commandLine17.addOption(option26);
        java.lang.String[] strArray33 = commandLine17.getArgs();
        java.lang.String[] strArray35 = posixParser8.flatten(options15, strArray33, true);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.util.List list37 = options36.helpOptions();
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser8.parse(options36, strArray38, properties39, false);
        boolean boolean42 = option4.equals((java.lang.Object) false);
        java.lang.Object obj43 = option4.getType();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(optionBuilder16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "arg" + "'", str28, "arg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ option:    ::  ]" + "'", str31, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test17() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test17");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        boolean boolean41 = options39.hasOption("hi!");
        boolean boolean43 = options39.hasOption("hi!");
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        boolean boolean47 = options45.hasOption("hi!");
        org.apache.commons.cli.Options options51 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option53 = options51.getOption("");
        java.lang.String[] strArray59 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine61 = posixParser44.parse(options51, strArray59, false);
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        java.util.Collection collection63 = options62.getOptions();
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasArg();
        boolean boolean70 = option68.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup71 = options62.getOptionGroup(option68);
        java.lang.String str72 = options62.toString();
        org.apache.commons.cli.CommandLine commandLine73 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine73.getArgs();
        java.lang.String[] strArray75 = commandLine73.getArgs();
        java.lang.Object obj77 = commandLine73.getOptionObject(' ');
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        java.lang.String str87 = option82.toString();
        commandLine73.addOption(option82);
        java.lang.String[] strArray89 = commandLine73.getArgs();
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser44.parse(options62, strArray89, properties90, true);
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser10.parse(options39, strArray89, properties93, true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(collection63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str72, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[ option:    ::  ]" + "'", str87, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertNotNull(commandLine95);
    }

    @Test
    public void test18() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test18");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean85 = option82.hasOptionalArg();
        commandLine77.addOption(option82);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test19() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test19");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        boolean boolean4 = options2.hasOption("hi!");
        org.apache.commons.cli.Options options8 = options2.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder9 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options8);
        org.apache.commons.cli.CommandLine commandLine10 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine10.getArgs();
        java.lang.String[] strArray12 = commandLine10.getArgs();
        java.lang.Object obj14 = commandLine10.getOptionObject(' ');
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean20 = option19.hasOptionalArg();
        java.lang.String str21 = option19.getArgName();
        boolean boolean23 = option19.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = option19.toString();
        commandLine10.addOption(option19);
        java.lang.String[] strArray26 = commandLine10.getArgs();
        java.lang.String[] strArray28 = posixParser1.flatten(options8, strArray26, true);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.util.List list30 = options29.helpOptions();
        java.lang.String[] strArray31 = new java.lang.String[] {};
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser1.parse(options29, strArray31, properties32, false);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean40 = option39.hasOptionalArg();
        java.lang.String str41 = option39.getArgName();
        boolean boolean43 = option39.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = option39.getLongOpt();
        java.lang.String str45 = option39.getKey();
        java.lang.Object obj46 = option39.getType();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.Option option55 = options53.getOption("");
        option39.setType((java.lang.Object) options53);
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        posixParser57.burstToken("", true);
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        java.util.Collection collection62 = options61.getOptions();
        java.lang.String[] strArray63 = null;
        org.apache.commons.cli.CommandLine commandLine65 = posixParser57.parse(options61, strArray63, true);
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        boolean boolean68 = options66.hasOption("hi!");
        boolean boolean70 = options66.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine71.getArgs();
        java.lang.String[] strArray73 = commandLine71.getArgs();
        java.lang.String[] strArray75 = posixParser57.flatten(options66, strArray73, true);
        java.util.Properties properties76 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser1.parse(options53, strArray73, properties76, true);
        java.lang.String[] strArray79 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options53, strArray79, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(options8);
        org.junit.Assert.assertNotNull(optionBuilder9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "arg" + "'", str21, "arg");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:    ::  ]" + "'", str24, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
    }

    @Test
    public void test20() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test20");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        org.apache.commons.cli.Options options24 = options18.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder25 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        org.apache.commons.cli.Options options33 = options27.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder34 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options33);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray36 = commandLine35.getArgs();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.Object obj39 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean45 = option44.hasOptionalArg();
        java.lang.String str46 = option44.getArgName();
        boolean boolean48 = option44.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = option44.toString();
        commandLine35.addOption(option44);
        java.lang.String[] strArray51 = commandLine35.getArgs();
        java.lang.String[] strArray53 = posixParser26.flatten(options33, strArray51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.helpOptions();
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser26.parse(options54, strArray56, properties57, false);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options24, strArray56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options64 = options24.addOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", false, "[ option:    ::  ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(optionBuilder25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(optionBuilder34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option:    ::  ]" + "'", str49, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
    }

    @Test
    public void test21() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test21");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean47 = option43.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = option43.toString();
        option43.setArgs((int) (byte) 1);
        java.lang.String str51 = option43.getKey();
        option43.addValue("");
        boolean boolean54 = option43.hasArgs();
        java.lang.String str55 = option43.getValue();
        java.lang.String str56 = option43.getLongOpt();
        java.lang.String[] strArray57 = option43.getValues();
        org.apache.commons.cli.CommandLine commandLine58 = posixParser0.parse(options37, strArray57);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        org.apache.commons.cli.Options options65 = options59.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder66 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options65);
        java.util.List list67 = options65.helpOptions();
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        posixParser68.burstToken("", true);
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        java.util.Collection collection73 = options72.getOptions();
        java.lang.String[] strArray74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser68.parse(options72, strArray74, true);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        boolean boolean79 = options77.hasOption("hi!");
        boolean boolean81 = options77.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine82 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine82.getArgs();
        java.lang.String[] strArray84 = commandLine82.getArgs();
        java.lang.String[] strArray86 = posixParser68.flatten(options77, strArray84, true);
        java.lang.String[] strArray88 = posixParser0.flatten(options65, strArray84, true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ option:    ::  ]" + "'", str48, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNotNull(optionBuilder66);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNotNull(collection73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray88);
    }

    @Test
    public void test22() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test22");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean42 = option41.hasOptionalArg();
        java.lang.String str43 = option41.getArgName();
        boolean boolean45 = option41.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = option41.toString();
        option41.setArgs((int) (byte) 1);
        java.lang.String str49 = option41.getKey();
        option41.addValue("");
        boolean boolean52 = option41.hasArgs();
        java.lang.String str53 = option41.getValue();
        java.util.ListIterator listIterator54 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option41, listIterator54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "arg" + "'", str43, "arg");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ option:    ::  ]" + "'", str46, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test23() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test23");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.util.Collection collection9 = options4.getOptionGroups();
        java.util.List list10 = options4.helpOptions();
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(collection9);
        org.junit.Assert.assertNotNull(list10);
    }

    @Test
    public void test24() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test24");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        boolean boolean62 = option4.hasArgs();
        int int63 = option4.getArgs();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test25() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test25");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.getLongOpt();
        java.lang.String str44 = option38.getKey();
        java.lang.Object obj45 = option38.getType();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.Option option54 = options52.getOption("");
        option38.setType((java.lang.Object) options52);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        posixParser56.burstToken("", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        java.util.Collection collection61 = options60.getOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options60, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        boolean boolean69 = options65.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine70.getArgs();
        java.lang.String[] strArray72 = commandLine70.getArgs();
        java.lang.String[] strArray74 = posixParser56.flatten(options65, strArray72, true);
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options52, strArray72, properties75, true);
        org.apache.commons.cli.Option[] optionArray78 = commandLine77.getOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(optionArray78);
    }

    @Test
    public void test26() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test26");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        java.lang.String str1 = options0.toString();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean7 = option6.hasOptionalArg();
        java.lang.String str8 = option6.getArgName();
        boolean boolean9 = option6.hasOptionalArg();
        java.lang.Object obj10 = option6.getType();
        org.apache.commons.cli.OptionGroup optionGroup11 = options0.getOptionGroup(option6);
        boolean boolean12 = option6.hasArgs();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean18 = option17.hasOptionalArg();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasOptionalArg();
        java.lang.Object obj21 = option17.getType();
        option17.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        boolean boolean33 = option28.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        boolean boolean37 = options35.hasOption("hi!");
        org.apache.commons.cli.Options options41 = options35.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder42 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options41);
        org.apache.commons.cli.CommandLine commandLine43 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray44 = commandLine43.getArgs();
        java.lang.String[] strArray45 = commandLine43.getArgs();
        java.lang.Object obj47 = commandLine43.getOptionObject(' ');
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean53 = option52.hasOptionalArg();
        java.lang.String str54 = option52.getArgName();
        boolean boolean56 = option52.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = option52.toString();
        commandLine43.addOption(option52);
        java.lang.String[] strArray59 = commandLine43.getArgs();
        java.lang.String[] strArray61 = posixParser34.flatten(options41, strArray59, true);
        boolean boolean62 = option28.equals((java.lang.Object) posixParser34);
        option17.setType((java.lang.Object) option28);
        boolean boolean64 = option6.equals((java.lang.Object) option17);
        boolean boolean65 = option6.hasOptionalArg();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str1, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(optionGroup11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "arg" + "'", str19, "arg");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(optionBuilder42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[ option:    ::  ]" + "'", str57, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test27() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test27");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        option25.setArgs(0);
        option25.setValueSeparator('#');
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test28() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test28");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        java.lang.String str80 = commandLine77.getOptionValue('4', "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean82 = commandLine77.hasOption("[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str80, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test29() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test29");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        boolean boolean22 = options18.hasOption("hi!");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean28 = option27.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup29 = options18.getOptionGroup(option27);
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean35 = option34.hasOptionalArg();
        java.lang.String str36 = option34.getArgName();
        boolean boolean37 = option34.hasOptionalArg();
        java.lang.Object obj38 = option34.getType();
        option34.setArgs((int) (byte) -1);
        java.lang.String str41 = option34.getArgName();
        org.apache.commons.cli.Options options42 = options18.addOption(option34);
        org.apache.commons.cli.Options options43 = options7.addOption(option34);
        java.lang.String str44 = options7.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]" + "'", str44, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
    }

    @Test
    public void test30() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test30");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        java.lang.String str20 = commandLine17.getOptionValue("", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        boolean boolean22 = commandLine17.hasOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str20, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test31() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test31");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        java.lang.String str44 = commandLine42.getOptionValue('\000');
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test32() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test32");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        boolean boolean70 = options68.hasOption("hi!");
        org.apache.commons.cli.Options options74 = options68.addOption("", false, "arg");
        org.apache.commons.cli.Option option76 = options74.getOption("");
        int int77 = option76.getArgs();
        java.util.ListIterator listIterator78 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option76, listIterator78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test33() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test33");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        boolean boolean22 = options18.hasOption("hi!");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean28 = option27.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup29 = options18.getOptionGroup(option27);
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean35 = option34.hasOptionalArg();
        java.lang.String str36 = option34.getArgName();
        boolean boolean37 = option34.hasOptionalArg();
        java.lang.Object obj38 = option34.getType();
        option34.setArgs((int) (byte) -1);
        java.lang.String str41 = option34.getArgName();
        org.apache.commons.cli.Options options42 = options18.addOption(option34);
        org.apache.commons.cli.Options options43 = options7.addOption(option34);
        org.apache.commons.cli.Option option45 = options43.getOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.Collection collection46 = options43.getOptionGroups();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(option45);
        org.junit.Assert.assertNotNull(collection46);
    }

    @Test
    public void test34() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test34");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.OptionGroup optionGroup34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options35 = options28.addOptionGroup(optionGroup34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
    }

    @Test
    public void test35() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test35");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Options options81 = options53.addOption("", true, "[ option:    ::  ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options86 = options81.addOption("[ Options: [ short {} ] [ long {} ]", "hi!", false, "org.apache.commons.cli.MissingArgumentException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(options81);
    }

    @Test
    public void test36() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test36");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        org.apache.commons.cli.Option option70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options71 = options39.addOption(option70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
    }

    @Test
    public void test37() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test37");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        org.apache.commons.cli.Options options24 = options18.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder25 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        org.apache.commons.cli.Options options33 = options27.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder34 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options33);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray36 = commandLine35.getArgs();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.Object obj39 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean45 = option44.hasOptionalArg();
        java.lang.String str46 = option44.getArgName();
        boolean boolean48 = option44.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = option44.toString();
        commandLine35.addOption(option44);
        java.lang.String[] strArray51 = commandLine35.getArgs();
        java.lang.String[] strArray53 = posixParser26.flatten(options33, strArray51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.helpOptions();
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser26.parse(options54, strArray56, properties57, false);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options24, strArray56);
        java.util.Iterator iterator61 = commandLine60.iterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(optionBuilder25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(optionBuilder34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option:    ::  ]" + "'", str49, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(iterator61);
    }

    @Test
    public void test38() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test38");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean54 = option53.hasOptionalArg();
        java.lang.String str55 = option53.getArgName();
        boolean boolean57 = option53.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = option53.toString();
        option53.setArgs((int) (byte) 1);
        java.util.ListIterator listIterator61 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option53, listIterator61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "arg" + "'", str55, "arg");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ option:    ::  ]" + "'", str58, "[ option:    ::  ]");
    }

    @Test
    public void test39() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test39");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        java.lang.String str20 = commandLine17.getOptionValue("", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        java.lang.Object obj22 = commandLine17.getOptionObject("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str20, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test40() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test40");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.util.Collection collection9 = options4.getOptionGroups();
        java.lang.String str10 = options4.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean19 = option15.equals((java.lang.Object) (byte) 100);
        org.apache.commons.cli.Options options20 = options4.addOption(option15);
        boolean boolean22 = options20.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(collection9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test41() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test41");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        java.lang.Object obj34 = commandLine32.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test42() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test42");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        boolean boolean43 = option38.hasValueSeparator();
        boolean boolean44 = option38.isRequired();
        java.lang.String str45 = option38.getKey();
        boolean boolean46 = option38.hasArgName();
        option38.setLongOpt("");
        boolean boolean49 = option38.hasArg();
        java.lang.String str50 = option38.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options28.getOptionGroup(option38);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
    }

    @Test
    public void test43() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test43");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        java.lang.String str79 = commandLine76.getOptionValue("[ option:    ::  ]", "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String str81 = commandLine76.getOptionValue("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str79, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test44() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test44");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        boolean boolean31 = options9.hasOption("arg");
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test45() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test45");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        java.lang.String str1 = options0.toString();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean7 = option6.hasOptionalArg();
        java.lang.String str8 = option6.getArgName();
        boolean boolean9 = option6.hasOptionalArg();
        java.lang.Object obj10 = option6.getType();
        org.apache.commons.cli.OptionGroup optionGroup11 = options0.getOptionGroup(option6);
        boolean boolean12 = option6.hasArgs();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean18 = option17.hasOptionalArg();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasOptionalArg();
        java.lang.Object obj21 = option17.getType();
        option17.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        boolean boolean33 = option28.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        boolean boolean37 = options35.hasOption("hi!");
        org.apache.commons.cli.Options options41 = options35.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder42 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options41);
        org.apache.commons.cli.CommandLine commandLine43 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray44 = commandLine43.getArgs();
        java.lang.String[] strArray45 = commandLine43.getArgs();
        java.lang.Object obj47 = commandLine43.getOptionObject(' ');
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean53 = option52.hasOptionalArg();
        java.lang.String str54 = option52.getArgName();
        boolean boolean56 = option52.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = option52.toString();
        commandLine43.addOption(option52);
        java.lang.String[] strArray59 = commandLine43.getArgs();
        java.lang.String[] strArray61 = posixParser34.flatten(options41, strArray59, true);
        boolean boolean62 = option28.equals((java.lang.Object) posixParser34);
        option17.setType((java.lang.Object) option28);
        boolean boolean64 = option6.equals((java.lang.Object) option17);
        java.lang.String str65 = option17.getKey();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str1, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(optionGroup11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "arg" + "'", str19, "arg");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(optionBuilder42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[ option:    ::  ]" + "'", str57, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test46() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test46");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        java.lang.String[] strArray31 = commandLine29.getOptionValues('4');
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNull(strArray31);
    }

    @Test
    public void test47() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test47");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.util.Collection collection35 = options34.getOptions();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean41 = option40.hasArg();
        boolean boolean42 = option40.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup43 = options34.getOptionGroup(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        boolean boolean47 = options45.hasOption("hi!");
        org.apache.commons.cli.Options options51 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option53 = options51.getOption("");
        java.lang.String[] strArray59 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine61 = posixParser44.parse(options51, strArray59, false);
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options34, strArray59);
        org.apache.commons.cli.Option[] optionArray63 = commandLine62.getOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(optionArray63);
    }

    @Test
    public void test48() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test48");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        boolean boolean12 = options10.hasOption("hi!");
        org.apache.commons.cli.Options options16 = options10.addOption("", false, "arg");
        org.apache.commons.cli.Option option18 = options16.getOption("");
        java.lang.String[] strArray24 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine26 = posixParser9.parse(options16, strArray24, false);
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        boolean boolean31 = options27.hasOption("hi!");
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean37 = option36.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup38 = options27.getOptionGroup(option36);
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean46 = option43.hasOptionalArg();
        java.lang.Object obj47 = option43.getType();
        option43.setArgs((int) (byte) -1);
        java.lang.String str50 = option43.getArgName();
        org.apache.commons.cli.Options options51 = options27.addOption(option43);
        org.apache.commons.cli.Options options52 = options16.addOption(option43);
        org.apache.commons.cli.Option option54 = options52.getOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        boolean boolean58 = options56.hasOption("hi!");
        org.apache.commons.cli.Options options62 = options56.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder63 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options62);
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.Object obj68 = commandLine64.getOptionObject(' ');
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = option73.toString();
        commandLine64.addOption(option73);
        java.lang.String[] strArray80 = commandLine64.getArgs();
        java.lang.String[] strArray82 = posixParser55.flatten(options62, strArray80, true);
        org.apache.commons.cli.Options options83 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray85 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine87 = posixParser55.parse(options83, strArray85, true);
        java.util.Properties properties88 = null;
        org.apache.commons.cli.CommandLine commandLine89 = posixParser0.parse(options52, strArray85, properties88);
        org.apache.commons.cli.Option option91 = options52.getOption("");
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "arg" + "'", str50, "arg");
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNull(option54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(optionBuilder63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[ option:    ::  ]" + "'", str78, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(option91);
    }

    @Test
    public void test49() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test49");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        boolean boolean78 = commandLine76.hasOption("[ option:    ::  ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test50() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test50");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
    }

    @Test
    public void test51() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test51");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        boolean boolean35 = options33.hasOption("hi!");
        boolean boolean37 = options33.hasOption("hi!");
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean43 = option42.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup44 = options33.getOptionGroup(option42);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine45.getArgs();
        java.lang.String[] strArray47 = commandLine45.getArgs();
        java.util.Iterator iterator48 = commandLine45.iterator();
        java.lang.String[] strArray50 = commandLine45.getOptionValues('\000');
        java.lang.String str53 = commandLine45.getOptionValue(' ', "hi!");
        java.lang.String[] strArray54 = commandLine45.getArgs();
        java.lang.String[] strArray56 = posixParser0.flatten(options33, strArray54, true);
        org.apache.commons.cli.Options options57 = null;
        org.apache.commons.cli.PosixParser posixParser58 = new org.apache.commons.cli.PosixParser();
        posixParser58.burstToken("", true);
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        java.util.Collection collection63 = options62.getOptions();
        java.lang.String[] strArray64 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser58.parse(options62, strArray64, true);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        boolean boolean69 = options67.hasOption("hi!");
        boolean boolean71 = options67.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine72.getArgs();
        java.lang.String[] strArray74 = commandLine72.getArgs();
        java.lang.String[] strArray76 = posixParser58.flatten(options67, strArray74, true);
        java.lang.String[] strArray78 = posixParser0.flatten(options57, strArray74, true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(iterator48);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(collection63);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
    }

    @Test
    public void test52() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test52");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean47 = option43.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = option43.toString();
        option43.setArgs((int) (byte) 1);
        java.lang.String str51 = option43.getKey();
        option43.addValue("");
        boolean boolean54 = option43.hasArgs();
        java.lang.String str55 = option43.getValue();
        java.lang.String str56 = option43.getLongOpt();
        java.lang.String[] strArray57 = option43.getValues();
        org.apache.commons.cli.CommandLine commandLine58 = posixParser0.parse(options37, strArray57);
        java.util.Collection collection59 = options37.getOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ option:    ::  ]" + "'", str48, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(collection59);
    }

    @Test
    public void test53() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test53");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        org.apache.commons.cli.Option option37 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean38 = option37.hasOptionalArg();
        java.lang.String str39 = option37.getArgName();
        boolean boolean40 = option37.hasOptionalArg();
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        boolean boolean44 = options42.hasOption("hi!");
        org.apache.commons.cli.Options options48 = options42.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder49 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options48);
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine50.getArgs();
        java.lang.String[] strArray52 = commandLine50.getArgs();
        java.lang.Object obj54 = commandLine50.getOptionObject(' ');
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean60 = option59.hasOptionalArg();
        java.lang.String str61 = option59.getArgName();
        boolean boolean63 = option59.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = option59.toString();
        commandLine50.addOption(option59);
        java.lang.String[] strArray66 = commandLine50.getArgs();
        java.lang.String[] strArray68 = posixParser41.flatten(options48, strArray66, true);
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.util.List list70 = options69.helpOptions();
        java.lang.String[] strArray71 = new java.lang.String[] {};
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser41.parse(options69, strArray71, properties72, false);
        boolean boolean75 = option37.equals((java.lang.Object) false);
        org.apache.commons.cli.Options options76 = options28.addOption(option37);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "arg" + "'", str39, "arg");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(optionBuilder49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "arg" + "'", str61, "arg");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[ option:    ::  ]" + "'", str64, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(options76);
    }

    @Test
    public void test54() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test54");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        boolean boolean87 = option82.hasValueSeparator();
        commandLine77.addOption(option82);
        java.lang.Object obj90 = commandLine77.getOptionObject("arg");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test55() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test55");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasOptionalArg();
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        boolean boolean11 = options9.hasOption("hi!");
        org.apache.commons.cli.Options options15 = options9.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder16 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options15);
        org.apache.commons.cli.CommandLine commandLine17 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray18 = commandLine17.getArgs();
        java.lang.String[] strArray19 = commandLine17.getArgs();
        java.lang.Object obj21 = commandLine17.getOptionObject(' ');
        org.apache.commons.cli.Option option26 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean27 = option26.hasOptionalArg();
        java.lang.String str28 = option26.getArgName();
        boolean boolean30 = option26.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = option26.toString();
        commandLine17.addOption(option26);
        java.lang.String[] strArray33 = commandLine17.getArgs();
        java.lang.String[] strArray35 = posixParser8.flatten(options15, strArray33, true);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.util.List list37 = options36.helpOptions();
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser8.parse(options36, strArray38, properties39, false);
        boolean boolean42 = option4.equals((java.lang.Object) false);
        option4.setOptionalArg(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(optionBuilder16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "arg" + "'", str28, "arg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ option:    ::  ]" + "'", str31, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test56() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test56");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        boolean boolean87 = option82.hasValueSeparator();
        boolean boolean88 = option82.isRequired();
        java.lang.String str89 = option82.getKey();
        boolean boolean90 = option82.hasArgName();
        option82.setLongOpt("");
        boolean boolean93 = option82.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup94 = options53.getOptionGroup(option82);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(optionGroup94);
    }

    @Test
    public void test57() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test57");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        java.util.Collection collection70 = options39.getOptions();
        java.lang.String str71 = options39.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test58() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test58");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.getLongOpt();
        java.lang.String str44 = option38.getKey();
        java.lang.Object obj45 = option38.getType();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.Option option54 = options52.getOption("");
        option38.setType((java.lang.Object) options52);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        posixParser56.burstToken("", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        java.util.Collection collection61 = options60.getOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options60, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        boolean boolean69 = options65.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine70.getArgs();
        java.lang.String[] strArray72 = commandLine70.getArgs();
        java.lang.String[] strArray74 = posixParser56.flatten(options65, strArray72, true);
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options52, strArray72, properties75, true);
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        boolean boolean80 = options78.hasOption("hi!");
        boolean boolean82 = options78.hasOption("hi!");
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean88 = option87.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup89 = options78.getOptionGroup(option87);
        java.lang.Object obj90 = option87.getType();
        commandLine77.addOption(option87);
        java.lang.String str94 = commandLine77.getOptionValue('\000', "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str94, "[ Options: [ short {} ] [ long {} ]");
    }
}

