/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 09 02:31:29 GMT 2024
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.File;
import java.io.OutputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.time.temporal.ChronoField;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BeanPropertyWriter_ESTest extends BeanPropertyWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      Integer integer0 = new Integer((-58));
      beanPropertyWriter0.setInternalSetting(integer0, "(s4rP@K`&");
      Object object0 = beanPropertyWriter0.removeInternalSetting("/A/RdNzq7y~~g X;u");
      assertFalse(beanPropertyWriter0.willSuppressNulls());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      beanPropertyWriter0.assignNullSerializer(jsonSerializer0);
      beanPropertyWriter0.readResolve();
      assertTrue(beanPropertyWriter0.hasNullSerializer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      SerializedString serializedString0 = new SerializedString(", static serializer of type ");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      beanPropertyWriter1._depositSchemaProperty(objectNode0, objectNode0);
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = PropertyName.construct("", "");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("", "");
      NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
      BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.unwrappingWriter(nameTransformer1);
      BeanPropertyWriter beanPropertyWriter3 = beanPropertyWriter2.rename(nameTransformer1);
      assertFalse(beanPropertyWriter3.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer((TypeIdResolver) null, beanPropertyWriter0, "*j6*Q+.b&/G%v465?5I");
      beanPropertyWriter0.assignTypeSerializer(asExistingPropertyTypeSerializer0);
      TypeSerializer typeSerializer0 = beanPropertyWriter0.getTypeSerializer();
      assertNotNull(typeSerializer0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0.unwrappingWriter(nameTransformer0);
      beanPropertyWriter1.getSerializer();
      assertTrue(beanPropertyWriter0.hasSerializer());
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
      beanPropertyWriter1.getSerializedName();
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      SerializedString serializedString0 = new SerializedString(", static serializer of type ");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
      beanPropertyWriter1.getSerializedName();
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      SerializedString serializedString0 = new SerializedString(", static serializer of type ");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
      beanPropertyWriter1.getName();
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = PropertyName.construct("", "");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
      beanPropertyWriter1.getName();
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = PropertyName.construct("/A/RdNzq7y~~g X;u");
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0._new(propertyName0);
      beanPropertyWriter1.getFullName();
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = PropertyName.construct((String) null, "aPDHk+}8$G!V%");
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0._new(propertyName0);
      beanPropertyWriter1.getFullName();
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("T-a");
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
      Class<AnnotatedField> class0 = AnnotatedField.class;
      AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = annotatedClass0.getAnnotations();
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (JavaType) simpleType0, (Object) null, (Object) null);
      JsonSerializer<SimpleType> jsonSerializer0 = (JsonSerializer<SimpleType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      ArrayType arrayType0 = ArrayType.construct(referenceType0, object0, object0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(classNameIdResolver0, beanPropertyWriter0);
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotations0, referenceType0, jsonSerializer0, asWrapperTypeSerializer0, arrayType0, false, (Object) null);
      BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1._new(propertyName0);
      assertTrue(beanPropertyWriter2.hasSerializer());
      assertFalse(beanPropertyWriter2.hasNullSerializer());
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        beanPropertyWriter0.serializeAsPlaceholder(beanPropertyWriter0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      try { 
        beanPropertyWriter0.serializeAsOmittedField((Object) null, (JsonGenerator) null, serializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("t", "com.fasterxml.jackson.databind.ser.BeanPropertyWriter");
      NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.rename(nameTransformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.isRequired();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      // Undeclared exception!
      try { 
        beanPropertyWriter0._new((PropertyName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_YEAR;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      File file0 = MockFile.createTempFile("-|w D`\fhT>", "AA{8kS", (File) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator(file0, jsonEncoding0);
      // Undeclared exception!
      try { 
        beanPropertyWriter0._handleSelfReference(chronoField0, jsonGenerator0, defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      BeanPropertyWriter beanPropertyWriter0 = null;
      try {
        beanPropertyWriter0 = new BeanPropertyWriter((BeanPropertyWriter) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SerializedString serializedString0 = new SerializedString("A(@P}[pRG'9lq:");
      BeanPropertyWriter beanPropertyWriter0 = null;
      try {
        beanPropertyWriter0 = new BeanPropertyWriter((BeanPropertyWriter) null, serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = null;
      try {
        beanPropertyWriter0 = new BeanPropertyWriter((BeanPropertyWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((AnnotatedClass) null, (Field) null, annotationMap0);
      Class<Module> class0 = Module.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer((TypeIdResolver) null, beanPropertyWriter0);
      BeanPropertyWriter beanPropertyWriter1 = null;
      try {
        beanPropertyWriter1 = new BeanPropertyWriter((BeanPropertyDefinition) null, annotatedField0, annotationMap0, mapLikeType0, jsonSerializer0, asWrapperTypeSerializer0, simpleType0, true, jsonSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getGenericPropertyType();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      boolean boolean0 = beanPropertyWriter0.hasNullSerializer();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      boolean boolean0 = beanPropertyWriter0.hasSerializer();
      assertFalse(boolean0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      Class<Annotation> class0 = Annotation.class;
      beanPropertyWriter0.getContextAnnotation(class0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      Class<Annotation> class0 = Annotation.class;
      beanPropertyWriter0.getAnnotation(class0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.setInternalSetting("Direct self-reference leading to cycle", "Direct self-reference leading to cycle");
      SerializedString serializedString0 = new SerializedString("Direct self-reference leading to cycle");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      boolean boolean0 = beanPropertyWriter0.willSuppressNulls();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getViews();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getType();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getSerializationType();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0);
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getSerializer();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getTypeSerializer();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, javaType0, javaType0);
      MapType mapType0 = MapType.construct(class0, mapLikeType0, mapLikeType0);
      beanPropertyWriter0.setNonTrivialBaseType(mapType0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonSerializer<AnnotatedField> jsonSerializer0 = (JsonSerializer<AnnotatedField>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, annotationMap0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0.unwrappingWriter(nameTransformer0);
      beanPropertyWriter1.isRequired();
      assertFalse(beanPropertyWriter1.hasNullSerializer());
      assertTrue(beanPropertyWriter1.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = PropertyName.construct("", "");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("", "");
      NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
      BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.unwrappingWriter(nameTransformer1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter2.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      beanPropertyWriter2.toString();
      assertTrue(beanPropertyWriter2.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = PropertyName.construct("", "");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("", "");
      NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
      BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.unwrappingWriter(nameTransformer1);
      String string0 = beanPropertyWriter2.toString();
      assertEquals("property '' (virtual, no static serializer)", string0);
      assertFalse(beanPropertyWriter2.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      try { 
        beanPropertyWriter0.get(", static serializer of type ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      Class<Annotation> class0 = Annotation.class;
      PropertySerializerMap propertySerializerMap0 = PropertySerializerMap.emptyForProperties();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        beanPropertyWriter0._findAndAddDynamic(propertySerializerMap0, class0, serializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) null);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.serializeAsPlaceholder((Object) null, jsonGeneratorDelegate0, defaultSerializerProvider_Impl0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        beanPropertyWriter0.serializeAsElement(jsonFactory0, jsonGenerator0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.serializeAsOmittedField(jsonGeneratorDelegate0, jsonGenerator0, defaultSerializerProvider_Impl0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      ChronoField chronoField0 = ChronoField.DAY_OF_WEEK;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        beanPropertyWriter0.serializeAsField(chronoField0, uTF8JsonGenerator0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.getPropertyType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getRawSerializationType();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = new PropertyName("s/!HosoP;PUcY\":nM");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
      boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
      assertFalse(beanPropertyWriter1.willSuppressNulls());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = PropertyName.construct("", "");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("", "");
      NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
      BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.unwrappingWriter(nameTransformer1);
      boolean boolean0 = beanPropertyWriter2.wouldConflictWithName(propertyName0);
      assertFalse(boolean0);
      assertFalse(beanPropertyWriter2.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = PropertyName.construct(", no static serializer");
      PropertyName propertyName1 = PropertyName.construct("field \"", "field \"");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
      boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName1);
      assertFalse(boolean0);
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = PropertyName.construct("", "");
      // Undeclared exception!
      try { 
        beanPropertyWriter0.wouldConflictWithName(propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      Object object0 = beanPropertyWriter0.removeInternalSetting("");
      assertFalse(beanPropertyWriter0.willSuppressNulls());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.setInternalSetting("0_-Nl,Ra", "0_-Nl,Ra");
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      Object object0 = beanPropertyWriter0.setInternalSetting("0_-Nl,Ra", dOMSerializer0);
      assertNotNull(object0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
      assertEquals("0_-Nl,Ra", object0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getInternalSetting((Object) null);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
      assertNull(jsonFormat_Value0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides((AnnotationIntrospector) null);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
      assertNull(jsonFormat_Value0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      BeanPropertyWriter beanPropertyWriter1 = (BeanPropertyWriter)beanPropertyWriter0.readResolve();
      JsonFormat.Value jsonFormat_Value0 = BeanPropertyWriter.NO_FORMAT;
      beanPropertyWriter1._format = jsonFormat_Value0;
      JsonFormat.Value jsonFormat_Value1 = beanPropertyWriter0.findFormatOverrides((AnnotationIntrospector) null);
      assertNull(jsonFormat_Value1);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullValueSerializer();
      beanPropertyWriter0.assignNullSerializer(jsonSerializer0);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not override null serializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertTrue(beanPropertyWriter0.hasNullSerializer());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      SerializedString serializedString0 = new SerializedString(", static serializer of type ");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer0);
      assertFalse(beanPropertyWriter2.willSuppressNulls());
      assertSame(beanPropertyWriter2, beanPropertyWriter1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = PropertyName.construct("", "");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("AA{8kS", "0b8=Dl{Q6??KFS;B");
      BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer0);
      assertFalse(beanPropertyWriter2.willSuppressNulls());
      assertEquals("AA{8kS0b8=Dl{Q6??KFS;B", beanPropertyWriter2.getName());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = PropertyName.construct("/A/RdNzq7y~~g X;u");
      Integer integer0 = new Integer((-58));
      beanPropertyWriter0.setInternalSetting(integer0, "(s4rP@K`&");
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0._new(propertyName0);
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getMetadata();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getSerializedName();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) jsonObjectFormatVisitor_Base0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.getFullName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getWrapperName();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      boolean boolean0 = beanPropertyWriter0.isUnwrapping();
      assertFalse(boolean0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      boolean boolean0 = beanPropertyWriter0.isVirtual();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      // Undeclared exception!
      try { 
        objectMapper0.writeValue((OutputStream) null, (Object) coreXMLSerializers_XMLGregorianCalendarSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      // Undeclared exception!
      try { 
        beanPropertyWriter0._depositSchemaProperty(objectNode0, objectNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getMember();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }
}
