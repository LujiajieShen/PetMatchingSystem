/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 09 04:22:12 GMT 2024
 */

package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Acosh;
import org.apache.commons.math3.analysis.function.Atanh;
import org.apache.commons.math3.analysis.function.Exp;
import org.apache.commons.math3.analysis.function.Inverse;
import org.apache.commons.math3.analysis.function.Logit;
import org.apache.commons.math3.analysis.function.Sigmoid;
import org.apache.commons.math3.analysis.function.StepFunction;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.4794255495071411, 1176.043);
      Atanh atanh0 = new Atanh();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1, (UnivariateFunction) atanh0, goalType0, (-1625.909618574455), (double) 1);
      assertNotNull(univariatePointValuePair0);
      assertEquals((-812.4548092872275), univariatePointValuePair0.getPoint(), 0.01);
      assertEquals(Double.NaN, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.9974949359893799, 0.9974949359893799);
      Logit logit0 = new Logit();
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        brentOptimizer0.optimize((-1), (UnivariateFunction) logit0, goalType0, (double) (-1), (-4463.35344), (-1373.332385));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GoalType goalType0 = GoalType.MAXIMIZE;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(9.219544613762692E-9, 2146673671);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2756.3283788);
      StepFunction stepFunction0 = new StepFunction(doubleArray0, doubleArray0);
      brentOptimizer0.optimize(5, (UnivariateFunction) stepFunction0, goalType0, (-2756.3283788), 0.0);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.doOptimize();
      assertNotNull(univariatePointValuePair0);
      assertEquals((-2756.3283788), univariatePointValuePair0.getValue(), 0.01);
      assertEquals((-1378.1641894), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2987.0, 2987.0);
      Inverse inverse0 = new Inverse();
      GoalType goalType0 = GoalType.MAXIMIZE;
      brentOptimizer0.optimize(704, (UnivariateFunction) inverse0, goalType0, (-817.665719059119), (-98.89774840314), (double) 0);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.doOptimize();
      assertEquals(0.0, univariatePointValuePair0.getPoint(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, univariatePointValuePair0.getValue(), 0.01);
      assertNotNull(univariatePointValuePair0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1111.0, 0.7853981633974483);
      Sigmoid sigmoid0 = new Sigmoid();
      GoalType goalType0 = GoalType.MINIMIZE;
      brentOptimizer0.optimize(3081, (UnivariateFunction) sigmoid0, goalType0, 1111.0, (double) 3081);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.doOptimize();
      assertEquals(2096.0, univariatePointValuePair0.getPoint(), 0.01);
      assertNotNull(univariatePointValuePair0);
      assertEquals(1.0, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer((-7.44321345601866E-11), (-7.44321345601866E-11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariatePointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(0.5, 0.0, convergenceChecker0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(9.219544613762692E-9, 9.219544613762692E-9, (ConvergenceChecker<UnivariatePointValuePair>) null);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GoalType goalType0 = GoalType.MAXIMIZE;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(9.219544613762692E-9, 2146673671);
      double[] doubleArray0 = new double[1];
      StepFunction stepFunction0 = new StepFunction(doubleArray0, doubleArray0);
      brentOptimizer0.optimize(5, (UnivariateFunction) stepFunction0, goalType0, (-2756.3283788), (-1.3303829733832702));
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.doOptimize();
      assertEquals(0.0, univariatePointValuePair0.getValue(), 0.01);
      assertEquals((-1378.8293808866915), univariatePointValuePair0.getPoint(), 0.01);
      assertNotNull(univariatePointValuePair0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(9.219544613762692E-9, 9.219544613762692E-9);
      GoalType goalType0 = GoalType.MAXIMIZE;
      Exp exp0 = new Exp();
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(187, (UnivariateFunction) exp0, goalType0, 9.219544613762692E-9, (double) 187, (double) 2146673671);
      assertEquals(Double.POSITIVE_INFINITY, univariatePointValuePair0.getValue(), 0.01);
      assertEquals(2.146673671E9, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(9.219544613762692E-9, 9.219544613762692E-9);
      Inverse inverse0 = new Inverse();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2146673671, (UnivariateFunction) inverse0, goalType0, 1.1005142643914475E79, (double) 2146673671, (double) 2146673671);
      assertEquals(2.146673671E9, univariatePointValuePair0.getPoint(), 0.01);
      assertEquals(4.658369893427551E-10, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(9.219544613762692E-9, 9.219544613762692E-9);
      // Undeclared exception!
      try { 
        brentOptimizer0.doOptimize();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(9.219544613762692E-9, 9.219544613762692E-9);
      Inverse inverse0 = new Inverse();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2146673671, (UnivariateFunction) inverse0, goalType0, 9.219544613762692E-9, (double) 2146673671);
      assertEquals(2.146673648706456E9, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(9.219544613762692E-9, 9.219544613762692E-9);
      Inverse inverse0 = new Inverse();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2146673671, (UnivariateFunction) inverse0, goalType0, 9.219544613762692E-9, (double) 2146673671);
      assertEquals(4.8783751163537465E7, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(2229.13, (-1670.67393663264));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,670.674 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(0.0, 583.89754947483, (ConvergenceChecker<UnivariatePointValuePair>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.3333333333333333, 0.5);
      Acosh acosh0 = new Acosh();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2535, (UnivariateFunction) acosh0, goalType0, 7005.56668956867, (-263.20589429278346), (-263.20589429278346));
      assertEquals(2513.218176248896, univariatePointValuePair0.getPoint(), 0.01);
  }
}
