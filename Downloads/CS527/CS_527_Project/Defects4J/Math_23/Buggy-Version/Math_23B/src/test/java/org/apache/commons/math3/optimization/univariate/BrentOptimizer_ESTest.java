/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 09 04:12:07 GMT 2024
 */

package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Asinh;
import org.apache.commons.math3.analysis.function.Sin;
import org.apache.commons.math3.analysis.function.Sqrt;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(471.242, 1.2340981629677117E-4);
      Sqrt sqrt0 = new Sqrt();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(3410, (UnivariateFunction) sqrt0, goalType0, (-2990.8954792), 471.242);
      assertEquals(Double.NaN, univariatePointValuePair0.getValue(), 0.01);
      assertEquals((-1259.8267395999999), univariatePointValuePair0.getPoint(), 0.01);
      assertNotNull(univariatePointValuePair0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.006, 0.006);
      Sin sin0 = new Sin();
      GoalType goalType0 = GoalType.MAXIMIZE;
      brentOptimizer0.optimize(1459, (UnivariateFunction) sin0, goalType0, 5.0614674548127384E-8, 0.006, (double) 1459);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.doOptimize();
      assertEquals(0.6159900699055525, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.006, 0.006);
      Sin sin0 = new Sin();
      GoalType goalType0 = GoalType.MAXIMIZE;
      brentOptimizer0.optimize(1459, (UnivariateFunction) sin0, goalType0, 5.0614674548127384E-8, (-3667.653187), (double) 1459);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.doOptimize();
      assertEquals((-0.4429179578876905), univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1.4143636226654053, 3.0);
      // Undeclared exception!
      try { 
        brentOptimizer0.doOptimize();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(0.3333333134651184, (-183.9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -183.9 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1.4143636226654053, 1.4143636226654053, (ConvergenceChecker<UnivariatePointValuePair>) null);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariatePointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(0.0, 0.0, convergenceChecker0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.006, 0.006);
      Asinh asinh0 = new Asinh();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1610612736, (UnivariateFunction) asinh0, goalType0, (double) 1610612736, (-2065.3472488));
      assertEquals((-2049.1194778011195), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.006, 0.006);
      Sin sin0 = new Sin();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1459, (UnivariateFunction) sin0, goalType0, 1889.68666837, 5.0614674548127364E-8, 1.4340268104765812);
      assertEquals(1414.2576261254314, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.006, 0.006);
      GoalType goalType0 = GoalType.MAXIMIZE;
      Sin sin0 = new Sin();
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1459, (UnivariateFunction) sin0, goalType0, (-2190.9920704641), (double) 1459, 1.5552046238755135);
      assertEquals(1.5707008962832312, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.006, 0.006);
      Asinh asinh0 = new Asinh();
      GoalType goalType0 = GoalType.MAXIMIZE;
      brentOptimizer0.optimize(1459, (UnivariateFunction) asinh0, goalType0, 0.0, 5.0614674548127384E-8, 0.0);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.doOptimize();
      assertEquals(0.0, univariatePointValuePair0.getPoint(), 0.01);
      assertEquals(0.0, univariatePointValuePair0.getValue(), 0.01);
      assertNotNull(univariatePointValuePair0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.006, 0.006);
      Sin sin0 = new Sin();
      GoalType goalType0 = GoalType.MINIMIZE;
      brentOptimizer0.optimize(1459, (UnivariateFunction) sin0, goalType0, 5.0614674548127384E-8, (-3667.653187), (double) 1459);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.doOptimize();
      assertEquals((-1313.3685682448315), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(2.0, (-2923.5987848198374), (ConvergenceChecker<UnivariatePointValuePair>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,923.599 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(1.9653234116333892E-184, 0.7316888570785522);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.006, 0.006);
      Asinh asinh0 = new Asinh();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1610612736, (UnivariateFunction) asinh0, goalType0, (double) 1610612736, (-2065.3472488));
      assertEquals(21.882327530458525, univariatePointValuePair0.getValue(), 0.01);
  }
}
