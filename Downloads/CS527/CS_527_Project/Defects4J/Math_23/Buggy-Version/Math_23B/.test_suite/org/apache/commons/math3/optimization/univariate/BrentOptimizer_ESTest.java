/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 10 00:19:39 GMT 2024
 */

package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Expm1;
import org.apache.commons.math3.analysis.function.Tan;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(5.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.11113807559013367, 0.11113807559013367);
      Expm1 expm1_0 = new Expm1();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1044, (UnivariateFunction) expm1_0, goalType0, 0.11113807559013367, (double) 1044, (double) 1044);
      assertEquals(0.33235203140911973, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.11113807559013367, 0.11113807559013367);
      Expm1 expm1_0 = new Expm1();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(490, (UnivariateFunction) expm1_0, goalType0, (double) 490, (-649.89396663), (-649.89396663));
      assertEquals((-649.89396663), univariatePointValuePair0.getPoint(), 0.01);
      assertEquals((-1.0), univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.11113807559013367, 0.11113807559013367);
      Expm1 expm1_0 = new Expm1();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1083, (UnivariateFunction) expm1_0, goalType0, 0.11113807559013367, (double) 1083, 0.11113807559013367);
      assertEquals(0.11113807559013367, univariatePointValuePair0.getPoint(), 0.01);
      assertEquals(0.11754920246761832, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.11113807559013367, 0.11113807559013367);
      Expm1 expm1_0 = new Expm1();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1054, (UnivariateFunction) expm1_0, goalType0, 0.11113807559013367, (double) 1054, (double) 1054);
      assertEquals(1054.0, univariatePointValuePair0.getPoint(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.11113807559013367, 0.11113807559013367);
      GoalType goalType0 = GoalType.MAXIMIZE;
      Tan tan0 = new Tan();
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1231, (UnivariateFunction) tan0, goalType0, (double) 1231, (double) 1231, (-2139.354814));
      assertEquals((-2139.354814), univariatePointValuePair0.getPoint(), 0.01);
      assertEquals(0.06989658951507073, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.11113807559013367, 0.11113807559013367);
      Expm1 expm1_0 = new Expm1();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2145769858, (UnivariateFunction) expm1_0, goalType0, 0.11113807559013367, (double) 2145769858, (double) 2145769858);
      assertEquals(Double.POSITIVE_INFINITY, univariatePointValuePair0.getValue(), 0.01);
      assertEquals(2.145769858E9, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.11113807559013367, 0.11113807559013367);
      Expm1 expm1_0 = new Expm1();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1054, (UnivariateFunction) expm1_0, goalType0, 0.11113807559013367, 0.11113807559013367, 0.11113807559013367);
      assertEquals(0.11754920246761832, univariatePointValuePair0.getValue(), 0.01);
      assertEquals(0.11113807559013367, univariatePointValuePair0.getPoint(), 0.01);
      assertNotNull(univariatePointValuePair0);
  }
}
