/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 09 04:18:42 GMT 2024
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DefaultRealMatrixChangingVisitor;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixChangingVisitor;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenMapRealMatrix_ESTest extends OpenMapRealMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(972, 72);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      OpenMapRealMatrix openMapRealMatrix2 = new OpenMapRealMatrix(openMapRealMatrix0);
      // Undeclared exception!
      try { 
        openMapRealMatrix0.addToEntry(531, (-671), (-671));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (-671)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(3728, 2560);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      openMapRealMatrix1.multiplyEntry(0, 0, (-1211.422));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 4055;
      int int1 = 249;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4055, 249);
      DefaultRealMatrixChangingVisitor defaultRealMatrixChangingVisitor0 = new DefaultRealMatrixChangingVisitor();
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      openMapRealMatrix1.getRowDimension();
      int[] intArray0 = new int[2];
      intArray0[0] = 249;
      intArray0[1] = 4055;
      // Undeclared exception!
      try { 
        openMapRealMatrix1.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (4,055)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      int int1 = 60;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 60);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      // Undeclared exception!
      try { 
        openMapRealMatrix0.preMultiply((RealMatrix) openMapRealMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 60 != 1
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(253, 1);
      openMapRealMatrix0.createMatrix(1, 1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(352, 352);
      openMapRealMatrix0.getEntry(1, 221);
      openMapRealMatrix0.isSquare();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1918));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 1);
      // Undeclared exception!
      try { 
        openMapRealVector0.outerProduct(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,918 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 216;
      int int1 = 1730;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(216, 1730);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(1730, 1730);
      // Undeclared exception!
      try { 
        openMapRealMatrix0.subtract(openMapRealMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 216x1,730 but expected 1,730x1,730
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 2985;
      int int1 = 218;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2985, 218);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      int int2 = 0;
      // Undeclared exception!
      openMapRealMatrix1.scalarAdd(0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 4393;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 4393);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4393;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 4393;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealMatrix0.subtract((RealMatrix) array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 1x4,393 but expected 3x1
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 3572;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(3572, 1394);
      int int1 = 0;
      // Undeclared exception!
      try { 
        openMapRealMatrix0.getEntry(0, (-2215));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (-2,215)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 213;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(213, 213);
      // Undeclared exception!
      try { 
        openMapRealMatrix0.add((OpenMapRealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 2309;
      int int1 = 156;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2309, 156);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      // Undeclared exception!
      try { 
        openMapRealMatrix1.multiply(openMapRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 156 != 2,309
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 2005;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2005, 623);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      int int1 = (-1906);
      // Undeclared exception!
      try { 
        openMapRealMatrix1.setEntry((-3191), 623, 1.0E-12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (-3,191)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 14);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(14, 14);
      OpenMapRealMatrix openMapRealMatrix2 = new OpenMapRealMatrix(openMapRealMatrix1);
      // Undeclared exception!
      try { 
        openMapRealMatrix0.add(openMapRealMatrix2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 1x14 but expected 14x14
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 156;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(182, 156);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      // Undeclared exception!
      try { 
        openMapRealMatrix1.multiplyEntry(156, 182, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (182)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 709;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(709, 72);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      // Undeclared exception!
      try { 
        openMapRealMatrix1.multiplyEntry(72, 72, 709);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (72)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 1);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.copy();
      DefaultRealMatrixChangingVisitor defaultRealMatrixChangingVisitor0 = new DefaultRealMatrixChangingVisitor();
      openMapRealMatrix1.walkInColumnOrder((RealMatrixChangingVisitor) defaultRealMatrixChangingVisitor0);
      int int1 = 2461;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(2461);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      arrayRealVector0.getMinValue();
      arrayRealVector1.getMaxIndex();
      // Undeclared exception!
      try { 
        openMapRealMatrix0.operate((RealVector) arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,461 != 1
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1596, 1596);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      openMapRealMatrix1.getColumnDimension();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1547, 2181);
      // Undeclared exception!
      try { 
        openMapRealMatrix0.createMatrix(1547, (-2680));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,680 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(126, 931);
      // Undeclared exception!
      try { 
        openMapRealMatrix0.addToEntry(143, (-519), 931);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (143)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-166);
      int int1 = 2544;
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix((-166), 2544);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -166 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = null;
      OpenMapRealMatrix openMapRealMatrix1 = null;
      try {
        openMapRealMatrix1 = new OpenMapRealMatrix((OpenMapRealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix((-405), (-1535));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -405 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(271, 271);
      openMapRealMatrix0.getColumnDimension();
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 271;
      doubleArray1[1] = (double) 271;
      doubleArray1[2] = (double) 271;
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(271);
      openMapRealMatrix0.copy();
      // Undeclared exception!
      openMapRealMatrix0.getData();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix(173, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1055;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1055, 1055);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      // Undeclared exception!
      openMapRealMatrix1.scalarAdd(1055);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      OpenMapRealMatrix openMapRealMatrix2 = openMapRealMatrix0.add(openMapRealMatrix1);
      OpenMapRealMatrix openMapRealMatrix3 = openMapRealMatrix2.multiply(openMapRealMatrix0);
      OpenMapRealMatrix openMapRealMatrix4 = openMapRealMatrix3.add(openMapRealMatrix2);
      // Undeclared exception!
      try { 
        openMapRealMatrix4.multiplyEntry(1, 1, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 297;
      int int1 = 1;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(297, 1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      openMapRealMatrix1.subtract(openMapRealMatrix0);
      int int2 = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 297;
      doubleArray0[1] = (double) 0;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((ArrayRealVector) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }
}
