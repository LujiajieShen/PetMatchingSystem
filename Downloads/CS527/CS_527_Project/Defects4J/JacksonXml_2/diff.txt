diff --git a/release-notes/VERSION b/release-notes/VERSION
index 10b88c9..19f121a 100644
--- a/release-notes/VERSION
+++ b/release-notes/VERSION
@@ -6,7 +6,8 @@ Project: jackson-dataformat-xml
 
 2.8.0 (not yet released)
 
-No changes since 2.7.
+#196: Mixed content not supported if there are child elements
+ (reported by hvdp31@github)
 
 2.7.5 (not yet released)
 
diff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java
index 6657102..5e03896 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java
@@ -53,7 +53,14 @@ public class XmlTokenStream
     protected int _currentState;
 
     protected int _attributeCount;
-    
+
+    /**
+     * If true we have a START_ELEMENT with mixed text
+     *
+     * @since 2.8
+     */
+    protected boolean _mixedText;
+
     /**
      * Index of the next attribute of the current START_ELEMENT
      * to return (as field name and value pair), if any; -1
@@ -293,7 +300,7 @@ public class XmlTokenStream
         // Anything to do in failed case? Roll back whatever we found or.. ?
         return null;
     }
-    
+
     /*
     /**********************************************************************
     /* Internal methods, parsing
@@ -315,21 +322,36 @@ public class XmlTokenStream
             }
             // otherwise need to find START/END_ELEMENT or text
             String text = _collectUntilTag();
-            // If it's START_ELEMENT, ignore any text
-            if (_xmlReader.getEventType() == XMLStreamReader.START_ELEMENT) {
-                return _initStartElement();
+            final boolean startElementNext = _xmlReader.getEventType() == XMLStreamReader.START_ELEMENT;
+            // If we have no/all-whitespace text followed by START_ELEMENT, ignore text
+            if (startElementNext) {
+                if (text == null || _allWs(text)) {
+                    _mixedText = false;
+                    return _initStartElement();
+                }
+                _mixedText = true;
+                _textValue = text;
+                return (_currentState = XML_TEXT);
             }
             // For END_ELEMENT we will return text, if any
             if (text != null) {
+                _mixedText = false;
                 _textValue = text;
                 return (_currentState = XML_TEXT);
             }
+            _mixedText = false;
             return _handleEndElement();
+
         case XML_ATTRIBUTE_NAME:
             // if we just returned name, will need to just send value next
             return (_currentState = XML_ATTRIBUTE_VALUE);
         case XML_TEXT:
-            // text is always followed by END_ELEMENT
+            // mixed text with other elements
+            if (_mixedText){
+                _mixedText = false;
+                return _initStartElement();
+            }
+            // text followed by END_ELEMENT
             return _handleEndElement();
         case XML_END:
             return XML_END;
@@ -494,6 +516,20 @@ public class XmlTokenStream
                 location.getColumnNumber());
     }
 
+
+    protected boolean _allWs(String str)
+    {
+        final int len = (str == null) ? 0 : str.length();
+        if (len > 0) {
+            for (int i = 0; i < len; ++i) {
+                if (str.charAt(i) > ' ') {
+                    return false;
+                }
+            }
+        }
+        return true;
+    }
+    
     // for DEBUGGING
     @Override
     public String toString()
diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/UnwrappingWithXMLTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/UnwrappingWithXMLTest.java
index 0094dee..dfaec1a 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/UnwrappingWithXMLTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/UnwrappingWithXMLTest.java
@@ -82,7 +82,7 @@ public class UnwrappingWithXMLTest extends XmlTestBase
      */
 
     /**
-   * Simple test to verify that explicit schema mapping works fine
+     * Simple test to verify that explicit schema mapping works fine
      * with unwrapped entities
      */
     public void testSimpleUnwrappingRoundtrip()
diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/XmlTextTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/XmlTextTest.java
index f781012..6bfc69f 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/XmlTextTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/XmlTextTest.java
@@ -29,6 +29,30 @@ public class XmlTextTest extends XmlTestBase
         public String phoneNumber = "555-1234";
     }
 
+    static class WindSpeed {
+        @JacksonXmlProperty(isAttribute = true)
+        public String units;
+
+        @JacksonXmlText
+        public int value;
+
+        public Radius radius;
+    }
+
+    static class Radius {
+        @JacksonXmlText
+        public int value;
+    }
+
+        
+    /*
+    /**********************************************************
+    /* Test methods
+    /**********************************************************
+     */
+
+    private final XmlMapper MAPPER = xmlMapper(true);
+    
     public void testXmlTextWithSuppressedValue() throws Exception
     {
         final XmlMapper mapper = new XmlMapper();
@@ -38,12 +62,21 @@ public class XmlTextTest extends XmlTestBase
         assertEquals(expectedXml, xml);
     }
 
+    // for [dataformat-xml#196]
+    public void testMixedContent() throws Exception
+    {
+        WindSpeed result = MAPPER.readValue("<windSpeed units='kt'> 27 <radius>20</radius></windSpeed>",
+                WindSpeed.class);
+        assertEquals(27, result.value);
+        assertNotNull(result.radius);
+        assertEquals(20, result.radius.value);
+    }
+
     // for [dataformat-xml#198]
     public void testSimple198() throws Exception
     {
-        final XmlMapper mapper = new XmlMapper();
-        String xml = mapper.writeValueAsString(new Phone());
-        Phone result = mapper.readValue(xml, Phone.class);
+        String xml = MAPPER.writeValueAsString(new Phone());
+        Phone result = MAPPER.readValue(xml, Phone.class);
         assertNotNull(result);
     }
 }
