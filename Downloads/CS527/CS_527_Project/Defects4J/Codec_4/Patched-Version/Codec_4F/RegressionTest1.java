import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        java.lang.Class<?> wildcardClass7 = bigInteger3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "aGc9PQ" + "'", str14, "aGc9PQ");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray5, false);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.Object obj14 = base64_10.encode((java.lang.Object) byteArray13);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray13, true);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64(100, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray22);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false, 10);
        boolean boolean34 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray29);
        java.lang.String str35 = base64_19.encodeToString(byteArray29);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ufffd" + "'", str35, "\ufffd");
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (10) than the specified maxium size of 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[89, 85, 100, 106, 80, 81]");
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(0, byteArray7, true);
        byte[] byteArray12 = base64_1.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        java.lang.Object obj22 = base64_1.encode((java.lang.Object) byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj22);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray11, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = base64_6.decode(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        byte[] byteArray2 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64(10, byteArray2);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((-1), byteArray7, true);
        byte[] byteArray12 = base64_10.decode("hg==\r\n");
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        byte[] byteArray19 = base64_10.decode(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray22 = base64_3.decode(byteArray19);
        boolean boolean23 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray22, false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray22);
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = base64_24.decode(byteArray27);
        java.lang.Object obj30 = base64_1.decode((java.lang.Object) byteArray27);
        boolean boolean31 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        boolean boolean36 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray34);
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        java.lang.Object obj41 = base64_1.decode((java.lang.Object) byteArray40);
        byte[] byteArray43 = base64_1.decode("YUdjOVBRMEs");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        byte[] byteArray29 = base64_6.decode("hi!");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = base64_6.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((-1), byteArray42, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42);
        java.lang.Object obj47 = base64_6.encode((java.lang.Object) byteArray42);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray53 = base64_51.decode("hi!");
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((-1), byteArray53, true);
        byte[] byteArray58 = base64_56.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        byte[] byteArray62 = base64_56.encode(byteArray61);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64(0, byteArray61);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((-1), byteArray61);
        byte[] byteArray67 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger68 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray67);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger68);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray69);
        byte[] byteArray72 = base64_64.decode(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray72);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray72, true, true, (int) (byte) 100);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, false);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray77);
        java.math.BigInteger bigInteger81 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray80);
        java.lang.Object obj82 = base64_6.decode((java.lang.Object) byteArray80);
        boolean boolean83 = base64_6.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(bigInteger81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("YUdjOVBRMEs=\r\n");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray3);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (10) than the specified maxium size of 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32);
        boolean boolean35 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray10);
        boolean boolean17 = base64_16.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        byte[] byteArray10 = base64_8.decode("aGc");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, (int) '#');
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[89, 85, 100, 106, 80, 81, 61, 61]");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((-1), byteArray22, true);
        byte[] byteArray27 = base64_25.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        java.lang.Object obj33 = base64_25.encode((java.lang.Object) byteArray30);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        java.lang.String str39 = base64_25.encodeToString(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray43);
        byte[] byteArray46 = base64_25.decode(byteArray43);
        byte[] byteArray48 = base64_25.decode("hi!");
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger52 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray51);
        java.math.BigInteger bigInteger53 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray51);
        java.math.BigInteger bigInteger54 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray51);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger54);
        java.lang.String str56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        byte[] byteArray57 = base64_25.decode(byteArray55);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray61);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((-1), byteArray61, true);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61);
        java.lang.Object obj66 = base64_25.encode((java.lang.Object) byteArray61);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray70 = base64_68.decode("hi!");
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray70);
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64((-1), byteArray70, true);
        byte[] byteArray75 = base64_73.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_76 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray78 = base64_76.decode("hi!");
        java.lang.String str79 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray78);
        boolean boolean80 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray78);
        java.math.BigInteger bigInteger81 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray78);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray78);
        boolean boolean83 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray82);
        byte[] byteArray84 = base64_73.decode(byteArray82);
        byte[] byteArray85 = base64_25.decode(byteArray82);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj88 = base64_1.encode((java.lang.Object) true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "aGc" + "'", str39, "aGc");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-122]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-122]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-122]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hg" + "'", str79, "hg");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(bigInteger81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-122]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-122]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[97, 71, 99, 61, 13, 10]");
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = base64_6.encode(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = base64_0.decode(byteArray27);
        boolean boolean30 = base64_0.isUrlSafe();
        byte[] byteArray32 = base64_0.decode("\ufffd");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray20 = base64_1.decode("aGc");
        boolean boolean21 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray24);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray28);
        byte[] byteArray33 = base64_1.encode(byteArray28);
        byte[] byteArray35 = base64_1.decode("V2tGQlBRMEs=\r\n");
        boolean boolean36 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hg" + "'", str25, "hg");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[87, 107, 70, 66, 80, 81, 48, 75]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[86, 50, 116, 71, 81, 108, 66, 82, 77, 69, 115, 61, 13, 10]");
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray4, true);
        boolean boolean9 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray13);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((-1), byteArray19, true);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        java.lang.String str27 = base64_22.encodeToString(byteArray25);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        java.lang.Object obj29 = base64_15.decode((java.lang.Object) str28);
        java.lang.Object obj30 = base64_8.decode((java.lang.Object) str28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.decodeBase64("\ufffd");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33);
        java.lang.String str35 = base64_8.encodeToString(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        boolean boolean42 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray40);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        java.lang.String str46 = base64_37.encodeToString(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray49 = base64_47.decode("hi!");
        java.lang.String str50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        boolean boolean51 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray49);
        java.math.BigInteger bigInteger52 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        byte[] byteArray54 = base64_37.decode(byteArray49);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray57 = base64_55.decode("hi!");
        java.lang.String str58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray57);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray57);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray59);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false, false);
        java.lang.String str64 = base64_37.encodeToString(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray67 = base64_65.decode("hi!");
        java.lang.String str68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray67);
        boolean boolean69 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray67);
        java.math.BigInteger bigInteger70 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray67);
        java.lang.String str71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray67);
        byte[] byteArray72 = base64_37.decode(byteArray67);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray72, false, false);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray72);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray76);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray76, false, false, (int) (short) -1);
        java.lang.String str82 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray76);
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray76);
        java.lang.Object obj84 = base64_8.decode((java.lang.Object) byteArray83);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "aGc=\r\n" + "'", str46, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hg" + "'", str50, "hg");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hg" + "'", str58, "hg");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "aGc=\r\n" + "'", str64, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hg" + "'", str68, "hg");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(bigInteger70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hg" + "'", str71, "hg");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(obj84);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(0, byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        boolean boolean23 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray21);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        byte[] byteArray27 = base64_18.encode(byteArray25);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64(1, byteArray28);
        byte[] byteArray31 = base64_29.decode("aGc=");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31);
        java.lang.String str33 = base64_16.encodeToString(byteArray31);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "aGc=" + "'", str33, "aGc=");
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray5 = base64_0.decode(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "WVVkalBRPT0=\r\n" + "'", str13, "WVVkalBRPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[87, 86, 86, 107, 97, 108, 66, 82, 80, 84, 48, 61]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "WVVkalBRPT0" + "'", str15, "WVVkalBRPT0");
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray25 = base64_16.encode(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray28 = base64_5.encode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        boolean boolean36 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray34);
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        java.lang.String str40 = base64_31.encodeToString(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        boolean boolean45 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray43);
        java.math.BigInteger bigInteger46 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray43);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        byte[] byteArray48 = base64_31.decode(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray53);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false);
        java.lang.String str58 = base64_31.encodeToString(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        java.lang.String str62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray61);
        boolean boolean63 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray61);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        java.lang.String str65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray61);
        byte[] byteArray66 = base64_31.decode(byteArray61);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray70);
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray70);
        byte[] byteArray73 = base64_5.encode(byteArray70);
        java.lang.String str74 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray70);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70, true, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "aGc=\r\n" + "'", str40, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hg" + "'", str44, "hg");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hg" + "'", str52, "hg");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "aGc=\r\n" + "'", str58, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hg" + "'", str62, "hg");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hg" + "'", str65, "hg");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        java.lang.String str22 = base64_13.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        byte[] byteArray30 = base64_13.decode(byteArray25);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false);
        byte[] byteArray35 = base64_0.decode(byteArray25);
        byte[] byteArray37 = base64_0.decode("");
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false, true, (int) (byte) 100);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hg" + "'", str17, "hg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "aGc=\r\n" + "'", str22, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hg" + "'", str26, "hg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        byte[] byteArray10 = base64_8.decode("aGc");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, (int) '#');
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 71, 99, 61]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(false);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((-1), byteArray7, true);
        byte[] byteArray12 = base64_10.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = base64_10.encode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64(0, byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray26 = base64_18.decode(byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        java.lang.Object obj28 = base64_1.encode((java.lang.Object) byteArray26);
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray26);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray5 = base64_0.decode(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[89, 85, 100, 106, 80, 81, 61, 61]");
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray4 = base64_0.decode("aGc9PQ==\r\n");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, false);
        byte[] byteArray12 = base64_0.decode(byteArray11);
        java.lang.Object obj13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = base64_0.decode(obj13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = base64_0.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray33);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str37 = base64_0.encodeToString(byteArray33);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger43);
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray44);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, true, (int) (byte) 100);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray54 = base64_0.encode(byteArray44);
        boolean boolean55 = base64_0.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray58 = base64_56.decode("hi!");
        java.lang.String str59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray58);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, true, false, (int) ' ');
        java.lang.String str65 = base64_0.encodeToString(byteArray58);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg==" + "'", str37, "hg==");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hg" + "'", str59, "hg");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hg==" + "'", str65, "hg==");
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, true);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103, 61, 61]");
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        java.lang.String str17 = base64_12.encodeToString(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.lang.Object obj19 = base64_5.decode((java.lang.Object) str18);
        byte[] byteArray21 = base64_5.decode("aGc9PQ0K");
        byte[] byteArray23 = base64_5.decode("YUdj");
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((-1), byteArray29, true);
        byte[] byteArray34 = base64_32.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        byte[] byteArray38 = base64_32.encode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(0, byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((-1), byteArray37);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray44);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger50 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        byte[] byteArray51 = base64_46.decode(byteArray49);
        byte[] byteArray52 = base64_40.decode(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        java.lang.String str56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        boolean boolean57 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray55);
        java.math.BigInteger bigInteger58 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray55);
        java.lang.String str59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray55);
        byte[] byteArray62 = base64_40.decode(byteArray61);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false, false);
        java.lang.Object obj66 = base64_5.encode((java.lang.Object) byteArray61);
        byte[] byteArray68 = base64_5.decode("V2tGQlBRMEs=\r\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hg" + "'", str17, "hg");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hg" + "'", str56, "hg");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hg" + "'", str59, "hg");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[87, 107, 70, 66, 80, 81, 48, 75]");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.lang.Object obj17 = base64_9.encode((java.lang.Object) byteArray14);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        java.lang.String str23 = base64_9.encodeToString(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false);
        byte[] byteArray26 = base64_2.decode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        byte[] byteArray32 = base64_27.decode(byteArray31);
        java.lang.Object obj33 = base64_2.encode((java.lang.Object) byteArray32);
        byte[] byteArray34 = null;
        byte[] byteArray35 = base64_2.encode(byteArray34);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "aGc" + "'", str23, "aGc");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNull(byteArray35);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = base64_9.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(0, byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray25 = base64_17.decode(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, true, (int) (byte) 100);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray33, true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        java.lang.String str22 = base64_13.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        byte[] byteArray30 = base64_13.decode(byteArray25);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false);
        byte[] byteArray35 = base64_0.decode(byteArray25);
        byte[] byteArray37 = base64_0.decode("");
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger42);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray43);
        java.lang.String str45 = base64_0.encodeToString(byteArray43);
        boolean boolean46 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray43);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hg" + "'", str17, "hg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "aGc=\r\n" + "'", str22, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hg" + "'", str26, "hg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((-1), byteArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [L3dvPQ==??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 61]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "L3dvPQ==\r\n" + "'", str9, "L3dvPQ==\r\n");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[76, 51, 100, 118, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("\ufffd");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, true, false);
        org.junit.Assert.assertNotNull(byteArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[97, 71, 99, 61, 13, 10]");
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        byte[] byteArray10 = base64_8.decode("aGc");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, (int) '#');
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[87, 86, 86, 107, 97, 108, 66, 82]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[86, 49, 90, 87, 97, 50, 70, 115, 81, 108, 73]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[86, 106, 70, 97, 86, 50, 69, 121, 82, 110, 78, 82, 98, 69, 107, 61, 13, 10]");
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        java.lang.String str5 = base64_1.encodeToString(byteArray4);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = base64_9.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(0, byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray25 = base64_17.decode(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, false);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray24);
        byte[] byteArray31 = base64_29.decode("WVVkalBRPT0NCg");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.lang.String str19 = base64_10.encodeToString(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray22);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray27 = base64_10.decode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray31);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray38 = base64_33.decode(byteArray36);
        java.lang.Object obj39 = base64_10.decode((java.lang.Object) byteArray36);
        java.lang.Object obj40 = base64_8.encode((java.lang.Object) byteArray36);
        boolean boolean41 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray45);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray49);
        byte[] byteArray51 = base64_42.encode(byteArray49);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        byte[] byteArray53 = base64_8.encode(byteArray49);
        byte[] byteArray55 = base64_8.decode("aGcNCg");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "aGc=\r\n" + "'", str19, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[104, 103, 13, 10]");
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray11 = base64_1.decode(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        boolean boolean20 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64(0, byteArray18, true);
        byte[] byteArray23 = base64_12.decode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        java.lang.Object obj33 = base64_12.encode((java.lang.Object) byteArray30);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((-1), byteArray39, true);
        byte[] byteArray44 = base64_42.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray47 = base64_45.decode("hi!");
        byte[] byteArray48 = base64_42.encode(byteArray47);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64(0, byteArray47);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((-1), byteArray47);
        byte[] byteArray53 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger54 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger54);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray55);
        byte[] byteArray58 = base64_50.decode(byteArray57);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, true, true, (int) (byte) 100);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false);
        java.lang.Object obj66 = base64_12.encode((java.lang.Object) byteArray65);
        byte[] byteArray68 = base64_12.decode("YUdjOVBR");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj69 = base64_1.encode((java.lang.Object) "YUdjOVBR");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[97, 71, 99, 57, 80, 81]");
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        java.lang.String str18 = base64_13.encodeToString(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        java.lang.Object obj20 = base64_6.decode((java.lang.Object) str19);
        byte[] byteArray22 = base64_6.decode("aGc9PQ0K");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray23, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc9PQ0K]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, true, false);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray23);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray3 = base64_1.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray9);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray16 = base64_11.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((-1), byteArray20, true);
        byte[] byteArray25 = base64_23.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.lang.Object obj31 = base64_23.encode((java.lang.Object) byteArray28);
        java.lang.String str32 = base64_11.encodeToString(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64(100, byteArray28);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray36);
        java.lang.String str38 = base64_1.encodeToString(byteArray36);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray36);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd" + "'", str32, "\ufffd");
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false);
        java.lang.String str28 = base64_1.encodeToString(byteArray23);
        byte[] byteArray30 = base64_1.decode("YUdjPQ0K");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "aGc=\r\n" + "'", str28, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true, false, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64(0, byteArray14, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg==]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.lang.Object obj19 = base64_1.decode((java.lang.Object) byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray25 = base64_20.decode(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        java.lang.String str28 = base64_1.encodeToString(byteArray26);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "aGc=\r\n" + "'", str9, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "YUdjPQ0K\r\n" + "'", str28, "YUdjPQ0K\r\n");
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray7);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, false);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        java.lang.Class<?> wildcardClass14 = byteArray13.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "aGc=\r\n" + "'", str8, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray3 = base64_1.decode("\ufffd");
        boolean boolean4 = base64_1.isUrlSafe();
        byte[] byteArray6 = base64_1.decode("aGc=");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "aGc=\r\n" + "'", str7, "aGc=\r\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false);
        java.lang.String str28 = base64_1.encodeToString(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray36 = base64_1.decode(byteArray31);
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, true, (int) (short) -1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "aGc=\r\n" + "'", str28, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 10);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (short) 0);
        byte[] byteArray4 = base64_2.decode("\ufffd");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray4);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc=??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[97, 71, 99, 61, 13, 10]");
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3, false);
        boolean boolean8 = base64_7.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((-1), byteArray12, true);
        byte[] byteArray17 = base64_15.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.lang.Object obj23 = base64_15.encode((java.lang.Object) byteArray20);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        java.lang.String str29 = base64_15.encodeToString(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray33);
        byte[] byteArray36 = base64_15.decode(byteArray33);
        byte[] byteArray38 = base64_15.decode("hi!");
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger44);
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        byte[] byteArray47 = base64_15.decode(byteArray45);
        byte[] byteArray48 = base64_7.decode(byteArray45);
        byte[] byteArray50 = base64_7.decode("L3dvPQ0K");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "aGc" + "'", str29, "aGc");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[47, 119, 111, 61, 13, 10]");
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 78, 67, 103]");
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray20);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray27 = base64_22.decode(byteArray25);
        byte[] byteArray28 = base64_16.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray33);
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray38);
        byte[] byteArray40 = base64_35.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((-1), byteArray44, true);
        byte[] byteArray49 = base64_47.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = base64_50.decode("hi!");
        java.lang.String str53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray52);
        java.math.BigInteger bigInteger54 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray52);
        java.lang.Object obj55 = base64_47.encode((java.lang.Object) byteArray52);
        java.lang.String str56 = base64_35.encodeToString(byteArray52);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64(100, byteArray52);
        java.math.BigInteger bigInteger58 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray52);
        java.math.BigInteger bigInteger59 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray52);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger59);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj62 = base64_16.decode((java.lang.Object) bigInteger59);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hg" + "'", str53, "hg");
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(obj55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\ufffd" + "'", str56, "\ufffd");
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, true, (int) (byte) 100);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(1, byteArray7, true);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((-1), byteArray24, true);
        byte[] byteArray29 = base64_27.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = base64_27.encode(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64(0, byteArray32);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((-1), byteArray32);
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray38);
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray38);
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray38);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger41);
        byte[] byteArray43 = base64_35.decode(byteArray42);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj47 = base64_18.decode((java.lang.Object) false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("aGc");
        java.math.BigInteger bigInteger2 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[104, 103]");
        org.junit.Assert.assertNotNull(bigInteger2);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray5);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((-1), byteArray11, true);
        byte[] byteArray16 = base64_14.decode("hg==\r\n");
        byte[] byteArray17 = base64_7.encode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((-1), byteArray21, true);
        byte[] byteArray26 = base64_24.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        java.lang.Object obj32 = base64_24.encode((java.lang.Object) byteArray29);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray35 = base64_33.decode("hi!");
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        java.lang.String str38 = base64_24.encodeToString(byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false);
        java.lang.String str41 = base64_7.encodeToString(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        byte[] byteArray47 = base64_42.decode(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        java.lang.String str49 = base64_7.encodeToString(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray48);
        java.lang.Object obj51 = base64_1.decode((java.lang.Object) byteArray48);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((-1), byteArray55, true);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray61);
        java.lang.String str63 = base64_58.encodeToString(byteArray61);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger64);
        java.lang.Object obj66 = base64_1.encode((java.lang.Object) byteArray65);
        java.math.BigInteger bigInteger67 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray65);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hg" + "'", str30, "hg");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "aGc" + "'", str38, "aGc");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ufffd" + "'", str41, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ufffd" + "'", str49, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hg" + "'", str63, "hg");
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(bigInteger67);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.lang.String str29 = base64_2.encodeToString(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false);
        java.lang.String str38 = base64_2.encodeToString(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(0, byteArray33, true);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((-1), byteArray44, true);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray49);
        java.math.BigInteger bigInteger51 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray50);
        byte[] byteArray52 = base64_40.decode(byteArray50);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "aGc=\r\n" + "'", str29, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg==\r\n" + "'", str38, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false);
        java.lang.Class<?> wildcardClass23 = byteArray19.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        boolean boolean15 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((-1), byteArray19, true);
        byte[] byteArray24 = base64_22.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        java.lang.Object obj30 = base64_22.encode((java.lang.Object) byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        java.lang.String str36 = base64_22.encodeToString(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        byte[] byteArray38 = base64_6.encode(byteArray35);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "aGc" + "'", str36, "aGc");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99]");
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        byte[] byteArray16 = base64_6.decode("aGc=");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((-1), byteArray20, true);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20);
        java.lang.Object obj25 = base64_6.decode((java.lang.Object) byteArray20);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        byte[] byteArray21 = base64_2.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray29, false);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray40);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, true, true);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray43, false);
        java.lang.Object obj50 = base64_35.decode((java.lang.Object) byteArray43);
        byte[] byteArray51 = base64_2.encode(byteArray43);
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray51);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, true, true, 1);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray56);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64((-1), byteArray62, true);
        byte[] byteArray67 = base64_65.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray70 = base64_68.decode("hi!");
        java.lang.String str71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray70);
        java.math.BigInteger bigInteger72 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        java.lang.Object obj73 = base64_65.encode((java.lang.Object) byteArray70);
        org.apache.commons.codec.binary.Base64 base64_74 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray76 = base64_74.decode("hi!");
        java.lang.String str77 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray76);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray76);
        java.lang.String str79 = base64_65.encodeToString(byteArray78);
        org.apache.commons.codec.binary.Base64 base64_81 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray83 = base64_81.decode("hi!");
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray83);
        org.apache.commons.codec.binary.Base64 base64_85 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray83);
        byte[] byteArray86 = base64_65.decode(byteArray83);
        org.apache.commons.codec.binary.Base64 base64_88 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray83, false);
        byte[] byteArray89 = base64_57.encode(byteArray83);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray89);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-122]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hg" + "'", str71, "hg");
        org.junit.Assert.assertNotNull(bigInteger72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-122]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hg" + "'", str77, "hg");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "aGc" + "'", str79, "aGc");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-122]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[97, 71, 99, 57, 80, 81, 61, 61]");
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103, 61, 61]");
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, false, (int) (short) 1);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, false);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        java.lang.Class<?> wildcardClass38 = byteArray33.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        boolean boolean15 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray19, false);
        byte[] byteArray26 = base64_24.decode("\ufffd");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray28 = base64_6.decode(byteArray27);
        java.lang.Class<?> wildcardClass29 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str21 = base64_7.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray25);
        byte[] byteArray28 = base64_7.decode(byteArray25);
        byte[] byteArray30 = base64_7.decode("hi!");
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger36);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray39 = base64_7.decode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((-1), byteArray43, true);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43);
        java.lang.Object obj48 = base64_7.encode((java.lang.Object) byteArray43);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = base64_50.decode("hi!");
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray52);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64((-1), byteArray52, true);
        byte[] byteArray57 = base64_55.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = base64_58.decode("hi!");
        java.lang.String str61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray60);
        boolean boolean62 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray60);
        java.math.BigInteger bigInteger63 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray60);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray60);
        boolean boolean65 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray64);
        byte[] byteArray66 = base64_55.decode(byteArray64);
        byte[] byteArray67 = base64_7.decode(byteArray64);
        byte[] byteArray69 = base64_7.decode("\ufffd");
        byte[] byteArray70 = base64_0.encode(byteArray69);
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger74 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray73);
        java.math.BigInteger bigInteger75 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray73);
        java.math.BigInteger bigInteger76 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray73);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger76);
        java.lang.String str78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray77);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray77);
        boolean boolean80 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray77);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray77);
        java.lang.String str82 = base64_0.encodeToString(byteArray77);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hg" + "'", str61, "hg");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(bigInteger75);
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[97, 71, 99, 57, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 57, 80, 81, 61, 61]");
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false);
        java.lang.String str28 = base64_1.encodeToString(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray36 = base64_1.decode(byteArray31);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray40);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, true, true, (int) (byte) 100);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "aGc=\r\n" + "'", str28, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray10, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false);
        java.lang.Class<?> wildcardClass19 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray1, true);
        boolean boolean4 = base64_3.isUrlSafe();
        byte[] byteArray6 = base64_3.decode("YUdjPQ");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[97, 71, 99, 61]");
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.lang.String str19 = base64_10.encodeToString(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray22);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray27 = base64_10.decode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray31);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray38 = base64_33.decode(byteArray36);
        java.lang.Object obj39 = base64_10.decode((java.lang.Object) byteArray36);
        java.lang.Object obj40 = base64_8.encode((java.lang.Object) byteArray36);
        boolean boolean41 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray45);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray49);
        byte[] byteArray51 = base64_42.encode(byteArray49);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        byte[] byteArray53 = base64_8.encode(byteArray49);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger55);
        java.lang.String str58 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray57);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "aGc=\r\n" + "'", str19, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "YUdjPQ==\r\n" + "'", str58, "YUdjPQ==\r\n");
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99]");
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray4);
        byte[] byteArray8 = base64_6.decode("");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger16);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        boolean boolean20 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, true, (int) (byte) 100);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64(1, byteArray17, true);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray35 = base64_33.decode("hi!");
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray35);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(0, byteArray35, true);
        byte[] byteArray40 = base64_29.decode(byteArray35);
        boolean boolean41 = base64_29.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray47 = base64_45.decode("hi!");
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47);
        java.lang.String str49 = base64_42.encodeToString(byteArray48);
        byte[] byteArray50 = base64_29.decode(byteArray48);
        byte[] byteArray51 = base64_28.decode(byteArray50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray50);
        java.math.BigInteger bigInteger54 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray50);
        byte[] byteArray55 = base64_6.encode(byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64(10, byteArray55, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg==]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "aGc9PQ==" + "'", str49, "aGc9PQ==");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[104, 103, 61, 61]");
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.lang.String str29 = base64_2.encodeToString(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false);
        java.lang.String str38 = base64_2.encodeToString(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(0, byteArray33, true);
        byte[] byteArray42 = base64_40.decode("L3dvPQ0K");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "aGc=\r\n" + "'", str29, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg==\r\n" + "'", str38, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[47, 119, 111, 61, 13, 10]");
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = base64_6.decode(byteArray11);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true, true, (int) 'a');
        boolean boolean20 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[95, 119, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        java.lang.Object obj15 = base64_5.decode((java.lang.Object) byteArray13);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hg" + "'", str9, "hg");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "YUdjPQ0K\r\n" + "'", str14, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray20 = base64_1.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray25);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, true, true);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray28, false);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray39);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray39);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray42, false);
        java.lang.Object obj49 = base64_34.decode((java.lang.Object) byteArray42);
        byte[] byteArray50 = base64_1.encode(byteArray42);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hg" + "'", str9, "hg");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103, 61, 61]");
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        byte[] byteArray16 = base64_6.decode("aGc=\r\n");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[97, 71, 99, 61, 13, 10]");
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger5);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        boolean boolean28 = base64_6.isUrlSafe();
        boolean boolean29 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray33);
        boolean boolean36 = base64_35.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true);
        byte[] byteArray46 = base64_35.decode(byteArray45);
        byte[] byteArray47 = base64_6.encode(byteArray45);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hg" + "'", str40, "hg");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[97, 71, 99, 57, 80, 81, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[89, 85, 100, 106, 79, 86, 66, 82, 68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[89, 85, 100, 106, 79, 86, 66, 82, 68, 81, 111]");
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        byte[] byteArray2 = null;
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray2, true);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((-1), byteArray8, true);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8);
        java.lang.Object obj13 = base64_4.decode((java.lang.Object) byteArray8);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((-1), byteArray17, true);
        byte[] byteArray22 = base64_20.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        java.lang.Object obj28 = base64_20.encode((java.lang.Object) byteArray25);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        java.lang.String str34 = base64_20.encodeToString(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        java.lang.Class<?> wildcardClass36 = byteArray33.getClass();
        java.lang.Object obj37 = base64_4.decode((java.lang.Object) byteArray33);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        boolean boolean42 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray40);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        byte[] byteArray46 = base64_4.decode(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hg" + "'", str26, "hg");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "aGc" + "'", str34, "aGc");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103]");
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        java.lang.String str11 = base64_3.encodeToString(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray15);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        java.lang.Object obj21 = base64_3.decode((java.lang.Object) byteArray19);
        byte[] byteArray22 = base64_1.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((-1), byteArray26, true);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        java.lang.String str34 = base64_29.encodeToString(byteArray32);
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray37);
        java.lang.Object obj40 = base64_29.encode((java.lang.Object) byteArray37);
        java.lang.String str41 = base64_1.encodeToString(byteArray37);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "/wo=\r\n" + "'", str39, "/wo=\r\n");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "/wo=" + "'", str41, "/wo=");
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.lang.String str16 = base64_7.encodeToString(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = base64_7.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false);
        java.lang.String str34 = base64_7.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray42 = base64_7.decode(byteArray37);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false);
        java.lang.Object obj46 = base64_5.encode((java.lang.Object) byteArray45);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray50);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray54);
        byte[] byteArray56 = base64_5.decode(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64((-1), byteArray62, true);
        byte[] byteArray67 = base64_65.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray70 = base64_68.decode("hi!");
        byte[] byteArray71 = base64_65.encode(byteArray70);
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64(0, byteArray70);
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64((-1), byteArray70);
        byte[] byteArray76 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger77 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray76);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger77);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray78);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray78);
        byte[] byteArray81 = base64_73.decode(byteArray80);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray81);
        java.lang.Object obj83 = base64_5.decode((java.lang.Object) byteArray82);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "aGc=\r\n" + "'", str16, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "aGc=\r\n" + "'", str34, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-122]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(obj83);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = base64_9.decode(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray21 = base64_2.decode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64(0, byteArray28, true);
        byte[] byteArray33 = base64_22.decode(byteArray28);
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str35 = base64_2.encodeToString(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((-1), byteArray40, true);
        byte[] byteArray45 = base64_43.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray48 = base64_46.decode("hi!");
        byte[] byteArray49 = base64_43.encode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64(0, byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray53 = base64_51.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray57 = base64_55.decode("hi!");
        java.lang.String str58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray57);
        boolean boolean59 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64(0, byteArray57, true);
        byte[] byteArray62 = base64_51.decode(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray65 = base64_63.decode("hi!");
        java.lang.String str66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray65);
        boolean boolean67 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray65);
        java.math.BigInteger bigInteger68 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray65);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray65);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray69);
        java.lang.Object obj72 = base64_51.encode((java.lang.Object) byteArray69);
        byte[] byteArray75 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger76 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray75);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger76);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray77);
        java.lang.String str79 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray78);
        byte[] byteArray80 = base64_51.decode(byteArray78);
        byte[] byteArray83 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger84 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray83);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger84);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray85);
        java.lang.String str87 = base64_51.encodeToString(byteArray86);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray86);
        byte[] byteArray89 = base64_50.encode(byteArray86);
        java.lang.String str90 = base64_2.encodeToString(byteArray89);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hg" + "'", str58, "hg");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-122]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hg" + "'", str66, "hg");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("L3dvPQ==\r\n");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[47, 119, 111, 61]");
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, true, true, (int) (short) 1);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        boolean boolean2 = base64_1.isUrlSafe();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger8);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        java.lang.String str13 = base64_1.encodeToString(byteArray9);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        byte[] byteArray10 = base64_8.decode("aGc");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, (int) '#');
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray14);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "YUdjPQ==\r\n" + "'", str16, "YUdjPQ==\r\n");
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray20);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray27 = base64_22.decode(byteArray25);
        byte[] byteArray28 = base64_16.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray31);
        byte[] byteArray38 = base64_16.decode(byteArray37);
        boolean boolean39 = base64_16.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        byte[] byteArray29 = base64_6.decode("hi!");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = base64_6.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((-1), byteArray42, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42);
        java.lang.Object obj47 = base64_6.encode((java.lang.Object) byteArray42);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray50);
        java.lang.String str53 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray50);
        boolean boolean54 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray50);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray57);
        byte[] byteArray59 = base64_6.decode(byteArray58);
        byte[] byteArray61 = base64_6.decode("aGc");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hg==\r\n" + "'", str52, "hg==\r\n");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hg==\r\n" + "'", str53, "hg==\r\n");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[104, 103]");
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "aGc9PQ==\r\n" + "'", str5, "aGc9PQ==\r\n");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[97, 71, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[97, 71, 99, 57, 80, 81, 61, 61]");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        boolean boolean25 = base64_16.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((-1), byteArray30, true);
        byte[] byteArray35 = base64_33.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        byte[] byteArray39 = base64_33.encode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(0, byteArray38);
        byte[] byteArray41 = null;
        byte[] byteArray42 = base64_40.encode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray48 = base64_43.decode(byteArray47);
        byte[] byteArray49 = base64_40.encode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        boolean boolean56 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray54);
        java.math.BigInteger bigInteger57 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray58);
        java.lang.String str60 = base64_51.encodeToString(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray63 = base64_61.decode("hi!");
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray63);
        boolean boolean65 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray63);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray63);
        byte[] byteArray68 = base64_51.decode(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray71 = base64_69.decode("hi!");
        java.lang.String str72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray73);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false, false);
        java.lang.String str78 = base64_51.encodeToString(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_80 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray82 = base64_80.decode("hi!");
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray82);
        org.apache.commons.codec.binary.Base64 base64_84 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray82);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, false);
        java.lang.String str87 = base64_51.encodeToString(byteArray82);
        byte[] byteArray88 = base64_40.encode(byteArray82);
        byte[] byteArray89 = base64_16.decode(byteArray88);
        java.lang.String str90 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray88);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray88, true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hg" + "'", str55, "hg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "aGc=\r\n" + "'", str60, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hg" + "'", str64, "hg");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hg" + "'", str72, "hg");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-122]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "aGc=\r\n" + "'", str78, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-122]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hg==\r\n" + "'", str87, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-122]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "aGc9PQ==\r\n" + "'", str90, "aGc9PQ==\r\n");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray20 = base64_1.decode("aGc");
        boolean boolean21 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray24);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray28);
        byte[] byteArray33 = base64_1.encode(byteArray28);
        byte[] byteArray35 = base64_1.decode("V2tGQlBRMEs=\r\n");
        byte[] byteArray37 = base64_1.decode("hi!");
        boolean boolean38 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hg" + "'", str25, "hg");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[87, 107, 70, 66, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((-1), byteArray28, true);
        byte[] byteArray33 = base64_31.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        java.lang.Object obj39 = base64_31.encode((java.lang.Object) byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        java.lang.String str45 = base64_31.encodeToString(byteArray44);
        boolean boolean46 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray44);
        java.lang.String str47 = base64_16.encodeToString(byteArray44);
        java.lang.String str48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hg" + "'", str43, "hg");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "aGc" + "'", str45, "aGc");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "aGc=" + "'", str47, "aGc=");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "aGc" + "'", str48, "aGc");
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(false);
        byte[] byteArray3 = base64_1.decode("\ufffd");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 100);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[89, 85, 100, 106, 80, 81, 61, 61]");
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((-1), byteArray28, true);
        byte[] byteArray33 = base64_31.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        java.lang.Object obj39 = base64_31.encode((java.lang.Object) byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        java.lang.String str45 = base64_31.encodeToString(byteArray44);
        boolean boolean46 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray44);
        java.lang.String str47 = base64_16.encodeToString(byteArray44);
        java.lang.String str48 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray44);
        java.lang.Class<?> wildcardClass49 = byteArray44.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hg" + "'", str43, "hg");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "aGc" + "'", str45, "aGc");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "aGc=" + "'", str47, "aGc=");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "aGc=\r\n" + "'", str48, "aGc=\r\n");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        byte[] byteArray10 = base64_8.decode("aGc");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, (int) '#');
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, true, (int) (short) 10);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[87, 86, 86, 107, 97, 108, 66, 82]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[87, 86, 86, 107, 97, 108, 66, 82]");
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray6);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        byte[] byteArray19 = base64_8.decode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray25 = base64_20.decode(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.Object obj29 = base64_8.decode((java.lang.Object) byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.lang.Object obj31 = base64_1.encode((java.lang.Object) byteArray30);
        byte[] byteArray33 = base64_1.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40);
        java.lang.String str43 = base64_1.encodeToString(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "aGc=\r\n" + "'", str43, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[97, 71, 99]");
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        byte[] byteArray10 = base64_1.encode(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64(1, byteArray11);
        byte[] byteArray14 = base64_12.decode("");
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((-1), byteArray18, true);
        byte[] byteArray23 = base64_21.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = base64_21.encode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((-1), byteArray31, true);
        byte[] byteArray36 = base64_34.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray39);
        java.lang.Object obj42 = base64_34.encode((java.lang.Object) byteArray39);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        java.lang.String str48 = base64_34.encodeToString(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray47);
        byte[] byteArray50 = base64_21.decode(byteArray49);
        byte[] byteArray51 = base64_12.encode(byteArray50);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hg" + "'", str40, "hg");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "aGc" + "'", str48, "aGc");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99, 61]");
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        byte[] byteArray17 = base64_6.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray23 = base64_18.decode(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        java.lang.Object obj27 = base64_6.decode((java.lang.Object) byteArray26);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        java.lang.String str37 = base64_6.encodeToString(byteArray30);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray30);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103, 61, 61]");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray3);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64(0, byteArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg==??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        byte[] byteArray9 = base64_0.encode(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, true, (int) ' ');
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 1);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((-1), byteArray8, true);
        byte[] byteArray13 = base64_11.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        byte[] byteArray17 = base64_11.encode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(0, byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((-1), byteArray16);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64(10, byteArray16);
        java.lang.Object obj21 = base64_1.encode((java.lang.Object) byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        java.lang.String str22 = base64_13.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        byte[] byteArray30 = base64_13.decode(byteArray25);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false);
        byte[] byteArray35 = base64_0.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((-1), byteArray39, true);
        byte[] byteArray44 = base64_42.decode("hg==\r\n");
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray47);
        java.math.BigInteger bigInteger49 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray47);
        java.math.BigInteger bigInteger50 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray47);
        byte[] byteArray51 = base64_42.decode(byteArray47);
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray51);
        java.math.BigInteger bigInteger53 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray51);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj55 = base64_0.encode((java.lang.Object) bigInteger53);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hg" + "'", str17, "hg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "aGc=\r\n" + "'", str22, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hg" + "'", str26, "hg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(bigInteger49);
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3, false);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(false);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger14);
        byte[] byteArray17 = base64_10.decode(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, true, false);
        java.lang.String str21 = base64_8.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((-1), byteArray28, true);
        byte[] byteArray33 = base64_31.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        byte[] byteArray37 = base64_31.encode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64(0, byteArray36);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((-1), byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(10, byteArray36);
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray36);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray36);
        byte[] byteArray43 = base64_8.encode(byteArray42);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg==\r\n" + "'", str41, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        byte[] byteArray29 = base64_6.decode("hi!");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = base64_6.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((-1), byteArray42, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42);
        java.lang.Object obj47 = base64_6.encode((java.lang.Object) byteArray42);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((-1), byteArray51, true);
        byte[] byteArray56 = base64_54.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        boolean boolean61 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray59);
        java.math.BigInteger bigInteger62 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray59);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        boolean boolean64 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray63);
        byte[] byteArray65 = base64_54.decode(byteArray63);
        byte[] byteArray66 = base64_6.decode(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_67 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray69 = base64_67.decode("hi!");
        java.lang.String str70 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray69);
        boolean boolean71 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray69);
        java.math.BigInteger bigInteger72 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray69);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray69);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray73);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray73);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray76);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, false);
        java.lang.String str80 = base64_6.encodeToString(byteArray77);
        org.apache.commons.codec.binary.Base64 base64_83 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray85 = base64_83.decode("hi!");
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray85);
        org.apache.commons.codec.binary.Base64 base64_88 = new org.apache.commons.codec.binary.Base64((-1), byteArray85, true);
        org.apache.commons.codec.binary.Base64 base64_89 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray91 = base64_89.decode("hi!");
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray91);
        java.lang.String str93 = base64_88.encodeToString(byteArray91);
        java.lang.String str94 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray91);
        java.math.BigInteger bigInteger95 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray91);
        byte[] byteArray96 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger95);
        org.apache.commons.codec.binary.Base64 base64_98 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray96, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj99 = base64_6.encode((java.lang.Object) base64_98);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-122]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-122]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hg" + "'", str70, "hg");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(bigInteger72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[87, 86, 86, 107, 97, 108, 66, 82]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "WVVkalBR" + "'", str80, "WVVkalBR");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-122]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-122]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hg" + "'", str93, "hg");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "hg" + "'", str94, "hg");
        org.junit.Assert.assertNotNull(bigInteger95);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[]");
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, true);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(1, byteArray10);
        java.lang.Class<?> wildcardClass17 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        byte[] byteArray10 = base64_8.decode("aGc");
        boolean boolean11 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        java.lang.String str16 = base64_8.encodeToString(byteArray14);
        byte[] byteArray18 = base64_8.decode("\ufffd");
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61]");
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        byte[] byteArray11 = base64_1.decode("WVVkalBRPT0");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "aGc=\r\n" + "'", str9, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[89, 85, 100, 106, 80, 81, 61, 61]");
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        java.lang.Object obj16 = base64_8.encode((java.lang.Object) byteArray13);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        java.lang.String str22 = base64_8.encodeToString(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray26);
        byte[] byteArray29 = base64_8.decode(byteArray26);
        byte[] byteArray31 = base64_8.decode("hi!");
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger37);
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        byte[] byteArray40 = base64_8.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray38, false);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray46 = base64_44.decode("hg");
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray46);
        java.lang.String str48 = base64_42.encodeToString(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        boolean boolean51 = base64_50.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64(0);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray56 = base64_54.decode("hi!");
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray57);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray57);
        java.lang.String str60 = base64_53.encodeToString(byteArray59);
        byte[] byteArray61 = base64_50.decode(byteArray59);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        byte[] byteArray63 = base64_42.encode(byteArray62);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64((-1), byteArray63, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [WVVkak9WQlI=]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "aGc" + "'", str22, "aGc");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hg==" + "'", str48, "hg==");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[97, 71, 99, 57, 80, 81]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "YUdjOVBR" + "'", str60, "YUdjOVBR");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[89, 85, 100, 106, 79, 86, 66, 82]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[87, 86, 86, 107, 97, 107, 57, 87, 81, 108, 73, 61]");
        org.junit.Assert.assertNotNull(bigInteger64);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray20);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray27 = base64_22.decode(byteArray25);
        byte[] byteArray28 = base64_16.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray31);
        byte[] byteArray38 = base64_16.decode(byteArray37);
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "aGc9PQ0K" + "'", str39, "aGc9PQ0K");
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3, false);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, true, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (6) than the specified maxium size of 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = base64_5.decode(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray10);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        java.lang.String str20 = base64_11.encodeToString(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        boolean boolean25 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray23);
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray28 = base64_11.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray32);
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        byte[] byteArray39 = base64_34.decode(byteArray37);
        java.lang.Object obj40 = base64_11.decode((java.lang.Object) byteArray37);
        java.lang.Object obj41 = base64_9.encode((java.lang.Object) byteArray37);
        byte[] byteArray43 = base64_9.decode("aGc9PQ0K");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg==??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc=\r\n" + "'", str20, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        java.lang.String str17 = base64_8.encodeToString(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        boolean boolean22 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray20);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        byte[] byteArray25 = base64_8.decode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray30);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false, false);
        java.lang.String str35 = base64_8.encodeToString(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        boolean boolean40 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray38);
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray38);
        java.lang.String str42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        byte[] byteArray43 = base64_8.decode(byteArray38);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false);
        java.lang.Object obj47 = base64_6.encode((java.lang.Object) byteArray46);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray51);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray55);
        byte[] byteArray57 = base64_6.decode(byteArray55);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray57, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "aGc=\r\n" + "'", str17, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "aGc=\r\n" + "'", str35, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hg" + "'", str39, "hg");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hg" + "'", str42, "hg");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        byte[] byteArray3 = base64_1.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray9 = base64_1.encode(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true, true);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 78, 67, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = base64_9.decode(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray21 = base64_2.decode(byteArray18);
        boolean boolean22 = base64_2.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((-1), byteArray26, true);
        byte[] byteArray31 = base64_29.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        java.lang.Object obj37 = base64_29.encode((java.lang.Object) byteArray34);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        java.lang.String str43 = base64_29.encodeToString(byteArray42);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, false, (int) ' ');
        byte[] byteArray50 = base64_2.decode(byteArray49);
        java.lang.Class<?> wildcardClass51 = base64_2.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "aGc" + "'", str43, "aGc");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = base64_7.encode(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray12);
        byte[] byteArray15 = null;
        byte[] byteArray16 = base64_14.encode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        byte[] byteArray22 = base64_17.decode(byteArray21);
        byte[] byteArray23 = base64_14.encode(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, true, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (6) than the specified maxium size of 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103, 61, 61]");
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.lang.String str29 = base64_2.encodeToString(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        boolean boolean34 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        byte[] byteArray37 = base64_2.decode(byteArray32);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray40);
        byte[] byteArray43 = base64_41.decode("WVVkalBRPT0NCg");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "aGc=\r\n" + "'", str29, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hg" + "'", str33, "hg");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray2);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray25 = base64_16.encode(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray28 = base64_5.encode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        boolean boolean36 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray34);
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        java.lang.String str40 = base64_31.encodeToString(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        boolean boolean45 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray43);
        java.math.BigInteger bigInteger46 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray43);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        byte[] byteArray48 = base64_31.decode(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray53);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false);
        java.lang.String str58 = base64_31.encodeToString(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        java.lang.String str62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray61);
        boolean boolean63 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray61);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        java.lang.String str65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray61);
        byte[] byteArray66 = base64_31.decode(byteArray61);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray70);
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray70);
        byte[] byteArray73 = base64_5.encode(byteArray70);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray70);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70, false, false, (int) (short) -1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "aGc=\r\n" + "'", str40, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hg" + "'", str44, "hg");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hg" + "'", str52, "hg");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "aGc=\r\n" + "'", str58, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hg" + "'", str62, "hg");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hg" + "'", str65, "hg");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        byte[] byteArray16 = null;
        byte[] byteArray17 = base64_15.encode(byteArray16);
        byte[] byteArray19 = base64_15.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27);
        byte[] byteArray31 = base64_15.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64(10, byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64(0);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        java.lang.String str41 = base64_34.encodeToString(byteArray40);
        boolean boolean42 = base64_34.isUrlSafe();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj43 = base64_32.decode((java.lang.Object) boolean42);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99, 57, 80, 81]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "YUdjOVBR" + "'", str41, "YUdjOVBR");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        boolean boolean2 = base64_1.isUrlSafe();
        byte[] byteArray4 = null;
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray4, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = base64_1.decode((java.lang.Object) byteArray4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        byte[] byteArray4 = base64_2.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        java.lang.Object obj21 = base64_13.encode((java.lang.Object) byteArray18);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        java.lang.String str27 = base64_13.encodeToString(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray31);
        byte[] byteArray34 = base64_13.decode(byteArray31);
        boolean boolean35 = base64_13.isUrlSafe();
        boolean boolean36 = base64_13.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray40);
        boolean boolean43 = base64_42.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, true, true);
        byte[] byteArray53 = base64_42.decode(byteArray52);
        byte[] byteArray54 = base64_13.encode(byteArray52);
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray52);
        byte[] byteArray56 = base64_6.decode(byteArray52);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hg" + "'", str25, "hg");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "aGc" + "'", str27, "aGc");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hg" + "'", str47, "hg");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[97, 71, 99, 57, 80, 81, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[89, 85, 100, 106, 79, 86, 66, 82, 68, 81, 111]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "YUdjOVBRDQo=\r\n" + "'", str55, "YUdjOVBRDQo=\r\n");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[104, 103, 61, 61]");
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        byte[] byteArray29 = base64_6.decode("hi!");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = base64_6.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((-1), byteArray42, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42);
        java.lang.Object obj47 = base64_6.encode((java.lang.Object) byteArray42);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        java.lang.String str51 = base64_6.encodeToString(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray56 = base64_54.decode("hi!");
        java.lang.String str57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray56);
        boolean boolean58 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray56);
        java.math.BigInteger bigInteger59 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray56);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray56);
        java.lang.String str61 = base64_53.encodeToString(byteArray60);
        java.lang.String str62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray60);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray60);
        byte[] byteArray64 = base64_6.encode(byteArray63);
        java.lang.Class<?> wildcardClass65 = base64_6.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hg" + "'", str51, "hg");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hg" + "'", str57, "hg");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "aGc=\r\n" + "'", str61, "aGc=\r\n");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "aGc" + "'", str62, "aGc");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        byte[] byteArray7 = base64_5.decode("aGc9PQ");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((-1), byteArray32, true);
        byte[] byteArray37 = base64_35.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.lang.Object obj43 = base64_35.encode((java.lang.Object) byteArray40);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        java.lang.String str49 = base64_35.encodeToString(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray53 = base64_51.decode("hi!");
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray53);
        byte[] byteArray56 = base64_35.decode(byteArray53);
        byte[] byteArray58 = base64_35.decode("hi!");
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger62 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        java.math.BigInteger bigInteger63 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger64);
        java.lang.String str66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray65);
        byte[] byteArray67 = base64_35.decode(byteArray65);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray65, false);
        byte[] byteArray70 = base64_6.decode(byteArray65);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hg" + "'", str47, "hg");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "aGc" + "'", str49, "aGc");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = base64_5.decode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14, true);
        byte[] byteArray19 = base64_17.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        java.lang.Object obj25 = base64_17.encode((java.lang.Object) byteArray22);
        java.lang.String str26 = base64_5.encodeToString(byteArray22);
        byte[] byteArray28 = base64_5.decode("");
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.String str36 = base64_5.encodeToString(byteArray34);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ufffd" + "'", str26, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger7);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        boolean boolean11 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, true, (int) (byte) 100);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64(1, byteArray8, true);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(0, byteArray26, true);
        byte[] byteArray31 = base64_20.decode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        boolean boolean36 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray34);
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        java.lang.Object obj41 = base64_20.encode((java.lang.Object) byteArray38);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, true, false);
        java.lang.Object obj49 = base64_20.encode((java.lang.Object) byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        java.lang.Object obj51 = base64_19.decode((java.lang.Object) byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64(1, byteArray50, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc9PQ0K??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj51);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = base64_13.encode(byteArray18);
        byte[] byteArray20 = base64_6.encode(byteArray19);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        java.lang.String str27 = base64_6.encodeToString(byteArray26);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, true, (int) (byte) -1);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray32);
        boolean boolean34 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray32);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = base64_9.decode(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray21 = base64_2.decode(byteArray18);
        boolean boolean22 = base64_2.isUrlSafe();
        byte[] byteArray24 = base64_2.decode("hg");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        byte[] byteArray10 = base64_8.decode("aGc");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray10);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray10, false);
        byte[] byteArray18 = base64_16.decode("WVVkalBRMEsNCg");
        boolean boolean19 = base64_16.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "YUdjPQ" + "'", str10, "YUdjPQ");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, true);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61, 13, 10]");
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray4, false);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(0, byteArray15, true);
        byte[] byteArray20 = base64_18.decode("aGc");
        boolean boolean21 = base64_18.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        java.lang.String str26 = base64_18.encodeToString(byteArray24);
        byte[] byteArray28 = base64_18.decode("\ufffd");
        byte[] byteArray29 = base64_9.encode(byteArray28);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hg" + "'", str26, "hg");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103, 61, 61]");
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray10);
        java.lang.String str12 = base64_3.encodeToString(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        byte[] byteArray20 = base64_3.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false);
        java.lang.String str30 = base64_3.encodeToString(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray35 = base64_33.decode("hi!");
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray35);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray35);
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray39);
        java.lang.String str41 = base64_32.encodeToString(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        boolean boolean46 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray44);
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray49 = base64_32.decode(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = base64_50.decode("hi!");
        java.lang.String str53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray52);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray52);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray54);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false, false);
        java.lang.String str59 = base64_32.encodeToString(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        java.lang.String str63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray62);
        boolean boolean64 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray62);
        java.math.BigInteger bigInteger65 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray62);
        java.lang.String str66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray62);
        byte[] byteArray67 = base64_32.decode(byteArray62);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, false, false);
        byte[] byteArray71 = base64_3.decode(byteArray70);
        java.lang.Object obj72 = base64_1.decode((java.lang.Object) byteArray71);
        org.apache.commons.codec.binary.Base64 base64_74 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray76 = base64_74.decode("hi!");
        java.lang.String str77 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray76);
        boolean boolean78 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray76);
        org.apache.commons.codec.binary.Base64 base64_80 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray76, false);
        boolean boolean81 = base64_80.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_83 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray85 = base64_83.decode("hi!");
        java.lang.String str86 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray85);
        org.apache.commons.codec.binary.Base64 base64_87 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray85);
        boolean boolean88 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray85);
        java.lang.String str89 = base64_80.encodeToString(byteArray85);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray85);
        java.lang.Object obj91 = base64_1.decode((java.lang.Object) byteArray90);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "aGc=\r\n" + "'", str12, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "aGc=\r\n" + "'", str30, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "aGc=\r\n" + "'", str41, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hg" + "'", str45, "hg");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hg" + "'", str53, "hg");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "aGc=\r\n" + "'", str59, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hg" + "'", str63, "hg");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(bigInteger65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hg" + "'", str66, "hg");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-122]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hg" + "'", str77, "hg");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-122]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hg" + "'", str86, "hg");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hg==" + "'", str89, "hg==");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj91);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray3 = base64_1.decode("aGc=\r\n");
        java.lang.Object obj4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = base64_1.encode(obj4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103]");
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64(0, byteArray2, true);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray9 = base64_4.decode(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray7);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hg==\r\n" + "'", str10, "hg==\r\n");
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false);
        java.lang.String str28 = base64_1.encodeToString(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        boolean boolean35 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray33);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        java.lang.String str39 = base64_30.encodeToString(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        boolean boolean44 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray42);
        java.math.BigInteger bigInteger45 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray42);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        byte[] byteArray47 = base64_30.decode(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        java.lang.String str51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray52);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false, false);
        java.lang.String str57 = base64_30.encodeToString(byteArray52);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = base64_58.decode("hi!");
        java.lang.String str61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray60);
        boolean boolean62 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray60);
        java.math.BigInteger bigInteger63 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray60);
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray60);
        byte[] byteArray65 = base64_30.decode(byteArray60);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, false, false);
        byte[] byteArray69 = base64_1.decode(byteArray68);
        boolean boolean70 = base64_1.isUrlSafe();
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger74 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray73);
        java.math.BigInteger bigInteger75 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray73);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray73);
        byte[] byteArray77 = base64_1.decode(byteArray76);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "aGc=\r\n" + "'", str28, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "aGc=\r\n" + "'", str39, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hg" + "'", str43, "hg");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hg" + "'", str51, "hg");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "aGc=\r\n" + "'", str57, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hg" + "'", str61, "hg");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hg" + "'", str64, "hg");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(bigInteger75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1, 10]");
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(0, byteArray17, true);
        byte[] byteArray22 = base64_11.decode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        java.lang.Object obj32 = base64_11.encode((java.lang.Object) byteArray29);
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray37);
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        byte[] byteArray40 = base64_11.decode(byteArray38);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray43);
        java.math.BigInteger bigInteger45 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray43);
        java.math.BigInteger bigInteger46 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray43);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger46);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger46);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger46);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger46);
        java.lang.Object obj52 = base64_11.encode((java.lang.Object) byteArray51);
        java.lang.Object obj53 = base64_1.encode((java.lang.Object) byteArray51);
        byte[] byteArray55 = base64_1.decode("aGc");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hg" + "'", str26, "hg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[104, 103]");
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str21 = base64_7.encodeToString(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64(100, byteArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [YUdjPQ0K]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 61]");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        byte[] byteArray2 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64(10, byteArray2);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((-1), byteArray7, true);
        byte[] byteArray12 = base64_10.decode("hg==\r\n");
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        byte[] byteArray19 = base64_10.decode(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray22 = base64_3.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        boolean boolean31 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64(0, byteArray29, true);
        byte[] byteArray34 = base64_23.decode(byteArray29);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        java.lang.String str36 = base64_3.encodeToString(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = base64_39.decode("hi!");
        java.lang.String str42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray41);
        boolean boolean43 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray41);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        java.lang.String str47 = base64_38.encodeToString(byteArray45);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        java.lang.String str51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray50);
        boolean boolean52 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray50);
        java.math.BigInteger bigInteger53 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray50);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        byte[] byteArray55 = base64_38.decode(byteArray50);
        byte[] byteArray57 = base64_38.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray61 = base64_59.decode("\ufffd");
        java.lang.Object obj62 = base64_38.decode((java.lang.Object) byteArray61);
        byte[] byteArray63 = base64_3.encode(byteArray61);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray63);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray65);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc=??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hg" + "'", str30, "hg");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hg" + "'", str42, "hg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "aGc=\r\n" + "'", str47, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hg" + "'", str51, "hg");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[97, 71, 99, 61, 13, 10]");
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray15);
        java.lang.Object obj18 = base64_7.encode((java.lang.Object) byteArray15);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((-1), byteArray21);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/wo=\r\n" + "'", str17, "/wo=\r\n");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true, false, (int) (short) 10);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64(1, byteArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [YUdjOVBRPT0NCg==]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[89, 85, 100, 106, 79, 86, 66, 82, 80, 84, 48, 78, 67, 103, 61, 61]");
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((-1), byteArray32, true);
        byte[] byteArray37 = base64_35.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.lang.Object obj43 = base64_35.encode((java.lang.Object) byteArray40);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        java.lang.String str49 = base64_35.encodeToString(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray53 = base64_51.decode("hi!");
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray53);
        byte[] byteArray56 = base64_35.decode(byteArray53);
        byte[] byteArray58 = base64_35.decode("hi!");
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger62 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        java.math.BigInteger bigInteger63 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger64);
        java.lang.String str66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray65);
        byte[] byteArray67 = base64_35.decode(byteArray65);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray65, false);
        byte[] byteArray70 = base64_6.decode(byteArray65);
        java.lang.Object obj71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj72 = base64_6.decode(obj71);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hg" + "'", str47, "hg");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "aGc" + "'", str49, "aGc");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str21 = base64_7.encodeToString(byteArray20);
        boolean boolean22 = base64_7.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((-1), byteArray26, true);
        byte[] byteArray31 = base64_29.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        java.lang.Object obj37 = base64_29.encode((java.lang.Object) byteArray34);
        byte[] byteArray39 = base64_29.decode("aGc=");
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((-1), byteArray43, true);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43);
        java.lang.Object obj48 = base64_29.decode((java.lang.Object) byteArray43);
        java.lang.Object obj49 = base64_7.encode((java.lang.Object) byteArray43);
        byte[] byteArray51 = base64_7.decode("aGc9PQ==\r\n");
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((-1), byteArray51, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg==]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64(0, byteArray3, true);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = base64_7.encode(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray12);
        boolean boolean15 = base64_14.isUrlSafe();
        boolean boolean16 = base64_14.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        boolean boolean25 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64(0, byteArray23, true);
        byte[] byteArray28 = base64_17.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        java.lang.Object obj38 = base64_17.encode((java.lang.Object) byteArray35);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = base64_39.decode("hi!");
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, true, false);
        java.lang.Object obj46 = base64_17.encode((java.lang.Object) byteArray45);
        java.lang.Object obj47 = base64_14.decode(obj46);
        java.lang.Class<?> wildcardClass48 = obj46.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str21 = base64_7.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray25);
        byte[] byteArray28 = base64_7.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray25, true);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((-1), byteArray34, true);
        byte[] byteArray39 = base64_37.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray42);
        java.lang.Object obj45 = base64_37.encode((java.lang.Object) byteArray42);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.decodeBase64("\ufffd");
        byte[] byteArray48 = base64_37.decode(byteArray47);
        byte[] byteArray50 = base64_37.decode("hg==\r\n");
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger55);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger55);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, false);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64(1, byteArray60);
        java.lang.Object obj62 = base64_37.decode((java.lang.Object) byteArray60);
        java.lang.String str63 = base64_30.encodeToString(byteArray60);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hg" + "'", str43, "hg");
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray2);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false);
        java.lang.Class<?> wildcardClass11 = byteArray2.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 119, 111, 61]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = base64_13.encode(byteArray18);
        byte[] byteArray20 = base64_6.encode(byteArray19);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        java.lang.String str27 = base64_6.encodeToString(byteArray26);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, true, (int) (byte) -1);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray32);
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray32);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        byte[] byteArray10 = base64_8.decode("aGc");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, (int) '#');
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray15);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "WVVkalBR\r\n" + "'", str16, "WVVkalBR\r\n");
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray20);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray27 = base64_22.decode(byteArray25);
        byte[] byteArray28 = base64_16.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray31);
        byte[] byteArray38 = base64_16.decode(byteArray37);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray41);
        java.lang.Class<?> wildcardClass43 = byteArray41.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64(0, byteArray3, true);
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14, true);
        byte[] byteArray19 = base64_17.decode("hg==\r\n");
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray26 = base64_17.decode(byteArray22);
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray29 = base64_10.decode(byteArray26);
        boolean boolean30 = base64_10.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((-1), byteArray34, true);
        byte[] byteArray39 = base64_37.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray42);
        java.lang.Object obj45 = base64_37.encode((java.lang.Object) byteArray42);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray48 = base64_46.decode("hi!");
        java.lang.String str49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray48);
        java.lang.String str51 = base64_37.encodeToString(byteArray50);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, true, false, (int) ' ');
        byte[] byteArray58 = base64_10.decode(byteArray57);
        byte[] byteArray59 = base64_7.encode(byteArray57);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hg" + "'", str43, "hg");
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hg" + "'", str49, "hg");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "aGc" + "'", str51, "aGc");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[87, 86, 86, 107, 97, 108, 66, 82, 80, 84, 48, 78, 67, 103]");
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = base64_0.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray33);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str37 = base64_0.encodeToString(byteArray33);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger43);
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray44);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, true, (int) (byte) 100);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray54 = base64_0.encode(byteArray44);
        boolean boolean55 = base64_0.isUrlSafe();
        byte[] byteArray57 = null;
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray57);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64((-1), byteArray62, true);
        byte[] byteArray67 = base64_65.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray70 = base64_68.decode("hi!");
        java.lang.String str71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray70);
        boolean boolean72 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray70);
        java.math.BigInteger bigInteger73 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray70);
        boolean boolean75 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray74);
        byte[] byteArray76 = base64_65.decode(byteArray74);
        boolean boolean77 = base64_65.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_79 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray81);
        java.lang.String str83 = base64_79.encodeToString(byteArray82);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, false, true, (int) (byte) 100);
        byte[] byteArray88 = base64_65.encode(byteArray87);
        byte[] byteArray89 = base64_58.encode(byteArray87);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.decodeBase64("aGc=\r\n");
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray91);
        java.lang.String str93 = base64_58.encodeToString(byteArray92);
        boolean boolean94 = base64_58.isUrlSafe();
        byte[] byteArray96 = base64_58.decode("YUdjOVBRMEs");
        java.lang.String str97 = base64_0.encodeToString(byteArray96);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg==" + "'", str37, "hg==");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-122]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hg" + "'", str71, "hg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(bigInteger73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-122]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-122]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hg==" + "'", str93, "hg==");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "YUdjOVBRMEs=" + "'", str97, "YUdjOVBRMEs=");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (18) than the specified maxium size of 1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[90, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[87, 107, 70, 66, 80, 81, 48, 75]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[86, 50, 116, 71, 81, 108, 66, 82, 77, 69, 115]");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray6, false);
        byte[] byteArray10 = base64_8.decode("");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true, false, (int) ' ');
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = base64_8.encode((java.lang.Object) str20);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg==\r\n" + "'", str20, "hg==\r\n");
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = base64_5.decode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14, true);
        byte[] byteArray19 = base64_17.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        java.lang.Object obj25 = base64_17.encode((java.lang.Object) byteArray22);
        java.lang.String str26 = base64_5.encodeToString(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((-1), byteArray32, true);
        byte[] byteArray37 = base64_35.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        byte[] byteArray41 = base64_35.encode(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64(0, byteArray40);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((-1), byteArray40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        byte[] byteArray51 = base64_43.decode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((-1), byteArray55, true);
        byte[] byteArray60 = base64_58.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray63 = base64_61.decode("hi!");
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray63);
        java.math.BigInteger bigInteger65 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        java.lang.Object obj66 = base64_58.encode((java.lang.Object) byteArray63);
        org.apache.commons.codec.binary.Base64 base64_67 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray69 = base64_67.decode("hi!");
        java.lang.String str70 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray69);
        java.lang.String str72 = base64_58.encodeToString(byteArray71);
        boolean boolean73 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray71);
        java.lang.String str74 = base64_43.encodeToString(byteArray71);
        org.apache.commons.codec.binary.Base64 base64_76 = new org.apache.commons.codec.binary.Base64((int) '4');
        byte[] byteArray78 = base64_76.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_79 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray81 = base64_79.decode("hi!");
        java.lang.String str82 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray81);
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray81);
        byte[] byteArray84 = base64_76.encode(byteArray83);
        java.lang.String str85 = base64_43.encodeToString(byteArray84);
        byte[] byteArray86 = base64_5.decode(byteArray84);
        java.lang.Class<?> wildcardClass87 = byteArray84.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ufffd" + "'", str26, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hg" + "'", str64, "hg");
        org.junit.Assert.assertNotNull(bigInteger65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-122]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hg" + "'", str70, "hg");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "aGc" + "'", str72, "aGc");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "aGc=" + "'", str74, "aGc=");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-122]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-122]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hg" + "'", str82, "hg");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "YUdjPQ0K" + "'", str85, "YUdjPQ0K");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[104, 103]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray4);
        byte[] byteArray8 = base64_6.decode("");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray8, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        java.lang.String str2 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray1);
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-122]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hg==\r\n" + "'", str2, "hg==\r\n");
        org.junit.Assert.assertNotNull(bigInteger3);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.lang.String str19 = base64_10.encodeToString(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray22);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray27 = base64_10.decode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray31);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray38 = base64_33.decode(byteArray36);
        java.lang.Object obj39 = base64_10.decode((java.lang.Object) byteArray36);
        java.lang.Object obj40 = base64_8.encode((java.lang.Object) byteArray36);
        boolean boolean41 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray45);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray49);
        byte[] byteArray51 = base64_42.encode(byteArray49);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        byte[] byteArray53 = base64_8.encode(byteArray49);
        boolean boolean54 = base64_8.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "aGc=\r\n" + "'", str19, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        byte[] byteArray10 = base64_8.decode("aGc");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, (int) '#');
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[97, 71, 99, 61, 13, 10]");
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray34);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = base64_6.encode(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[89, 85, 100, 106, 80, 81]");
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64(0, byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13, true);
        byte[] byteArray18 = base64_16.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = base64_16.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64(0, byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((-1), byteArray21);
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray29);
        byte[] byteArray32 = base64_24.decode(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true, true, (int) (byte) 100);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true, false, (int) (short) 1);
        byte[] byteArray42 = base64_7.encode(byteArray32);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true, true, 0);
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(bigInteger47);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_9.decode("aGc");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, (int) '#');
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64(100, byteArray17, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [WVVkalBR]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[87, 86, 86, 107, 97, 108, 66, 82]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[86, 49, 90, 87, 97, 50, 70, 115, 81, 108, 73]");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray25 = base64_16.encode(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray28 = base64_5.encode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        boolean boolean36 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray34);
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        java.lang.String str40 = base64_31.encodeToString(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        boolean boolean45 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray43);
        java.math.BigInteger bigInteger46 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray43);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        byte[] byteArray48 = base64_31.decode(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray53);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false);
        java.lang.String str58 = base64_31.encodeToString(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        java.lang.String str62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray61);
        boolean boolean63 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray61);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        java.lang.String str65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray61);
        byte[] byteArray66 = base64_31.decode(byteArray61);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray70);
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray70);
        byte[] byteArray73 = base64_5.encode(byteArray70);
        byte[] byteArray75 = base64_5.decode("YUdjOVBRMEs");
        byte[] byteArray77 = base64_5.decode("aGc=\r\n");
        byte[] byteArray79 = base64_5.decode("aGcNCg");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "aGc=\r\n" + "'", str40, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hg" + "'", str44, "hg");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hg" + "'", str52, "hg");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "aGc=\r\n" + "'", str58, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hg" + "'", str62, "hg");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hg" + "'", str65, "hg");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[104, 103, 13, 10]");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        byte[] byteArray19 = base64_8.decode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray25 = base64_20.decode(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.Object obj29 = base64_8.decode((java.lang.Object) byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.lang.Object obj31 = base64_1.encode((java.lang.Object) byteArray30);
        byte[] byteArray33 = base64_1.decode("/wo=\r\n");
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 119, 111, 61]");
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        java.lang.String str6 = base64_2.encodeToString(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray5, true);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray25 = base64_16.encode(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray28 = base64_5.encode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        boolean boolean36 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray34);
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        java.lang.String str40 = base64_31.encodeToString(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        boolean boolean45 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray43);
        java.math.BigInteger bigInteger46 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray43);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        byte[] byteArray48 = base64_31.decode(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray53);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false);
        java.lang.String str58 = base64_31.encodeToString(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        java.lang.String str62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray61);
        boolean boolean63 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray61);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        java.lang.String str65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray61);
        byte[] byteArray66 = base64_31.decode(byteArray61);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray70);
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray70);
        byte[] byteArray73 = base64_5.encode(byteArray70);
        org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray77 = base64_75.decode("hi!");
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray77);
        org.apache.commons.codec.binary.Base64 base64_80 = new org.apache.commons.codec.binary.Base64((-1), byteArray77, true);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray77);
        java.lang.String str82 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray81);
        java.lang.String str83 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray81);
        byte[] byteArray84 = base64_5.decode(byteArray81);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "aGc=\r\n" + "'", str40, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hg" + "'", str44, "hg");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hg" + "'", str52, "hg");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "aGc=\r\n" + "'", str58, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hg" + "'", str62, "hg");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hg" + "'", str65, "hg");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-122]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "aGc=\r\n" + "'", str82, "aGc=\r\n");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "aGc=\r\n" + "'", str83, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-122]");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        byte[] byteArray10 = base64_8.decode("aGc");
        boolean boolean11 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        java.lang.String str16 = base64_8.encodeToString(byteArray14);
        byte[] byteArray18 = base64_8.decode("\ufffd");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((-1), byteArray22, true);
        byte[] byteArray27 = base64_25.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        java.lang.Object obj33 = base64_25.encode((java.lang.Object) byteArray30);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        java.lang.String str39 = base64_25.encodeToString(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        java.lang.Object obj42 = base64_8.decode((java.lang.Object) byteArray38);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, true, true, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (10) than the specified maxium size of -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "aGc" + "'", str39, "aGc");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[97, 71, 99, 61]");
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((-1), byteArray14);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((-1), byteArray29, true);
        byte[] byteArray34 = base64_32.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        byte[] byteArray38 = base64_32.encode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(0, byteArray37);
        boolean boolean40 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        java.lang.Object obj42 = base64_24.decode((java.lang.Object) byteArray37);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        java.lang.String str51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray50);
        boolean boolean52 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64(0, byteArray50, true);
        byte[] byteArray55 = base64_44.decode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray58 = base64_56.decode("hi!");
        java.lang.String str59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray58);
        boolean boolean60 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray58);
        java.math.BigInteger bigInteger61 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray58);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray62);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        java.lang.Object obj65 = base64_44.encode((java.lang.Object) byteArray62);
        byte[] byteArray68 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger69 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray68);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray70);
        java.lang.String str72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        byte[] byteArray73 = base64_44.decode(byteArray71);
        org.apache.commons.codec.binary.Base64 base64_74 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray76 = base64_74.decode("hi!");
        java.lang.String str77 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray76);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray76);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray78);
        java.lang.String str80 = base64_44.encodeToString(byteArray79);
        org.apache.commons.codec.binary.Base64 base64_82 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray79, true);
        byte[] byteArray83 = base64_24.decode(byteArray79);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray79, true);
        java.lang.String str86 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray85);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hg" + "'", str51, "hg");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hg" + "'", str59, "hg");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-122]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hg" + "'", str77, "hg");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-122]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hg==" + "'", str80, "hg==");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "aGc9PQ0K\r\n" + "'", str86, "aGc9PQ0K\r\n");
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        byte[] byteArray2 = new byte[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray2);
        byte[] byteArray5 = null;
        java.lang.String str6 = base64_4.encodeToString(byteArray5);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray5 = base64_0.decode(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, false);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, true);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        java.lang.Class<?> wildcardClass17 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray1);
        boolean boolean3 = base64_2.isUrlSafe();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray18);
        byte[] byteArray20 = base64_9.decode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray26 = base64_21.decode(byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray28);
        java.lang.Object obj30 = base64_9.decode((java.lang.Object) byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray29);
        java.lang.Object obj32 = base64_2.encode((java.lang.Object) byteArray31);
        byte[] byteArray34 = base64_2.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray41);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41);
        java.lang.String str44 = base64_2.encodeToString(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray47 = base64_45.decode("hi!");
        java.lang.String str48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray47);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, true);
        byte[] byteArray54 = base64_2.decode(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray59);
        byte[] byteArray64 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger65 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray64);
        byte[] byteArray66 = base64_61.decode(byteArray64);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray70 = base64_68.decode("hi!");
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray70);
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64((-1), byteArray70, true);
        byte[] byteArray75 = base64_73.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_76 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray78 = base64_76.decode("hi!");
        java.lang.String str79 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray78);
        java.math.BigInteger bigInteger80 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray78);
        java.lang.Object obj81 = base64_73.encode((java.lang.Object) byteArray78);
        java.lang.String str82 = base64_61.encodeToString(byteArray78);
        org.apache.commons.codec.binary.Base64 base64_83 = new org.apache.commons.codec.binary.Base64(100, byteArray78);
        java.math.BigInteger bigInteger84 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray78);
        java.math.BigInteger bigInteger85 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray78);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger85);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger85);
        byte[] byteArray88 = base64_2.decode(byteArray87);
        org.apache.commons.codec.binary.Base64 base64_89 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray88);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "aGc=\r\n" + "'", str44, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hg" + "'", str48, "hg");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-122]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-122]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-122]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hg" + "'", str79, "hg");
        org.junit.Assert.assertNotNull(bigInteger80);
        org.junit.Assert.assertNotNull(obj81);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\ufffd" + "'", str82, "\ufffd");
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertNotNull(bigInteger85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "aGc=\r\n" + "'", str9, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[89, 85, 100, 106]");
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        boolean boolean12 = base64_0.isUrlSafe();
        boolean boolean13 = base64_0.isUrlSafe();
        byte[] byteArray15 = base64_0.decode("");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, true, (int) (byte) 100);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 13, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "aGcNCg" + "'", str9, "aGcNCg");
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        byte[] byteArray3 = base64_1.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray9 = base64_1.encode(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, true);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        boolean boolean11 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "YUdj" + "'", str10, "YUdj");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray25 = base64_16.encode(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray28 = base64_5.encode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray39 = base64_5.encode(byteArray37);
        byte[] byteArray40 = null;
        byte[] byteArray41 = base64_5.decode(byteArray40);
        byte[] byteArray43 = base64_5.decode("V2tGQlBRMEs=\r\n");
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray43);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61, -122]");
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[87, 107, 70, 66, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[86, 50, 116, 71, 81, 108, 66, 82, 77, 69, 115, 61, 13, 10]");
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray3);
        byte[] byteArray10 = base64_8.decode("YUdjPQ==");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray10);
        java.lang.Class<?> wildcardClass12 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "YUdjPQ==\r\n" + "'", str11, "YUdjPQ==\r\n");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[89, 85, 100, 106, 80, 81, 61, 61]");
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = base64_6.encode(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray13);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[89, 85, 100, 106, 80, 81, 61, 61]");
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray5);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((-1), byteArray11, true);
        byte[] byteArray16 = base64_14.decode("hg==\r\n");
        byte[] byteArray17 = base64_7.encode(byteArray16);
        byte[] byteArray18 = base64_1.encode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((-1), byteArray23, true);
        byte[] byteArray28 = base64_26.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = base64_26.encode(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64(0, byteArray31);
        boolean boolean34 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray31);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35);
        byte[] byteArray37 = base64_1.encode(byteArray35);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 57, 80, 89, 89, 61]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        byte[] byteArray19 = base64_8.decode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray25 = base64_20.decode(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.Object obj29 = base64_8.decode((java.lang.Object) byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.lang.Object obj31 = base64_1.encode((java.lang.Object) byteArray30);
        java.lang.Class<?> wildcardClass32 = base64_1.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray4 = base64_0.decode("aGc9PQ==\r\n");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, false);
        byte[] byteArray12 = base64_0.decode(byteArray11);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, true, true, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (6) than the specified maxium size of 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        java.lang.Object obj16 = base64_8.encode((java.lang.Object) byteArray13);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        java.lang.String str22 = base64_8.encodeToString(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray26);
        byte[] byteArray29 = base64_8.decode(byteArray26);
        byte[] byteArray31 = base64_8.decode("hi!");
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger37);
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        byte[] byteArray40 = base64_8.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray38, false);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray46 = base64_44.decode("hg");
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray46);
        java.lang.String str48 = base64_42.encodeToString(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        boolean boolean51 = base64_50.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64(0);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray56 = base64_54.decode("hi!");
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray57);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray57);
        java.lang.String str60 = base64_53.encodeToString(byteArray59);
        byte[] byteArray61 = base64_50.decode(byteArray59);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        byte[] byteArray63 = base64_42.encode(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64((int) (byte) 10, byteArray63, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [WVVkak9WQlI=]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "aGc" + "'", str22, "aGc");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hg==" + "'", str48, "hg==");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[97, 71, 99, 57, 80, 81]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "YUdjOVBR" + "'", str60, "YUdjOVBR");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[89, 85, 100, 106, 79, 86, 66, 82]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[87, 86, 86, 107, 97, 107, 57, 87, 81, 108, 73, 61]");
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = base64_6.decode(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15, true);
        byte[] byteArray20 = base64_18.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        java.lang.Object obj26 = base64_18.encode((java.lang.Object) byteArray23);
        java.lang.String str27 = base64_6.encodeToString(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64(100, byteArray23);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ufffd" + "'", str27, "\ufffd");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true, false, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg==]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("aGc9PQ0K\r\n");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        boolean boolean21 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((-1), byteArray25, true);
        byte[] byteArray30 = base64_28.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        java.lang.Object obj36 = base64_28.encode((java.lang.Object) byteArray33);
        byte[] byteArray38 = base64_28.decode("aGc=");
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((-1), byteArray42, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42);
        java.lang.Object obj47 = base64_28.decode((java.lang.Object) byteArray42);
        java.lang.Object obj48 = base64_6.encode((java.lang.Object) byteArray42);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3, false);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.Object obj12 = base64_8.encode((java.lang.Object) byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true, true, (int) '4');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 13, 10]");
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = base64_6.encode(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, true, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "aGc" + "'", str14, "aGc");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99]");
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray7, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3);
        byte[] byteArray7 = base64_5.decode("aGc9PQ==");
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger12);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger12);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray15);
        java.lang.Object obj19 = base64_5.decode((java.lang.Object) byteArray15);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(obj19);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        byte[] byteArray16 = base64_6.encode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((-1), byteArray20, true);
        byte[] byteArray25 = base64_23.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.lang.Object obj31 = base64_23.encode((java.lang.Object) byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.String str37 = base64_23.encodeToString(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        java.lang.String str40 = base64_6.encodeToString(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray46 = base64_41.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        java.lang.String str48 = base64_6.encodeToString(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray47);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64(0, byteArray51, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [YUdjPQ0K]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "aGc" + "'", str37, "aGc");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ufffd" + "'", str40, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ufffd" + "'", str48, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 61]");
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("aGc");
        java.lang.String str2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "aGc" + "'", str2, "aGc");
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, true);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray7, false);
        boolean boolean14 = base64_13.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.lang.String str19 = base64_10.encodeToString(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray22);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray27 = base64_10.decode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray31);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray38 = base64_33.decode(byteArray36);
        java.lang.Object obj39 = base64_10.decode((java.lang.Object) byteArray36);
        java.lang.Object obj40 = base64_8.encode((java.lang.Object) byteArray36);
        boolean boolean41 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray45);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray49);
        byte[] byteArray51 = base64_42.encode(byteArray49);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        byte[] byteArray53 = base64_8.encode(byteArray49);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, true);
        java.lang.String str56 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray55);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "aGc=\r\n" + "'", str19, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[89, 85, 100, 106, 13, 10]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "WVVkag0K\r\n" + "'", str56, "WVVkag0K\r\n");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[87, 86, 86, 107, 97, 103, 48, 75, 13, 10]");
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = base64_6.decode(byteArray11);
        boolean boolean16 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((-1), byteArray20, true);
        byte[] byteArray25 = base64_23.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.lang.Object obj31 = base64_23.encode((java.lang.Object) byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.String str37 = base64_23.encodeToString(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = base64_39.decode("hi!");
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray41);
        byte[] byteArray44 = base64_23.decode(byteArray41);
        byte[] byteArray46 = base64_23.decode("hi!");
        java.lang.Object obj47 = base64_6.encode((java.lang.Object) byteArray46);
        byte[] byteArray49 = null;
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray49);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64((-1), byteArray54, true);
        byte[] byteArray59 = base64_57.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        java.lang.String str63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray62);
        boolean boolean64 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray62);
        java.math.BigInteger bigInteger65 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray62);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        boolean boolean67 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray66);
        byte[] byteArray68 = base64_57.decode(byteArray66);
        boolean boolean69 = base64_57.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_71 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray73);
        java.lang.String str75 = base64_71.encodeToString(byteArray74);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, false, true, (int) (byte) 100);
        byte[] byteArray80 = base64_57.encode(byteArray79);
        byte[] byteArray81 = base64_50.encode(byteArray79);
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.decodeBase64("aGc=\r\n");
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray83);
        java.lang.String str85 = base64_50.encodeToString(byteArray84);
        java.lang.String str86 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray84);
        byte[] byteArray87 = base64_6.encode(byteArray84);
        java.lang.Class<?> wildcardClass88 = byteArray87.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "aGc" + "'", str37, "aGc");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hg" + "'", str63, "hg");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(bigInteger65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-122]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-122]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hg==" + "'", str85, "hg==");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hg==\r\n" + "'", str86, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[104, 103]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str21 = base64_7.encodeToString(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, true, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray30, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [WVVkalBRMEsNCg==]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 78, 67, 103, 61, 61]");
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = base64_0.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        java.lang.String str36 = base64_0.encodeToString(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray35);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hg" + "'", str33, "hg");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg==" + "'", str36, "hg==");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        byte[] byteArray0 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, true, (int) (byte) 1);
        org.junit.Assert.assertNull(byteArray4);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray15);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, true);
        byte[] byteArray22 = base64_0.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((-1), byteArray26, true);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        java.lang.String str34 = base64_29.encodeToString(byteArray32);
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray37);
        java.lang.Object obj40 = base64_29.encode((java.lang.Object) byteArray37);
        java.lang.Object obj41 = base64_0.encode((java.lang.Object) byteArray37);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        boolean boolean48 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray46);
        java.math.BigInteger bigInteger49 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray46);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray50);
        java.lang.String str52 = base64_43.encodeToString(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        java.lang.String str56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        boolean boolean57 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray55);
        java.math.BigInteger bigInteger58 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray55);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        byte[] byteArray60 = base64_43.decode(byteArray55);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray55);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55, false, false);
        java.lang.String str65 = base64_0.encodeToString(byteArray55);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "/wo=\r\n" + "'", str39, "/wo=\r\n");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hg" + "'", str47, "hg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(bigInteger49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "aGc=\r\n" + "'", str52, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hg" + "'", str56, "hg");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hg==" + "'", str65, "hg==");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray22);
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = base64_24.decode(byteArray27);
        java.lang.Object obj30 = base64_1.decode((java.lang.Object) byteArray27);
        boolean boolean31 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        boolean boolean36 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray34);
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        java.lang.Object obj41 = base64_1.decode((java.lang.Object) byteArray40);
        java.lang.Class<?> wildcardClass42 = byteArray40.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        java.lang.Object obj15 = base64_5.decode((java.lang.Object) byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hg" + "'", str9, "hg");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "YUdjPQ0K\r\n" + "'", str14, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(1, byteArray5, false);
        boolean boolean12 = base64_11.isUrlSafe();
        boolean boolean13 = base64_11.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = base64_6.encode(byteArray11);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        boolean boolean21 = base64_6.isUrlSafe();
        byte[] byteArray23 = base64_6.decode("YUdjPQ");
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, false);
        java.lang.String str37 = base64_6.encodeToString(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray41);
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray41);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41);
        java.lang.String str45 = base64_6.encodeToString(byteArray41);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hg" + "'", str30, "hg");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "YUdjOVBRMEs" + "'", str37, "YUdjOVBRMEs");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "aGc9PQ==\r\n" + "'", str43, "aGc9PQ==\r\n");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[97, 71, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "aGc9PQ" + "'", str45, "aGc9PQ");
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4);
        java.lang.String str9 = base64_0.encodeToString(byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = base64_0.decode((java.lang.Object) (-1L));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hg==" + "'", str9, "hg==");
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray3);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(100, byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((-1), byteArray19, true);
        byte[] byteArray24 = base64_22.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        byte[] byteArray28 = base64_22.encode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64(0, byteArray27);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31);
        byte[] byteArray33 = base64_14.decode(byteArray31);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15, true);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        java.lang.String str23 = base64_18.encodeToString(byteArray21);
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21);
        java.lang.String str26 = base64_6.encodeToString(byteArray25);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "aGc9PQ" + "'", str26, "aGc9PQ");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray8);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray20 = base64_1.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray25);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, true, true);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray28, false);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray39);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray39);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray42, false);
        java.lang.Object obj49 = base64_34.decode((java.lang.Object) byteArray42);
        byte[] byteArray50 = base64_1.encode(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        boolean boolean56 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64(0, byteArray54, true);
        boolean boolean59 = base64_58.isUrlSafe();
        byte[] byteArray61 = base64_58.decode("aGc=\r\n");
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray65 = base64_63.decode("hi!");
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray65);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64((-1), byteArray65, true);
        byte[] byteArray70 = base64_68.decode("hg==\r\n");
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger74 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray73);
        java.math.BigInteger bigInteger75 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray73);
        java.math.BigInteger bigInteger76 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray73);
        byte[] byteArray77 = base64_68.decode(byteArray73);
        java.lang.String str78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray77);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, true, true);
        java.lang.String str82 = base64_58.encodeToString(byteArray81);
        byte[] byteArray85 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger86 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray85);
        java.math.BigInteger bigInteger87 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray85);
        java.math.BigInteger bigInteger88 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray85);
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger88);
        java.lang.String str90 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray89);
        byte[] byteArray91 = base64_58.decode(byteArray89);
        byte[] byteArray92 = base64_1.decode(byteArray91);
        boolean boolean93 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray91);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hg" + "'", str55, "hg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-122]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-122]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(bigInteger75);
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger86);
        org.junit.Assert.assertNotNull(bigInteger87);
        org.junit.Assert.assertNotNull(bigInteger88);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 57, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray2);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[87, 86, 86, 107, 97, 107, 57, 87, 81, 108, 74, 78, 82, 88, 77, 57, 68, 81, 111, 61, 13, 10]");
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = base64_6.decode(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15, true);
        byte[] byteArray20 = base64_18.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        java.lang.Object obj26 = base64_18.encode((java.lang.Object) byteArray23);
        java.lang.String str27 = base64_6.encodeToString(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64(100, byteArray23);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ufffd" + "'", str27, "\ufffd");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str21 = base64_7.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray25);
        byte[] byteArray28 = base64_7.decode(byteArray25);
        byte[] byteArray30 = base64_7.decode("hi!");
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger36);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray39 = base64_7.decode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray37, false);
        boolean boolean42 = base64_41.isUrlSafe();
        byte[] byteArray43 = null;
        byte[] byteArray44 = base64_41.encode(byteArray43);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(byteArray44);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray10);
        java.lang.String str12 = base64_3.encodeToString(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        byte[] byteArray20 = base64_3.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false);
        java.lang.String str30 = base64_3.encodeToString(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray35 = base64_33.decode("hi!");
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray35);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray35);
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray39);
        java.lang.String str41 = base64_32.encodeToString(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        boolean boolean46 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray44);
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray49 = base64_32.decode(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = base64_50.decode("hi!");
        java.lang.String str53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray52);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray52);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray54);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false, false);
        java.lang.String str59 = base64_32.encodeToString(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        java.lang.String str63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray62);
        boolean boolean64 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray62);
        java.math.BigInteger bigInteger65 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray62);
        java.lang.String str66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray62);
        byte[] byteArray67 = base64_32.decode(byteArray62);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, false, false);
        byte[] byteArray71 = base64_3.decode(byteArray70);
        java.lang.Object obj72 = base64_1.decode((java.lang.Object) byteArray71);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray71, true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "aGc=\r\n" + "'", str12, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "aGc=\r\n" + "'", str30, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "aGc=\r\n" + "'", str41, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hg" + "'", str45, "hg");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hg" + "'", str53, "hg");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "aGc=\r\n" + "'", str59, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hg" + "'", str63, "hg");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(bigInteger65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hg" + "'", str66, "hg");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray11);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64(0, byteArray2, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = base64_13.encode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64(0, byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((-1), byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray29 = base64_21.decode(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        java.lang.String str31 = base64_4.encodeToString(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray35 = base64_33.decode("hi!");
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, true, true);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        java.lang.String str44 = base64_4.encodeToString(byteArray38);
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray38);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        byte[] byteArray10 = base64_1.encode(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray8);
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        java.lang.Object obj15 = base64_5.decode((java.lang.Object) byteArray13);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((-1), byteArray20, true);
        byte[] byteArray25 = base64_23.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        byte[] byteArray29 = base64_23.encode(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(0, byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64(0, byteArray37, true);
        byte[] byteArray42 = base64_31.decode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray45);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        java.lang.Object obj52 = base64_31.encode((java.lang.Object) byteArray49);
        byte[] byteArray55 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger56 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger56);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray57);
        java.lang.String str59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray58);
        byte[] byteArray60 = base64_31.decode(byteArray58);
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger64);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray65);
        java.lang.String str67 = base64_31.encodeToString(byteArray66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray66);
        byte[] byteArray69 = base64_30.encode(byteArray66);
        java.lang.String str70 = base64_5.encodeToString(byteArray69);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hg" + "'", str9, "hg");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "YUdjPQ0K\r\n" + "'", str14, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[76, 51, 100, 118, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[76, 51, 100, 118, 80, 81]");
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray4, true);
        boolean boolean9 = base64_8.isUrlSafe();
        byte[] byteArray11 = base64_8.decode("aGc9PQ0K");
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = base64_0.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        java.lang.String str36 = base64_0.encodeToString(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, (-1));
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hg" + "'", str33, "hg");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg==" + "'", str36, "hg==");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        boolean boolean25 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray24);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.lang.Object obj17 = base64_9.encode((java.lang.Object) byteArray14);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        java.lang.String str23 = base64_9.encodeToString(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false);
        byte[] byteArray26 = base64_2.decode(byteArray22);
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "aGc" + "'", str23, "aGc");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "aGc" + "'", str27, "aGc");
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = base64_6.encode(byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true, false);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true);
        boolean boolean20 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((-1), byteArray19, true);
        byte[] byteArray24 = base64_22.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        java.lang.Object obj30 = base64_22.encode((java.lang.Object) byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        java.lang.String str36 = base64_22.encodeToString(byteArray35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false);
        java.lang.String str39 = base64_5.encodeToString(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        byte[] byteArray45 = base64_40.decode(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        java.lang.String str47 = base64_5.encodeToString(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray46);
        java.lang.Class<?> wildcardClass52 = byteArray46.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "aGc" + "'", str36, "aGc");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ufffd" + "'", str39, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ufffd" + "'", str47, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray7);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray7);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, false, (int) (short) 10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, true, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (18) than the specified maxium size of 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "YUdjPQ0K\r\n" + "'", str8, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        java.lang.String str22 = base64_13.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        byte[] byteArray30 = base64_13.decode(byteArray25);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false);
        byte[] byteArray35 = base64_0.decode(byteArray25);
        byte[] byteArray37 = base64_0.decode("");
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger42);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray43);
        java.lang.String str45 = base64_0.encodeToString(byteArray43);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43);
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray43);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hg" + "'", str17, "hg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "aGc=\r\n" + "'", str22, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hg" + "'", str26, "hg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((-1), byteArray19, true);
        byte[] byteArray24 = base64_22.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        java.lang.Object obj30 = base64_22.encode((java.lang.Object) byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        java.lang.String str36 = base64_22.encodeToString(byteArray35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false);
        java.lang.String str39 = base64_5.encodeToString(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        byte[] byteArray45 = base64_40.decode(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        java.lang.String str47 = base64_5.encodeToString(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray51);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray51);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        java.lang.Object obj56 = base64_5.decode((java.lang.Object) byteArray54);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray54);
        java.lang.Class<?> wildcardClass58 = byteArray54.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "aGc" + "'", str36, "aGc");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ufffd" + "'", str39, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ufffd" + "'", str47, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = base64_5.decode(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        byte[] byteArray21 = base64_2.decode("aGc");
        byte[] byteArray23 = base64_2.decode("\ufffd");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray23, false);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc=??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 61, 13, 10]");
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = base64_9.decode(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray21 = base64_2.decode(byteArray18);
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str21 = base64_7.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray25);
        byte[] byteArray28 = base64_7.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray25, true);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false);
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, true, false);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray43);
        java.lang.Object obj45 = base64_30.decode((java.lang.Object) byteArray43);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray48 = base64_46.decode("hi!");
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51);
        java.lang.Object obj53 = base64_30.decode((java.lang.Object) byteArray52);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "YUdjPQ" + "'", str40, "YUdjPQ");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99, 57, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[89, 85, 100, 106, 79, 86, 66, 82]");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[87, 86, 86, 107, 97, 107, 57, 87, 81, 108, 73, 61]");
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("V2tGQlBRMEs=\r\n");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[87, 107, 70, 66, 80, 81, 48, 75]");
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str21 = base64_7.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray25);
        byte[] byteArray28 = base64_7.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray25, false);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray35 = base64_33.decode("hi!");
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray35);
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray35, false);
        byte[] byteArray41 = base64_30.decode(byteArray35);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, true, true, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (6) than the specified maxium size of -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.lang.String str16 = base64_7.encodeToString(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = base64_7.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false);
        java.lang.String str34 = base64_7.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray42 = base64_7.decode(byteArray37);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false);
        java.lang.Object obj46 = base64_5.encode((java.lang.Object) byteArray45);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray50);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray54);
        byte[] byteArray56 = base64_5.decode(byteArray54);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray54);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "aGc=\r\n" + "'", str16, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "aGc=\r\n" + "'", str34, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 0);
        byte[] byteArray3 = base64_1.decode("\ufffd");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((-1), byteArray7, true);
        byte[] byteArray12 = base64_10.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        java.lang.Object obj18 = base64_10.encode((java.lang.Object) byteArray15);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        java.lang.String str24 = base64_10.encodeToString(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false);
        java.lang.Object obj27 = base64_1.encode((java.lang.Object) byteArray26);
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "aGc" + "'", str24, "aGc");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, true, (int) (byte) 100);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(1, byteArray7, true);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64(0, byteArray25, true);
        byte[] byteArray30 = base64_19.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        boolean boolean35 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray33);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        java.lang.Object obj40 = base64_19.encode((java.lang.Object) byteArray37);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, true, false);
        java.lang.Object obj48 = base64_19.encode((java.lang.Object) byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray47);
        java.lang.Object obj50 = base64_18.decode((java.lang.Object) byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hg" + "'", str26, "hg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 78, 67, 103, 61, 61]");
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[97, 71, 99, 57, 80, 89, 89, 61, 13, 10]");
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray20 = base64_1.decode("aGc");
        boolean boolean21 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray24);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray28);
        byte[] byteArray33 = base64_1.encode(byteArray28);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray33);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hg" + "'", str25, "hg");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        byte[] byteArray2 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray2);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        java.lang.String str14 = base64_5.encodeToString(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        byte[] byteArray22 = base64_5.decode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray26);
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray33 = base64_28.decode(byteArray31);
        java.lang.Object obj34 = base64_5.decode((java.lang.Object) byteArray31);
        byte[] byteArray35 = base64_3.decode(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray35);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hg" + "'", str9, "hg");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "aGc=\r\n" + "'", str14, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray6);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "L3dvPQ0K\r\n" + "'", str7, "L3dvPQ0K\r\n");
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = base64_9.decode(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray21 = base64_2.decode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64(0, byteArray28, true);
        byte[] byteArray33 = base64_22.decode(byteArray28);
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str35 = base64_2.encodeToString(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        boolean boolean42 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray40);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        java.lang.String str46 = base64_37.encodeToString(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray49 = base64_47.decode("hi!");
        java.lang.String str50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        boolean boolean51 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray49);
        java.math.BigInteger bigInteger52 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        byte[] byteArray54 = base64_37.decode(byteArray49);
        byte[] byteArray56 = base64_37.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray60 = base64_58.decode("\ufffd");
        java.lang.Object obj61 = base64_37.decode((java.lang.Object) byteArray60);
        byte[] byteArray62 = base64_2.encode(byteArray60);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray62);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "aGc=\r\n" + "'", str46, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hg" + "'", str50, "hg");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 61]");
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3, false);
        boolean boolean9 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15, true);
        byte[] byteArray20 = base64_18.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = base64_18.encode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64(0, byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((-1), byteArray23);
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger32);
        byte[] byteArray34 = base64_26.decode(byteArray33);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        java.lang.Class<?> wildcardClass36 = bigInteger35.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj37 = base64_8.decode((java.lang.Object) wildcardClass36);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.lang.String str29 = base64_2.encodeToString(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false);
        java.lang.String str38 = base64_2.encodeToString(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray33);
        byte[] byteArray41 = null;
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray41, true);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray47 = base64_45.decode("hi!");
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray47);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((-1), byteArray47, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47);
        java.lang.Object obj52 = base64_43.decode((java.lang.Object) byteArray47);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray56 = base64_54.decode("hi!");
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray56);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64((-1), byteArray56, true);
        byte[] byteArray61 = base64_59.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray64 = base64_62.decode("hi!");
        java.lang.String str65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray64);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray64);
        java.lang.Object obj67 = base64_59.encode((java.lang.Object) byteArray64);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray70 = base64_68.decode("hi!");
        java.lang.String str71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray70);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray70);
        java.lang.String str73 = base64_59.encodeToString(byteArray72);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray72);
        java.lang.Class<?> wildcardClass75 = byteArray72.getClass();
        java.lang.Object obj76 = base64_43.decode((java.lang.Object) byteArray72);
        org.apache.commons.codec.binary.Base64 base64_77 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray79 = base64_77.decode("hi!");
        java.lang.String str80 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray79);
        boolean boolean81 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray79);
        java.math.BigInteger bigInteger82 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray79);
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray79);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray83);
        byte[] byteArray85 = base64_43.decode(byteArray84);
        byte[] byteArray86 = base64_39.encode(byteArray84);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "aGc=\r\n" + "'", str29, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg==\r\n" + "'", str38, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-122]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hg" + "'", str65, "hg");
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-122]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hg" + "'", str71, "hg");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "aGc" + "'", str73, "aGc");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-122]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hg" + "'", str80, "hg");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(bigInteger82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[89, 85, 100, 106, 80, 81, 48, 75]");
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        boolean boolean25 = base64_16.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((-1), byteArray30, true);
        byte[] byteArray35 = base64_33.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        byte[] byteArray39 = base64_33.encode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(0, byteArray38);
        byte[] byteArray41 = null;
        byte[] byteArray42 = base64_40.encode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray48 = base64_43.decode(byteArray47);
        byte[] byteArray49 = base64_40.encode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        boolean boolean56 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray54);
        java.math.BigInteger bigInteger57 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray58);
        java.lang.String str60 = base64_51.encodeToString(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray63 = base64_61.decode("hi!");
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray63);
        boolean boolean65 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray63);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray63);
        byte[] byteArray68 = base64_51.decode(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray71 = base64_69.decode("hi!");
        java.lang.String str72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray73);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false, false);
        java.lang.String str78 = base64_51.encodeToString(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_80 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray82 = base64_80.decode("hi!");
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray82);
        org.apache.commons.codec.binary.Base64 base64_84 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray82);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, false);
        java.lang.String str87 = base64_51.encodeToString(byteArray82);
        byte[] byteArray88 = base64_40.encode(byteArray82);
        byte[] byteArray89 = base64_16.decode(byteArray88);
        boolean boolean90 = base64_16.isUrlSafe();
        byte[] byteArray92 = base64_16.decode("\ufffd");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hg" + "'", str55, "hg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "aGc=\r\n" + "'", str60, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hg" + "'", str64, "hg");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hg" + "'", str72, "hg");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-122]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "aGc=\r\n" + "'", str78, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-122]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hg==\r\n" + "'", str87, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[104, 103]");
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, false);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, true);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, false, (int) (short) 1);
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        byte[] byteArray10 = base64_8.decode("aGc");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, (int) '#');
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, false, (int) (short) 100);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = base64_9.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(0, byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray25 = base64_17.decode(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, false);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray24);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true);
        java.lang.String str37 = base64_29.encodeToString(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((-1), byteArray43, true);
        byte[] byteArray48 = base64_46.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        byte[] byteArray52 = base64_46.encode(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64(0, byteArray51);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((-1), byteArray51);
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger58 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray57);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger58);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray59);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray59);
        byte[] byteArray62 = base64_54.decode(byteArray61);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, true, true, (int) (byte) 100);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, false);
        java.lang.Object obj70 = base64_29.decode((java.lang.Object) byteArray69);
        boolean boolean71 = base64_29.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "L3dvPQ0K" + "'", str37, "L3dvPQ0K");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        boolean boolean21 = base64_6.isUrlSafe();
        byte[] byteArray23 = base64_6.decode("YUdjPQ");
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, false);
        java.lang.String str37 = base64_6.encodeToString(byteArray33);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray33);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hg" + "'", str30, "hg");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "YUdjOVBRMEs" + "'", str37, "YUdjOVBRMEs");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 61]");
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray3 = base64_1.decode("\ufffd");
        boolean boolean4 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((-1), byteArray8, true);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger15);
        java.lang.String str17 = base64_1.encodeToString(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((-1), byteArray21, true);
        byte[] byteArray26 = base64_24.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        boolean boolean31 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray29);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        boolean boolean34 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray33);
        byte[] byteArray35 = base64_24.decode(byteArray33);
        boolean boolean36 = base64_24.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray40);
        java.lang.String str42 = base64_38.encodeToString(byteArray41);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, true, (int) (byte) 100);
        byte[] byteArray47 = base64_24.encode(byteArray46);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, true, true, 0);
        byte[] byteArray52 = base64_1.decode(byteArray51);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "YUdjPQ==\r\n" + "'", str17, "YUdjPQ==\r\n");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hg" + "'", str30, "hg");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = base64_6.decode(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15, true);
        byte[] byteArray20 = base64_18.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        java.lang.Object obj26 = base64_18.encode((java.lang.Object) byteArray23);
        java.lang.String str27 = base64_6.encodeToString(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64(100, byteArray23);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray30);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ufffd" + "'", str27, "\ufffd");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        byte[] byteArray11 = base64_0.encode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15, true);
        byte[] byteArray20 = base64_18.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        java.lang.Object obj26 = base64_18.encode((java.lang.Object) byteArray23);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        java.lang.String str32 = base64_18.encodeToString(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37);
        byte[] byteArray39 = base64_0.decode(byteArray38);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hg" + "'", str30, "hg");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "aGc" + "'", str32, "aGc");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 61]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[89, 85, 100, 106, 80, 81, 48, 75]");
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray6);
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray13 = base64_8.decode(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((-1), byteArray17, true);
        byte[] byteArray22 = base64_20.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        java.lang.Object obj28 = base64_20.encode((java.lang.Object) byteArray25);
        java.lang.String str29 = base64_8.encodeToString(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(100, byteArray25);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger31);
        java.lang.String str33 = base64_1.encodeToString(byteArray32);
        boolean boolean34 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hg" + "'", str26, "hg");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(obj28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ufffd" + "'", str29, "\ufffd");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        byte[] byteArray10 = base64_8.decode("aGc");
        boolean boolean11 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        java.lang.String str16 = base64_8.encodeToString(byteArray14);
        byte[] byteArray18 = base64_8.decode("\ufffd");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((-1), byteArray22, true);
        byte[] byteArray27 = base64_25.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        java.lang.Object obj33 = base64_25.encode((java.lang.Object) byteArray30);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        java.lang.String str39 = base64_25.encodeToString(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        java.lang.Object obj42 = base64_8.decode((java.lang.Object) byteArray38);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "aGc" + "'", str39, "aGc");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[89, 85, 100, 106, 80, 81]");
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = base64_13.encode(byteArray18);
        byte[] byteArray20 = base64_6.encode(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[89, 85, 100, 106]");
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = base64_9.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(0, byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray25 = base64_17.decode(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray25, true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, false);
        java.lang.Object obj29 = base64_0.encode((java.lang.Object) byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        java.lang.Class<?> wildcardClass32 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = base64_6.decode(byteArray11);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, false);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false, false);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        boolean boolean21 = base64_6.isUrlSafe();
        byte[] byteArray23 = base64_6.decode("YUdjPQ");
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, false);
        java.lang.String str37 = base64_6.encodeToString(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((-1), byteArray43, true);
        byte[] byteArray48 = base64_46.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray51);
        boolean boolean53 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray51);
        java.math.BigInteger bigInteger54 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray51);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        boolean boolean56 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray55);
        byte[] byteArray57 = base64_46.decode(byteArray55);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray61);
        byte[] byteArray63 = base64_58.decode(byteArray62);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray62);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray64);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray65);
        java.lang.Object obj67 = base64_46.decode((java.lang.Object) byteArray66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray66);
        java.lang.Object obj69 = base64_39.encode((java.lang.Object) byteArray68);
        byte[] byteArray71 = base64_39.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray74 = base64_72.decode("hi!");
        java.lang.String str75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray74);
        boolean boolean76 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray74);
        java.math.BigInteger bigInteger77 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray74);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray74);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray78);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78);
        java.lang.String str81 = base64_39.encodeToString(byteArray78);
        org.apache.commons.codec.binary.Base64 base64_82 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray84 = base64_82.decode("hi!");
        java.lang.String str85 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray84);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray84);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray84, false);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray84, true);
        byte[] byteArray91 = base64_39.decode(byteArray90);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray91);
        byte[] byteArray95 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray92, false, false);
        byte[] byteArray96 = base64_6.decode(byteArray92);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hg" + "'", str30, "hg");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "YUdjOVBRMEs" + "'", str37, "YUdjOVBRMEs");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hg" + "'", str52, "hg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-122]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hg" + "'", str75, "hg");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(bigInteger77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "aGc=\r\n" + "'", str81, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-122]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hg" + "'", str85, "hg");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-122]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[97, 71, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[-122]");
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger7);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger7);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = base64_1.decode((java.lang.Object) bigInteger7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3, false);
        boolean boolean8 = base64_7.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray12);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        java.lang.String str16 = base64_7.encodeToString(byteArray12);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg==" + "'", str16, "hg==");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray11);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, true);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64(0, byteArray2, true);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray9 = base64_4.decode(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray1);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((-1), byteArray12, true);
        byte[] byteArray17 = base64_15.decode("hg==\r\n");
        byte[] byteArray18 = base64_8.encode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((-1), byteArray22, true);
        byte[] byteArray27 = base64_25.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        java.lang.Object obj33 = base64_25.encode((java.lang.Object) byteArray30);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        java.lang.String str39 = base64_25.encodeToString(byteArray38);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false);
        java.lang.String str42 = base64_8.encodeToString(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray48 = base64_43.decode(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray47);
        java.lang.String str50 = base64_8.encodeToString(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        java.lang.Object obj52 = base64_2.decode((java.lang.Object) byteArray49);
        java.math.BigInteger bigInteger53 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, true, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray49, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc=??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "aGc" + "'", str39, "aGc");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ufffd" + "'", str42, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ufffd" + "'", str50, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        boolean boolean12 = base64_0.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18);
        java.lang.String str20 = base64_13.encodeToString(byteArray19);
        byte[] byteArray21 = base64_0.decode(byteArray19);
        java.lang.Class<?> wildcardClass22 = byteArray19.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc9PQ==" + "'", str20, "aGc9PQ==");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((-1), byteArray28, true);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.String str36 = base64_31.encodeToString(byteArray34);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray34);
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray34);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false);
        java.lang.Object obj42 = base64_16.decode((java.lang.Object) byteArray41);
        byte[] byteArray44 = base64_16.decode("WVVkalBRPT0NCg");
        java.lang.Object obj45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj46 = base64_16.decode(obj45);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hg==\r\n" + "'", str39, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray20 = base64_1.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray25);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, true, true);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray28, false);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray39);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray39);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray42, false);
        java.lang.Object obj49 = base64_34.decode((java.lang.Object) byteArray42);
        byte[] byteArray50 = base64_1.encode(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        boolean boolean56 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64(0, byteArray54, true);
        boolean boolean59 = base64_58.isUrlSafe();
        byte[] byteArray61 = base64_58.decode("aGc=\r\n");
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray65 = base64_63.decode("hi!");
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray65);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64((-1), byteArray65, true);
        byte[] byteArray70 = base64_68.decode("hg==\r\n");
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger74 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray73);
        java.math.BigInteger bigInteger75 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray73);
        java.math.BigInteger bigInteger76 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray73);
        byte[] byteArray77 = base64_68.decode(byteArray73);
        java.lang.String str78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray77);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, true, true);
        java.lang.String str82 = base64_58.encodeToString(byteArray81);
        byte[] byteArray85 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger86 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray85);
        java.math.BigInteger bigInteger87 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray85);
        java.math.BigInteger bigInteger88 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray85);
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger88);
        java.lang.String str90 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray89);
        byte[] byteArray91 = base64_58.decode(byteArray89);
        byte[] byteArray92 = base64_1.decode(byteArray91);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray92);
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray92);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hg" + "'", str55, "hg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-122]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-122]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(bigInteger75);
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger86);
        org.junit.Assert.assertNotNull(bigInteger87);
        org.junit.Assert.assertNotNull(bigInteger88);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true, true);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray15);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("\ufffd");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, true, true, (int) '#');
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        byte[] byteArray0 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, true, false, 100);
        org.junit.Assert.assertNull(byteArray4);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        byte[] byteArray10 = base64_8.decode("aGc");
        boolean boolean11 = base64_8.isUrlSafe();
        boolean boolean12 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray17);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((-1), byteArray23, true);
        byte[] byteArray28 = base64_26.decode("hg==\r\n");
        byte[] byteArray29 = base64_19.encode(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((-1), byteArray33, true);
        byte[] byteArray38 = base64_36.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = base64_39.decode("hi!");
        java.lang.String str42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray41);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        java.lang.Object obj44 = base64_36.encode((java.lang.Object) byteArray41);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray47 = base64_45.decode("hi!");
        java.lang.String str48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray47);
        java.lang.String str50 = base64_36.encodeToString(byteArray49);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false);
        java.lang.String str53 = base64_19.encodeToString(byteArray49);
        java.lang.String str54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray55, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj58 = base64_8.encode((java.lang.Object) false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hg" + "'", str42, "hg");
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hg" + "'", str48, "hg");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "aGc" + "'", str50, "aGc");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ufffd" + "'", str53, "\ufffd");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "aGc" + "'", str54, "aGc");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = base64_9.decode(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray21 = base64_2.decode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64(0, byteArray28, true);
        byte[] byteArray33 = base64_22.decode(byteArray28);
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str35 = base64_2.encodeToString(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        boolean boolean42 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray40);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        java.lang.String str46 = base64_37.encodeToString(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray49 = base64_47.decode("hi!");
        java.lang.String str50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        boolean boolean51 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray49);
        java.math.BigInteger bigInteger52 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        byte[] byteArray54 = base64_37.decode(byteArray49);
        byte[] byteArray56 = base64_37.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray60 = base64_58.decode("\ufffd");
        java.lang.Object obj61 = base64_37.decode((java.lang.Object) byteArray60);
        byte[] byteArray62 = base64_2.encode(byteArray60);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray62);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray62);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "aGc=\r\n" + "'", str46, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hg" + "'", str50, "hg");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 61]");
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(0, byteArray7, true);
        byte[] byteArray12 = base64_1.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray12, false);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray18);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray23 = base64_14.encode(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray14);
        java.lang.Object obj17 = base64_6.encode((java.lang.Object) byteArray14);
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger18);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray19);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "/wo=\r\n" + "'", str16, "/wo=\r\n");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.lang.String str19 = base64_10.encodeToString(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray22);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray27 = base64_10.decode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray31);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray38 = base64_33.decode(byteArray36);
        java.lang.Object obj39 = base64_10.decode((java.lang.Object) byteArray36);
        java.lang.Object obj40 = base64_8.encode((java.lang.Object) byteArray36);
        boolean boolean41 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray45);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray49);
        byte[] byteArray51 = base64_42.encode(byteArray49);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        byte[] byteArray53 = base64_8.encode(byteArray49);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        java.lang.Class<?> wildcardClass55 = byteArray49.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "aGc=\r\n" + "'", str19, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        byte[] byteArray21 = base64_2.decode("aGc");
        byte[] byteArray23 = base64_2.decode("\ufffd");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64(10, byteArray23, false);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc=??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 61, 13, 10]");
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray7, false);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14, true);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        boolean boolean22 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray20);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        java.lang.String str27 = base64_17.encodeToString(byteArray26);
        byte[] byteArray28 = base64_10.encode(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(0, byteArray28, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc9PQ0K]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hg" + "'", str25, "hg");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "aGc9PQ0K" + "'", str27, "aGc9PQ0K");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, false, (int) (short) 1);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((-1), byteArray19, true);
        byte[] byteArray24 = base64_22.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        java.lang.Object obj30 = base64_22.encode((java.lang.Object) byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        java.lang.String str36 = base64_22.encodeToString(byteArray35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false);
        java.lang.String str39 = base64_5.encodeToString(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        byte[] byteArray45 = base64_40.decode(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        java.lang.String str47 = base64_5.encodeToString(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray51);
        boolean boolean53 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray51);
        java.math.BigInteger bigInteger54 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray51);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray55);
        byte[] byteArray57 = base64_48.encode(byteArray55);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray55);
        byte[] byteArray59 = base64_5.encode(byteArray58);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "aGc" + "'", str36, "aGc");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ufffd" + "'", str39, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ufffd" + "'", str47, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hg" + "'", str52, "hg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[97, 71, 99, 57, 80, 89, 89, 61]");
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        java.lang.Object obj16 = base64_2.decode((java.lang.Object) byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray15, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[97, 71, 99, 61]");
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64(0, byteArray3, true);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray3);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (10) than the specified maxium size of -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc9PQ0K" + "'", str10, "aGc9PQ0K");
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = base64_0.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray33);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str37 = base64_0.encodeToString(byteArray33);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger43);
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray44);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, true, (int) (byte) 100);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray54 = base64_0.encode(byteArray44);
        boolean boolean55 = base64_0.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        java.math.BigInteger bigInteger61 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray59);
        java.lang.String str62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray59, false);
        byte[] byteArray66 = base64_64.decode("\ufffd");
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, false);
        java.lang.String str70 = base64_0.encodeToString(byteArray67);
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64(true);
        boolean boolean73 = base64_72.isUrlSafe();
        boolean boolean74 = base64_72.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_76 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray78 = base64_76.decode("hi!");
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray78);
        org.apache.commons.codec.binary.Base64 base64_80 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray78);
        byte[] byteArray81 = base64_72.encode(byteArray78);
        java.lang.Object obj82 = base64_0.encode((java.lang.Object) byteArray81);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg==" + "'", str37, "hg==");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hg" + "'", str62, "hg");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "WVVkalBRMEs=" + "'", str70, "WVVkalBRMEs=");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-122]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(obj82);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.lang.Object obj19 = base64_1.decode((java.lang.Object) byteArray17);
        boolean boolean20 = base64_1.isUrlSafe();
        byte[] byteArray22 = base64_1.decode("YUdjOVBRDQo=\r\n");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "aGc=\r\n" + "'", str9, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 57, 80, 81, 13, 10]");
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        byte[] byteArray16 = null;
        byte[] byteArray17 = base64_15.encode(byteArray16);
        byte[] byteArray19 = base64_15.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray19, false);
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray19);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg==\r\n" + "'", str22, "hg==\r\n");
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("\ufffd");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray2, false);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc=??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        byte[] byteArray29 = base64_6.decode("hi!");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = base64_6.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((-1), byteArray42, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42);
        java.lang.Object obj47 = base64_6.encode((java.lang.Object) byteArray42);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((-1), byteArray51, true);
        byte[] byteArray56 = base64_54.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        boolean boolean61 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray59);
        java.math.BigInteger bigInteger62 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray59);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        boolean boolean64 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray63);
        byte[] byteArray65 = base64_54.decode(byteArray63);
        byte[] byteArray66 = base64_6.decode(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_67 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray69 = base64_67.decode("hi!");
        java.lang.String str70 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray69);
        boolean boolean71 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray69);
        java.math.BigInteger bigInteger72 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray69);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray69);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray73);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray73);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray76);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, false);
        java.lang.String str80 = base64_6.encodeToString(byteArray77);
        byte[] byteArray84 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger85 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray84);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger85);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger85);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger85);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray88, false);
        org.apache.commons.codec.binary.Base64 base64_91 = new org.apache.commons.codec.binary.Base64(1, byteArray90);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray90);
        byte[] byteArray93 = base64_6.decode(byteArray90);
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray93);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-122]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-122]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hg" + "'", str70, "hg");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(bigInteger72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[87, 86, 86, 107, 97, 108, 66, 82]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "WVVkalBR" + "'", str80, "WVVkalBR");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        byte[] byteArray18 = base64_7.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray24 = base64_19.decode(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.Object obj28 = base64_7.decode((java.lang.Object) byteArray27);
        byte[] byteArray30 = base64_7.decode("YUdjPQ0K\r\n");
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((-1), byteArray30, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc=??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        byte[] byteArray2 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64(10, byteArray2);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((-1), byteArray7, true);
        byte[] byteArray12 = base64_10.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        java.lang.Object obj18 = base64_10.encode((java.lang.Object) byteArray15);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        java.lang.String str24 = base64_10.encodeToString(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false);
        byte[] byteArray27 = base64_3.decode(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "aGc" + "'", str24, "aGc");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(0, byteArray15);
        java.lang.Class<?> wildcardClass17 = byteArray15.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        java.lang.Object obj15 = base64_5.decode((java.lang.Object) byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hg" + "'", str9, "hg");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "YUdjPQ0K\r\n" + "'", str14, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "YUdjPQ0K\r\n" + "'", str17, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "YUdjPQ0K" + "'", str19, "YUdjPQ0K");
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("YUdjOVBRDQo");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[97, 71, 99, 57, 80, 81, 13, 10]");
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 0);
        byte[] byteArray3 = base64_1.decode("YUdjPQ0K\r\n");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        boolean boolean3 = base64_0.isUrlSafe();
        boolean boolean4 = base64_0.isUrlSafe();
        byte[] byteArray6 = base64_0.decode("WVVkalBR\r\n");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[89, 85, 100, 106, 80, 81]");
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = base64_6.decode(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger17);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger17);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray15);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, true);
        byte[] byteArray22 = base64_0.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((-1), byteArray26, true);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        java.lang.String str34 = base64_29.encodeToString(byteArray32);
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray37);
        java.lang.Object obj40 = base64_29.encode((java.lang.Object) byteArray37);
        java.lang.Object obj41 = base64_0.encode((java.lang.Object) byteArray37);
        java.lang.Class<?> wildcardClass42 = byteArray37.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "/wo=\r\n" + "'", str39, "/wo=\r\n");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3, false);
        boolean boolean9 = base64_8.isUrlSafe();
        byte[] byteArray11 = base64_8.decode("aGc9PQ0K\r\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.lang.Class<?> wildcardClass34 = byteArray32.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        byte[] byteArray19 = base64_8.decode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray25 = base64_20.decode(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.Object obj29 = base64_8.decode((java.lang.Object) byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.lang.Object obj31 = base64_1.encode((java.lang.Object) byteArray30);
        byte[] byteArray33 = base64_1.decode("WVVkalBRPT0NCg");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray6 = base64_2.decode("aGc9PQ==\r\n");
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false);
        byte[] byteArray14 = base64_2.decode(byteArray13);
        byte[] byteArray15 = base64_1.decode(byteArray13);
        byte[] byteArray16 = null;
        java.lang.String str17 = base64_1.encodeToString(byteArray16);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(0, byteArray23, true);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.String str37 = base64_28.encodeToString(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        boolean boolean42 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray40);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        byte[] byteArray45 = base64_28.decode(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray49 = base64_47.decode("hi!");
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray49);
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray56 = base64_51.decode(byteArray54);
        java.lang.Object obj57 = base64_28.decode((java.lang.Object) byteArray54);
        java.lang.Object obj58 = base64_26.encode((java.lang.Object) byteArray54);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54);
        byte[] byteArray60 = base64_1.decode(byteArray59);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "aGc=\r\n" + "'", str37, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[47, 119, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10]");
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((-1), byteArray30, true);
        byte[] byteArray35 = base64_33.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        byte[] byteArray39 = base64_33.encode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(0, byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((-1), byteArray38);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger45 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray49 = base64_41.decode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray53 = base64_51.decode("hi!");
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((-1), byteArray53, true);
        byte[] byteArray58 = base64_56.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        java.lang.String str62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray61);
        java.math.BigInteger bigInteger63 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        java.lang.Object obj64 = base64_56.encode((java.lang.Object) byteArray61);
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray67 = base64_65.decode("hi!");
        java.lang.String str68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray67);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray67);
        java.lang.String str70 = base64_56.encodeToString(byteArray69);
        boolean boolean71 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray69);
        java.lang.String str72 = base64_41.encodeToString(byteArray69);
        java.lang.String str73 = base64_16.encodeToString(byteArray69);
        org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray77 = base64_75.decode("aGc=");
        java.lang.Object obj78 = base64_16.decode((java.lang.Object) byteArray77);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hg" + "'", str62, "hg");
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hg" + "'", str68, "hg");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "aGc" + "'", str70, "aGc");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "aGc=" + "'", str72, "aGc=");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "aGc=" + "'", str73, "aGc=");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[104, 103]");
        org.junit.Assert.assertNotNull(obj78);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        java.lang.String str17 = base64_8.encodeToString(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        boolean boolean22 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray20);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        byte[] byteArray25 = base64_8.decode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray30);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false, false);
        java.lang.String str35 = base64_8.encodeToString(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        boolean boolean40 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray38);
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray38);
        java.lang.String str42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        byte[] byteArray43 = base64_8.decode(byteArray38);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false);
        java.lang.Object obj47 = base64_6.encode((java.lang.Object) byteArray46);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray51);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray55);
        byte[] byteArray57 = base64_6.decode(byteArray55);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray62);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray62);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray65);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, true, true);
        org.apache.commons.codec.binary.Base64 base64_70 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray65);
        java.lang.String str71 = base64_6.encodeToString(byteArray65);
        byte[] byteArray73 = base64_6.decode("YUdjOVBRMEs");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_74 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc9PQ0K]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "aGc=\r\n" + "'", str17, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "aGc=\r\n" + "'", str35, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hg" + "'", str39, "hg");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hg" + "'", str42, "hg");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        byte[] byteArray10 = base64_8.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray14 = base64_12.decode("aGc=\r\n");
        java.lang.Object obj15 = base64_8.decode((java.lang.Object) "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64(1, byteArray1, false);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        java.lang.String str14 = base64_9.encodeToString(byteArray12);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, true);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(1, byteArray12);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64(0, byteArray12);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray12, true);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray10, false);
        boolean boolean15 = base64_14.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        boolean boolean12 = base64_0.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18);
        java.lang.String str20 = base64_13.encodeToString(byteArray19);
        byte[] byteArray21 = base64_0.decode(byteArray19);
        byte[] byteArray23 = base64_0.decode("");
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger28);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray31);
        byte[] byteArray34 = base64_0.decode(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((-1), byteArray38, true);
        byte[] byteArray43 = base64_41.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        byte[] byteArray47 = base64_41.encode(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray48);
        java.lang.Object obj50 = base64_0.decode((java.lang.Object) byteArray49);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc9PQ==" + "'", str20, "aGc9PQ==");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertNotNull(obj50);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        byte[] byteArray3 = base64_1.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray9 = base64_1.encode(byteArray8);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc" + "'", str11, "aGc");
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(0, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray6, false);
        boolean boolean11 = base64_10.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15, true);
        byte[] byteArray20 = base64_18.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        java.lang.Object obj26 = base64_18.encode((java.lang.Object) byteArray23);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        java.lang.String str32 = base64_18.encodeToString(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray36);
        byte[] byteArray39 = base64_18.decode(byteArray36);
        byte[] byteArray41 = base64_18.decode("hi!");
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger45 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        java.math.BigInteger bigInteger46 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger47);
        java.lang.String str49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray48);
        byte[] byteArray50 = base64_18.decode(byteArray48);
        byte[] byteArray51 = base64_10.decode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray56 = base64_54.decode("hi!");
        java.lang.String str57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray56);
        boolean boolean58 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray56);
        java.math.BigInteger bigInteger59 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray56);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray56);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray60);
        java.lang.String str62 = base64_53.encodeToString(byteArray60);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray65 = base64_63.decode("hi!");
        java.lang.String str66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray65);
        boolean boolean67 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray65);
        java.math.BigInteger bigInteger68 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray65);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray65);
        byte[] byteArray70 = base64_53.decode(byteArray65);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray65);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray71);
        java.lang.String str73 = base64_10.encodeToString(byteArray71);
        org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray77 = base64_75.decode("hi!");
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray77);
        org.apache.commons.codec.binary.Base64 base64_79 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray77);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray77);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray80);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray80, true, true);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray80);
        boolean boolean86 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray85);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray85, false);
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray85);
        java.lang.String str90 = base64_10.encodeToString(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj91 = base64_2.encode((java.lang.Object) str90);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hg" + "'", str30, "hg");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "aGc" + "'", str32, "aGc");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hg" + "'", str57, "hg");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "aGc=\r\n" + "'", str62, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-122]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hg" + "'", str66, "hg");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-122]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "aGc9PQ0K" + "'", str73, "aGc9PQ0K");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-122]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        byte[] byteArray18 = base64_7.decode(byteArray16);
        boolean boolean19 = base64_7.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        java.lang.String str25 = base64_21.encodeToString(byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, true, (int) (byte) 100);
        byte[] byteArray30 = base64_7.encode(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray29);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(0, byteArray7, true);
        byte[] byteArray12 = base64_1.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        java.lang.String str23 = base64_14.encodeToString(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray31 = base64_14.decode(byteArray26);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        byte[] byteArray36 = base64_1.decode(byteArray26);
        byte[] byteArray38 = base64_1.decode("");
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray38);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "aGc=\r\n" + "'", str23, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray7);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[95, 119, 111]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "X3dv\r\n" + "'", str8, "X3dv\r\n");
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true);
        java.lang.Class<?> wildcardClass14 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        byte[] byteArray2 = new byte[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray2);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 61, 61]");
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray5 = base64_0.decode(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, true, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        java.lang.Object obj15 = base64_5.decode((java.lang.Object) byteArray13);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hg" + "'", str9, "hg");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "YUdjPQ0K\r\n" + "'", str14, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "YUdjPQ0K\r\n" + "'", str18, "YUdjPQ0K\r\n");
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("aGc9PQ0K");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, true, false, (int) (byte) 100);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        byte[] byteArray17 = base64_6.decode(byteArray15);
        boolean boolean18 = base64_6.isUrlSafe();
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        byte[] byteArray26 = base64_6.encode(byteArray25);
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("V1ZWa2FrOVdRbEk9");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [WVVkak9WQlI=]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[87, 86, 86, 107, 97, 107, 57, 87, 81, 108, 73, 61]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V1ZWa2FrOVdRbEk9\r\n" + "'", str3, "V1ZWa2FrOVdRbEk9\r\n");
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray2);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true);
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray10);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGcNCg" + "'", str11, "aGcNCg");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[97, 71, 99, 78, 67, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        byte[] byteArray4 = base64_2.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        boolean boolean7 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((-1), byteArray11, true);
        byte[] byteArray16 = base64_14.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.lang.Object obj22 = base64_14.encode((java.lang.Object) byteArray19);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        java.lang.String str28 = base64_14.encodeToString(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray32);
        byte[] byteArray35 = base64_14.decode(byteArray32);
        byte[] byteArray37 = base64_14.decode("hi!");
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger43);
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        byte[] byteArray46 = base64_14.decode(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((-1), byteArray50, true);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50);
        java.lang.Object obj55 = base64_14.encode((java.lang.Object) byteArray50);
        java.lang.Object obj56 = base64_6.encode(obj55);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray59);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        byte[] byteArray66 = base64_6.encode(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, true, false, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (6) than the specified maxium size of -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hg" + "'", str26, "hg");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "aGc" + "'", str28, "aGc");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[104, 103]");
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray2);
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = base64_9.decode(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray21 = base64_2.decode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64(0, byteArray28, true);
        byte[] byteArray33 = base64_22.decode(byteArray28);
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str35 = base64_2.encodeToString(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, true, false, (int) ' ');
        java.lang.Object obj45 = base64_2.encode((java.lang.Object) byteArray38);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hg" + "'", str39, "hg");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103]");
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        byte[] byteArray19 = base64_8.decode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray25 = base64_20.decode(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.Object obj29 = base64_8.decode((java.lang.Object) byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.lang.Object obj31 = base64_1.encode((java.lang.Object) byteArray30);
        byte[] byteArray33 = base64_1.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40);
        java.lang.String str43 = base64_1.encodeToString(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, true);
        byte[] byteArray53 = base64_1.decode(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, true, true, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (6) than the specified maxium size of -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "aGc=\r\n" + "'", str43, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hg" + "'", str47, "hg");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        boolean boolean21 = base64_6.isUrlSafe();
        boolean boolean22 = base64_6.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(0, byteArray7, true);
        byte[] byteArray12 = base64_1.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        java.lang.Object obj22 = base64_1.encode((java.lang.Object) byteArray19);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        byte[] byteArray30 = base64_1.decode(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray34);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        java.lang.String str38 = base64_1.encodeToString(byteArray34);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger44);
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        boolean boolean48 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray45);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, true, (int) (byte) 100);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        byte[] byteArray55 = base64_1.encode(byteArray45);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray55);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64((-1), byteArray62, true);
        byte[] byteArray67 = base64_65.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray70 = base64_68.decode("hi!");
        byte[] byteArray71 = base64_65.encode(byteArray70);
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64(0, byteArray70);
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64((-1), byteArray70);
        byte[] byteArray76 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger77 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray76);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger77);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray78);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray78);
        byte[] byteArray81 = base64_73.decode(byteArray80);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray81);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray81, true, true, (int) (byte) 100);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray81, true, false, (int) (short) 1);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray90, true, false);
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray90);
        java.lang.String str95 = base64_56.encodeToString(byteArray90);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg==" + "'", str38, "hg==");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-122]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray3);
        byte[] byteArray7 = base64_5.decode("");
        boolean boolean8 = base64_5.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((-1), byteArray19, true);
        byte[] byteArray24 = base64_22.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        java.lang.Object obj30 = base64_22.encode((java.lang.Object) byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        java.lang.String str36 = base64_22.encodeToString(byteArray35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false);
        java.lang.String str39 = base64_5.encodeToString(byteArray35);
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray35);
        boolean boolean41 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray35);
        java.lang.String str42 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray35);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, true, false, (int) (short) 100);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "aGc" + "'", str36, "aGc");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ufffd" + "'", str39, "\ufffd");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "aGc" + "'", str40, "aGc");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "aGc=\r\n" + "'", str42, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[97, 71, 99, 61]");
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true, false, (int) (short) 10);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[89, 85, 100, 106, 79, 86, 66, 82, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[87, 86, 86, 107, 97, 107, 57, 87, 81, 108, 74, 81, 86, 68, 66, 79, 81, 50, 99, 57, 80, 81, 13, 10]");
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        java.lang.Object obj15 = base64_5.decode((java.lang.Object) byteArray13);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray13);
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hg" + "'", str9, "hg");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "YUdjPQ0K\r\n" + "'", str14, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "aGc" + "'", str17, "aGc");
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        byte[] byteArray16 = base64_6.encode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((-1), byteArray20, true);
        byte[] byteArray25 = base64_23.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.lang.Object obj31 = base64_23.encode((java.lang.Object) byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.String str37 = base64_23.encodeToString(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        java.lang.String str40 = base64_6.encodeToString(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray46 = base64_41.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        java.lang.String str48 = base64_6.encodeToString(byteArray47);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        boolean boolean56 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray54);
        java.math.BigInteger bigInteger57 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray58);
        java.lang.String str60 = base64_51.encodeToString(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray63 = base64_61.decode("hi!");
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray63);
        boolean boolean65 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray63);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray63);
        byte[] byteArray68 = base64_51.decode(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray71 = base64_69.decode("hi!");
        java.lang.String str72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray73);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false, false);
        java.lang.String str78 = base64_51.encodeToString(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_79 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray81 = base64_79.decode("hi!");
        java.lang.String str82 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray81);
        boolean boolean83 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray81);
        java.math.BigInteger bigInteger84 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray81);
        java.lang.String str85 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray81);
        byte[] byteArray86 = base64_51.decode(byteArray81);
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86, false, false);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray90);
        org.apache.commons.codec.binary.Base64 base64_92 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray90);
        byte[] byteArray93 = base64_6.encode(byteArray90);
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray90);
        org.apache.commons.codec.binary.Base64 base64_96 = new org.apache.commons.codec.binary.Base64(0, byteArray94, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "aGc" + "'", str37, "aGc");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ufffd" + "'", str40, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ufffd" + "'", str48, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hg" + "'", str55, "hg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "aGc=\r\n" + "'", str60, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hg" + "'", str64, "hg");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hg" + "'", str72, "hg");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-122]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "aGc=\r\n" + "'", str78, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-122]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hg" + "'", str82, "hg");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hg" + "'", str85, "hg");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        byte[] byteArray12 = base64_1.decode("");
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray15);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true);
        java.lang.String str20 = base64_1.encodeToString(byteArray19);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc9PQ0K\r\n" + "'", str20, "aGc9PQ0K\r\n");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = base64_6.encode(byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true, false);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, false, (int) (short) 100);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray8, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray7);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        java.lang.String str13 = base64_4.encodeToString(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        byte[] byteArray21 = base64_4.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray25);
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        byte[] byteArray32 = base64_27.decode(byteArray30);
        java.lang.Object obj33 = base64_4.decode((java.lang.Object) byteArray30);
        byte[] byteArray34 = base64_2.decode(byteArray30);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64("\ufffd");
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        java.lang.Object obj39 = base64_2.decode((java.lang.Object) byteArray38);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "aGc=\r\n" + "'", str13, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hg" + "'", str17, "hg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (6) than the specified maxium size of -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        boolean boolean28 = base64_6.isUrlSafe();
        boolean boolean29 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray33);
        boolean boolean36 = base64_35.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true);
        byte[] byteArray46 = base64_35.decode(byteArray45);
        byte[] byteArray47 = base64_6.encode(byteArray45);
        java.lang.Class<?> wildcardClass48 = byteArray45.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hg" + "'", str40, "hg");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[97, 71, 99, 57, 80, 81, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[89, 85, 100, 106, 79, 86, 66, 82, 68, 81, 111]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.lang.String str16 = base64_7.encodeToString(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = base64_7.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false);
        java.lang.String str34 = base64_7.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray42 = base64_7.decode(byteArray37);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false);
        java.lang.Object obj46 = base64_5.encode((java.lang.Object) byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        java.lang.String str48 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray45);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, true, true, (int) (byte) 0);
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray50);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "aGc=\r\n" + "'", str16, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "aGc=\r\n" + "'", str34, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = base64_6.decode(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64(1, byteArray9);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        byte[] byteArray17 = base64_6.decode(byteArray15);
        boolean boolean18 = base64_6.isUrlSafe();
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        byte[] byteArray26 = base64_6.encode(byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, false, (int) ' ');
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[87, 86, 86, 107, 97, 108, 66, 82, 80, 84, 48, 78, 67, 103, 61, 61]");
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, true, true);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 57, 80, 81, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[89, 85, 100, 106, 79, 86, 66, 82, 80, 84, 48, 61]");
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64(0, byteArray3, true);
        boolean boolean8 = base64_7.isUrlSafe();
        byte[] byteArray10 = base64_7.decode("aGc=\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14, true);
        byte[] byteArray19 = base64_17.decode("hg==\r\n");
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray26 = base64_17.decode(byteArray22);
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, true);
        java.lang.String str31 = base64_7.encodeToString(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray35 = base64_33.decode("hi!");
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64((-1), byteArray35, true);
        byte[] byteArray40 = base64_38.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        java.math.BigInteger bigInteger45 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray43);
        java.lang.Object obj46 = base64_38.encode((java.lang.Object) byteArray43);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray49 = base64_47.decode("hi!");
        java.lang.String str50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        java.lang.String str52 = base64_38.encodeToString(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray56 = base64_54.decode("hi!");
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray56);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray56);
        byte[] byteArray59 = base64_38.decode(byteArray56);
        byte[] byteArray61 = base64_38.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray65 = base64_63.decode("hi!");
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray65);
        org.apache.commons.codec.binary.Base64 base64_67 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray65);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray65);
        java.lang.Object obj69 = base64_38.decode((java.lang.Object) byteArray65);
        java.lang.Object obj70 = base64_7.encode((java.lang.Object) byteArray65);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hg" + "'", str44, "hg");
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hg" + "'", str50, "hg");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "aGc" + "'", str52, "aGc");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-122]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[104, 103]");
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNotNull(obj70);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 1);
        byte[] byteArray3 = base64_1.decode("YUdjOVBRMEs");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray7);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, true);
        byte[] byteArray14 = base64_1.encode(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hg" + "'", str10, "hg");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[97, 71, 99]");
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((-1), byteArray1);
        boolean boolean3 = base64_2.isUrlSafe();
        byte[] byteArray5 = base64_2.decode("\ufffd");
        java.lang.Class<?> wildcardClass6 = base64_2.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        byte[] byteArray19 = base64_8.decode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray25 = base64_20.decode(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.Object obj29 = base64_8.decode((java.lang.Object) byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.lang.Object obj31 = base64_1.encode((java.lang.Object) byteArray30);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 78, 67, 103, 61, 61]");
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        boolean boolean28 = base64_6.isUrlSafe();
        boolean boolean29 = base64_6.isUrlSafe();
        boolean boolean30 = base64_6.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = base64_0.decode(byteArray27);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        java.lang.String str36 = base64_0.encodeToString(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray40);
        boolean boolean43 = base64_42.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        boolean boolean48 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray46);
        java.math.BigInteger bigInteger49 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray46);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, true, false, (int) (short) 100);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, false, false);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false);
        byte[] byteArray64 = base64_42.encode(byteArray61);
        java.lang.Object obj65 = base64_0.encode((java.lang.Object) byteArray61);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hg" + "'", str47, "hg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(bigInteger49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[87, 86, 86, 107, 97, 108, 66, 82, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[86, 49, 90, 87, 97, 50, 70, 115, 81, 108, 74, 81, 86, 68, 66, 79, 81, 50, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[86, 49, 90, 87, 97, 50, 70, 115, 81, 108, 74, 81, 86, 68, 66, 79, 81, 50, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(obj65);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3, false);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(false);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger14);
        byte[] byteArray17 = base64_10.decode(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, true, false);
        java.lang.String str21 = base64_8.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) (short) 1);
        byte[] byteArray25 = base64_23.decode("YUdjOVBRMEs");
        java.lang.Object obj26 = base64_8.decode((java.lang.Object) byteArray25);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(obj26);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray15);
        java.lang.Object obj18 = base64_7.encode((java.lang.Object) byteArray15);
        byte[] byteArray19 = null;
        byte[] byteArray20 = base64_7.encode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        boolean boolean29 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray28);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, true);
        java.lang.Object obj32 = base64_7.encode((java.lang.Object) byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64(100, byteArray31, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/wo=\r\n" + "'", str17, "/wo=\r\n");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(obj32);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3, false);
        boolean boolean8 = base64_7.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((-1), byteArray12, true);
        byte[] byteArray17 = base64_15.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.lang.Object obj23 = base64_15.encode((java.lang.Object) byteArray20);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        java.lang.String str29 = base64_15.encodeToString(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray33);
        byte[] byteArray36 = base64_15.decode(byteArray33);
        byte[] byteArray38 = base64_15.decode("hi!");
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger44);
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        byte[] byteArray47 = base64_15.decode(byteArray45);
        byte[] byteArray48 = base64_7.decode(byteArray45);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false, true, (int) (short) 100);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "aGc" + "'", str29, "aGc");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (14) than the specified maxium size of 1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "aGc9PQ==\r\n" + "'", str5, "aGc9PQ==\r\n");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[97, 71, 99, 57, 80, 81, 61, 61]");
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        java.lang.Class<?> wildcardClass27 = bigInteger25.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, true);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray7, false);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        byte[] byteArray9 = base64_0.encode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray12);
        byte[] byteArray15 = base64_0.decode(byteArray12);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg==\r\n" + "'", str14, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        boolean boolean2 = base64_1.isUrlSafe();
        boolean boolean3 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray7);
        byte[] byteArray10 = base64_1.encode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15, true);
        byte[] byteArray20 = base64_18.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        java.lang.Object obj26 = base64_18.encode((java.lang.Object) byteArray23);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        java.lang.String str32 = base64_18.encodeToString(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray36);
        byte[] byteArray39 = base64_18.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray36, false);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        java.lang.String str43 = base64_1.encodeToString(byteArray42);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hg" + "'", str30, "hg");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "aGc" + "'", str32, "aGc");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "aGc\r\n" + "'", str43, "aGc\r\n");
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((-1), byteArray20, true);
        byte[] byteArray25 = base64_23.decode("hg==\r\n");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray32 = base64_23.decode(byteArray28);
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        java.lang.String str34 = base64_16.encodeToString(byteArray32);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64(0, byteArray2, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = base64_13.encode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64(0, byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((-1), byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray29 = base64_21.decode(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        java.lang.String str31 = base64_4.encodeToString(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray35 = base64_33.decode("hi!");
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, true, true);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        java.lang.String str44 = base64_4.encodeToString(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray49 = base64_47.decode("hi!");
        java.lang.String str50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        boolean boolean51 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray49);
        java.math.BigInteger bigInteger52 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray53);
        java.lang.String str55 = base64_46.encodeToString(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray58 = base64_56.decode("hi!");
        java.lang.String str59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray58);
        boolean boolean60 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray58);
        java.math.BigInteger bigInteger61 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray58);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        byte[] byteArray63 = base64_46.decode(byteArray58);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray58);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray64);
        java.lang.String str66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray64);
        byte[] byteArray67 = base64_4.encode(byteArray64);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hg" + "'", str50, "hg");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "aGc=\r\n" + "'", str55, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hg" + "'", str59, "hg");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-122]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "aGc9PQ0K" + "'", str66, "aGc9PQ0K");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        java.lang.String str22 = base64_13.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        byte[] byteArray30 = base64_13.decode(byteArray25);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false);
        byte[] byteArray35 = base64_0.decode(byteArray25);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hg" + "'", str17, "hg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "aGc=\r\n" + "'", str22, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hg" + "'", str26, "hg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (byte) 10, byteArray8, false);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray8, true);
        boolean boolean13 = base64_12.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((-1), byteArray19, true);
        byte[] byteArray24 = base64_22.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        boolean boolean29 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        boolean boolean32 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        byte[] byteArray33 = base64_22.decode(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray39 = base64_34.decode(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray41);
        java.lang.Object obj43 = base64_22.decode((java.lang.Object) byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray42);
        java.lang.Object obj45 = base64_15.encode((java.lang.Object) byteArray44);
        byte[] byteArray47 = base64_15.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        java.lang.String str51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray50);
        boolean boolean52 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray50);
        java.math.BigInteger bigInteger53 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray50);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray54);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54);
        java.lang.String str57 = base64_15.encodeToString(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = base64_58.decode("hi!");
        java.lang.String str61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray60);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray60);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, false);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, true);
        byte[] byteArray67 = base64_15.decode(byteArray66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray68, false, false);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray68);
        java.lang.Object obj73 = base64_12.encode((java.lang.Object) byteArray72);
        java.lang.Object obj74 = base64_1.decode((java.lang.Object) byteArray72);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hg" + "'", str51, "hg");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "aGc=\r\n" + "'", str57, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hg" + "'", str61, "hg");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[97, 71, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[97, 71, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(obj74);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        byte[] byteArray17 = base64_7.decode("aGc=\r\n");
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99]");
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64(0, byteArray2, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = base64_13.encode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64(0, byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((-1), byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray29 = base64_21.decode(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        java.lang.String str31 = base64_4.encodeToString(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray35 = base64_33.decode("hi!");
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, true, true);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        java.lang.String str44 = base64_4.encodeToString(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray50);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray56 = base64_54.decode("hi!");
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray56);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64((-1), byteArray56, true);
        byte[] byteArray61 = base64_59.decode("hg==\r\n");
        byte[] byteArray62 = base64_52.encode(byteArray61);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = base64_64.decode("hi!");
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64((-1), byteArray66, true);
        byte[] byteArray71 = base64_69.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray74 = base64_72.decode("hi!");
        java.lang.String str75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray74);
        java.math.BigInteger bigInteger76 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray74);
        java.lang.Object obj77 = base64_69.encode((java.lang.Object) byteArray74);
        org.apache.commons.codec.binary.Base64 base64_78 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray80 = base64_78.decode("hi!");
        java.lang.String str81 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray80);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray80);
        java.lang.String str83 = base64_69.encodeToString(byteArray82);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, false);
        java.lang.String str86 = base64_52.encodeToString(byteArray82);
        org.apache.commons.codec.binary.Base64 base64_87 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_88 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray90 = base64_88.decode("hi!");
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray90);
        byte[] byteArray92 = base64_87.decode(byteArray91);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray91);
        java.lang.String str94 = base64_52.encodeToString(byteArray93);
        byte[] byteArray95 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray93);
        java.lang.Object obj96 = base64_46.decode((java.lang.Object) byteArray93);
        java.math.BigInteger bigInteger97 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray93);
        byte[] byteArray98 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger97);
        java.lang.String str99 = base64_4.encodeToString(byteArray98);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-122]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hg" + "'", str75, "hg");
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-122]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hg" + "'", str81, "hg");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "aGc" + "'", str83, "aGc");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\ufffd" + "'", str86, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-122]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-122]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "\ufffd" + "'", str94, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(obj96);
        org.junit.Assert.assertNotNull(bigInteger97);
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "YUdjPQ" + "'", str99, "YUdjPQ");
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        boolean boolean25 = base64_16.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((-1), byteArray30, true);
        byte[] byteArray35 = base64_33.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        byte[] byteArray39 = base64_33.encode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(0, byteArray38);
        byte[] byteArray41 = null;
        byte[] byteArray42 = base64_40.encode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray48 = base64_43.decode(byteArray47);
        byte[] byteArray49 = base64_40.encode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        boolean boolean56 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray54);
        java.math.BigInteger bigInteger57 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray58);
        java.lang.String str60 = base64_51.encodeToString(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray63 = base64_61.decode("hi!");
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray63);
        boolean boolean65 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray63);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray63);
        byte[] byteArray68 = base64_51.decode(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray71 = base64_69.decode("hi!");
        java.lang.String str72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray73);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false, false);
        java.lang.String str78 = base64_51.encodeToString(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_80 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray82 = base64_80.decode("hi!");
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray82);
        org.apache.commons.codec.binary.Base64 base64_84 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray82);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, false);
        java.lang.String str87 = base64_51.encodeToString(byteArray82);
        byte[] byteArray88 = base64_40.encode(byteArray82);
        byte[] byteArray89 = base64_16.decode(byteArray88);
        boolean boolean90 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray88);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hg" + "'", str55, "hg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "aGc=\r\n" + "'", str60, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hg" + "'", str64, "hg");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hg" + "'", str72, "hg");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-122]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "aGc=\r\n" + "'", str78, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-122]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hg==\r\n" + "'", str87, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        byte[] byteArray3 = base64_1.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray9 = base64_1.encode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, true, false);
        java.lang.String str17 = base64_1.encodeToString(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "aGc9PQ0K\r\n" + "'", str17, "aGc9PQ0K\r\n");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        byte[] byteArray17 = base64_6.decode(byteArray15);
        boolean boolean18 = base64_6.isUrlSafe();
        byte[] byteArray20 = base64_6.decode("aGc9PQ");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103, 61, 61]");
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false);
        java.lang.String str28 = base64_1.encodeToString(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray36 = base64_1.decode(byteArray31);
        byte[] byteArray38 = null;
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(10, byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((-1), byteArray43, true);
        byte[] byteArray48 = base64_46.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray51);
        java.math.BigInteger bigInteger53 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray51);
        java.lang.Object obj54 = base64_46.encode((java.lang.Object) byteArray51);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray57 = base64_55.decode("hi!");
        java.lang.String str58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray57);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray57);
        java.lang.String str60 = base64_46.encodeToString(byteArray59);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false);
        byte[] byteArray63 = base64_39.decode(byteArray59);
        byte[] byteArray64 = base64_1.encode(byteArray59);
        boolean boolean65 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray64);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "aGc=\r\n" + "'", str28, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hg" + "'", str52, "hg");
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hg" + "'", str58, "hg");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "aGc" + "'", str60, "aGc");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(false);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((-1), byteArray8, true);
        byte[] byteArray13 = base64_11.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        byte[] byteArray17 = base64_11.encode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(0, byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((-1), byteArray16);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        byte[] byteArray27 = base64_19.decode(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        java.lang.Object obj29 = base64_2.encode((java.lang.Object) byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray27, false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, true, (int) '4');
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "aGc9PQ==\r\n" + "'", str5, "aGc9PQ==\r\n");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[97, 71, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 57, 80, 81, 13, 10]");
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        byte[] byteArray3 = base64_1.decode("hg");
        boolean boolean4 = base64_1.isUrlSafe();
        java.lang.Class<?> wildcardClass5 = base64_1.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray6 = base64_1.decode(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64(0, byteArray11, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc=??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 71, 99, 61, 13, 10]");
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        boolean boolean15 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((-1), byteArray21, true);
        byte[] byteArray26 = base64_24.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        byte[] byteArray30 = base64_24.encode(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64(0, byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((-1), byteArray29);
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        byte[] byteArray40 = base64_32.decode(byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, true, true, (int) (byte) 100);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false);
        byte[] byteArray48 = base64_6.decode(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false, false);
        java.lang.Class<?> wildcardClass26 = byteArray25.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3, false);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        byte[] byteArray12 = base64_7.decode(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        byte[] byteArray17 = base64_6.decode(byteArray16);
        java.lang.Class<?> wildcardClass18 = byteArray17.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100, (byte) 100, (byte) 1 };
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        boolean boolean3 = base64_0.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        byte[] byteArray10 = base64_0.encode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15, true);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        java.lang.String str23 = base64_18.encodeToString(byteArray21);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, true);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64(1, byteArray21);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        java.lang.Object obj29 = base64_0.encode((java.lang.Object) byteArray21);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("hg");
        java.lang.String str2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (6) than the specified maxium size of 1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-122]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hg" + "'", str2, "hg");
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.lang.String str16 = base64_7.encodeToString(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = base64_7.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false);
        java.lang.String str34 = base64_7.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray42 = base64_7.decode(byteArray37);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false);
        java.lang.Object obj46 = base64_5.encode((java.lang.Object) byteArray45);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray50);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray54);
        byte[] byteArray56 = base64_5.decode(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray61);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray61);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray61);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray64);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray64, true, true);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray64);
        java.lang.String str70 = base64_5.encodeToString(byteArray64);
        byte[] byteArray72 = base64_5.decode("YUdjOVBRMEs");
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray75 = base64_73.decode("hi!");
        java.lang.String str76 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray75);
        boolean boolean77 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray75);
        java.math.BigInteger bigInteger78 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray75);
        java.lang.String str79 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj80 = base64_5.encode((java.lang.Object) str79);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "aGc=\r\n" + "'", str16, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "aGc=\r\n" + "'", str34, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-122]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hg" + "'", str76, "hg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(bigInteger78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hg" + "'", str79, "hg");
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        byte[] byteArray22 = base64_6.decode("hg==");
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray25);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray25);
        boolean boolean29 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        java.lang.String str32 = base64_6.encodeToString(byteArray25);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg==\r\n" + "'", str27, "hg==\r\n");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg==\r\n" + "'", str28, "hg==\r\n");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("WVVkalBRMEsNCg");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, true, true, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (26) than the specified maxium size of -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 78, 67, 103, 13, 10]");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray25 = base64_16.encode(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray28 = base64_5.encode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray39 = base64_5.encode(byteArray37);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[89, 85, 100, 106, 80, 89, 89, 61]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[89, 85, 100, 106, 80, 89, 89]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "YUdjPYY" + "'", str43, "YUdjPYY");
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("aGc=");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[97, 71, 99]");
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray4);
        byte[] byteArray8 = base64_6.decode("aGc9PQ");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg==]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 61, 61]");
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        byte[] byteArray7 = base64_5.decode("\ufffd");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61, 13, 10]");
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false);
        java.lang.String str28 = base64_1.encodeToString(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray36 = base64_1.decode(byteArray31);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "aGc=\r\n" + "'", str28, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        java.lang.String str22 = base64_13.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        byte[] byteArray30 = base64_13.decode(byteArray25);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false);
        byte[] byteArray35 = base64_0.decode(byteArray25);
        byte[] byteArray37 = base64_0.decode("");
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hg" + "'", str17, "hg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "aGc=\r\n" + "'", str22, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hg" + "'", str26, "hg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = base64_6.decode(byteArray11);
        boolean boolean16 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray23);
        byte[] byteArray25 = base64_6.encode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        boolean boolean32 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray30);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray34);
        byte[] byteArray36 = base64_27.encode(byteArray34);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64(1, byteArray37);
        byte[] byteArray39 = base64_6.decode(byteArray37);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray25 = base64_16.encode(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray28 = base64_5.encode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray39 = base64_5.encode(byteArray37);
        byte[] byteArray40 = null;
        byte[] byteArray41 = base64_5.decode(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44);
        java.lang.Object obj48 = base64_5.encode((java.lang.Object) byteArray47);
        java.lang.String str49 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray47);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61, -122]");
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hg" + "'", str45, "hg");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "aGc9PQ==\r\n" + "'", str49, "aGc9PQ==\r\n");
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, true, true);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        java.lang.Object obj15 = base64_1.decode((java.lang.Object) byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14);
        java.lang.Class<?> wildcardClass17 = byteArray14.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc=]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(bigInteger14);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        boolean boolean25 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray23);
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray28);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.lang.String str31 = base64_6.encodeToString(byteArray28);
        byte[] byteArray33 = base64_6.decode("YUdjPQ0K");
        byte[] byteArray35 = base64_6.decode("V1ZWa2FrOVdRbEk9");
        byte[] byteArray37 = base64_6.decode("\ufffd");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "YUdjPQ0K\r\n" + "'", str29, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "YUdjPQ0K" + "'", str31, "YUdjPQ0K");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[87, 86, 86, 107, 97, 107, 57, 87, 81, 108, 73, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[97, 71, 99, 61, 13, 10]");
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        boolean boolean2 = base64_1.isUrlSafe();
        boolean boolean3 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray7);
        byte[] byteArray10 = base64_1.encode(byteArray7);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(0, byteArray7, true);
        byte[] byteArray12 = base64_1.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        java.lang.Object obj22 = base64_1.encode((java.lang.Object) byteArray19);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        byte[] byteArray30 = base64_1.decode(byteArray28);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        java.lang.String str37 = base64_1.encodeToString(byteArray36);
        byte[] byteArray39 = null;
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(10, byteArray39);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((-1), byteArray44, true);
        byte[] byteArray49 = base64_47.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = base64_50.decode("hi!");
        java.lang.String str53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray52);
        java.math.BigInteger bigInteger54 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray52);
        java.lang.Object obj55 = base64_47.encode((java.lang.Object) byteArray52);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray58 = base64_56.decode("hi!");
        java.lang.String str59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray58);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        java.lang.String str61 = base64_47.encodeToString(byteArray60);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, false);
        byte[] byteArray64 = base64_40.decode(byteArray60);
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray68 = base64_66.decode("hi!");
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray68);
        byte[] byteArray70 = base64_65.decode(byteArray69);
        java.lang.Object obj71 = base64_40.encode((java.lang.Object) byteArray70);
        byte[] byteArray72 = base64_1.decode(byteArray70);
        org.apache.commons.codec.binary.Base64 base64_74 = new org.apache.commons.codec.binary.Base64((int) (byte) 10, byteArray72, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hg" + "'", str53, "hg");
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hg" + "'", str59, "hg");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "aGc" + "'", str61, "aGc");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-122]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-122]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-122]");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 1);
        byte[] byteArray3 = base64_1.decode("YUdjOVBRMEs");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray7);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, true);
        byte[] byteArray14 = base64_1.encode(byteArray13);
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hg" + "'", str10, "hg");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "aGc" + "'", str15, "aGc");
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray18);
        byte[] byteArray20 = base64_9.decode(byteArray18);
        boolean boolean21 = base64_9.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        java.lang.String str27 = base64_23.encodeToString(byteArray26);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, true, (int) (byte) 100);
        byte[] byteArray32 = base64_9.encode(byteArray31);
        byte[] byteArray33 = base64_2.encode(byteArray31);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64("aGc=\r\n");
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        java.lang.String str37 = base64_2.encodeToString(byteArray36);
        boolean boolean38 = base64_2.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        byte[] byteArray44 = base64_39.decode(byteArray43);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray43);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false, false);
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray51);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false, (int) (byte) 100);
        byte[] byteArray57 = base64_2.decode(byteArray51);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg==" + "'", str37, "hg==");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "WVVkalBRPT0=\r\n" + "'", str52, "WVVkalBRPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[87, 86, 86, 107, 97, 108, 66, 82, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[97, 71, 99, 61]");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(1, byteArray9);
        byte[] byteArray12 = base64_10.decode("aGc9PYY=");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64("WVVkalBRPT0NCg");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.lang.Object obj16 = base64_10.decode((java.lang.Object) byteArray15);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[87, 86, 86, 107, 97, 108, 66, 82, 80, 84, 48, 78, 67, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[86, 49, 90, 87, 97, 50, 70, 115, 81, 108, 74, 81, 86, 68, 66, 79, 81, 50, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        boolean boolean7 = base64_6.isUrlSafe();
        boolean boolean8 = base64_6.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray9);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray3);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, true);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(bigInteger13);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.lang.String str16 = base64_7.encodeToString(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = base64_7.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false);
        java.lang.String str34 = base64_7.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray42 = base64_7.decode(byteArray37);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false);
        java.lang.Object obj46 = base64_5.encode((java.lang.Object) byteArray45);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray53 = base64_51.decode("hi!");
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((-1), byteArray53, true);
        byte[] byteArray58 = base64_56.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        byte[] byteArray62 = base64_56.encode(byteArray61);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64(0, byteArray61);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((-1), byteArray61);
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64(10, byteArray61);
        java.lang.String str66 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray61);
        byte[] byteArray67 = base64_5.decode(byteArray61);
        byte[] byteArray69 = base64_5.decode("YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "aGc=\r\n" + "'", str16, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "aGc=\r\n" + "'", str34, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hg==\r\n" + "'", str66, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[97, 71, 99, 61, 13, 10]");
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((-1), byteArray12, true);
        byte[] byteArray17 = base64_15.decode("hg==\r\n");
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray24 = base64_15.decode(byteArray20);
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger26);
        byte[] byteArray28 = base64_8.encode(byteArray27);
        byte[] byteArray30 = base64_8.decode("");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        byte[] byteArray10 = base64_1.encode(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray8);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true, (int) ' ');
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(10, byteArray11);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray6, false);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13, true);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        java.lang.String str26 = base64_16.encodeToString(byteArray25);
        byte[] byteArray27 = base64_9.encode(byteArray25);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "aGc9PQ0K" + "'", str26, "aGc9PQ0K");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        byte[] byteArray21 = base64_2.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray25 = base64_23.decode("\ufffd");
        java.lang.Object obj26 = base64_2.decode((java.lang.Object) byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64(10, byteArray25);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc=??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj26);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        byte[] byteArray17 = base64_6.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray23 = base64_18.decode(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        java.lang.Object obj27 = base64_6.decode((java.lang.Object) byteArray26);
        byte[] byteArray29 = base64_6.decode("YUdjPQ0K\r\n");
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray29);
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "WVVkalBRMEsNCg" + "'", str31, "WVVkalBRMEsNCg");
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray4 = base64_0.decode("YUdjPQ0K\r\n");
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(bigInteger6);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray5 = base64_0.decode(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        java.math.BigInteger bigInteger2 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray18);
        byte[] byteArray20 = base64_9.decode(byteArray18);
        boolean boolean21 = base64_9.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        java.lang.String str27 = base64_23.encodeToString(byteArray26);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, true, (int) (byte) 100);
        byte[] byteArray32 = base64_9.encode(byteArray31);
        byte[] byteArray33 = base64_2.encode(byteArray31);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64("aGc=\r\n");
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        java.lang.String str37 = base64_2.encodeToString(byteArray36);
        boolean boolean38 = base64_2.isUrlSafe();
        byte[] byteArray40 = base64_2.decode("YUdjOVBRMEs");
        java.lang.Class<?> wildcardClass41 = base64_2.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg==" + "'", str37, "hg==");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("WVVkag0K");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[89, 85, 100, 106, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[87, 86, 86, 107, 97, 103, 48, 75, 13, 10]");
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        byte[] byteArray9 = base64_0.encode(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, true, (int) (byte) 100);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64(1, byteArray24, true);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        boolean boolean44 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64(0, byteArray42, true);
        byte[] byteArray47 = base64_36.decode(byteArray42);
        boolean boolean48 = base64_36.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54);
        java.lang.String str56 = base64_49.encodeToString(byteArray55);
        byte[] byteArray57 = base64_36.decode(byteArray55);
        byte[] byteArray58 = base64_35.decode(byteArray57);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj61 = base64_5.decode((java.lang.Object) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hg" + "'", str43, "hg");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "aGc9PQ==" + "'", str56, "aGc9PQ==");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[104, 103]");
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64(0, byteArray3, true);
        boolean boolean8 = base64_7.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((-1), byteArray12, true);
        byte[] byteArray17 = base64_15.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.lang.Object obj23 = base64_15.encode((java.lang.Object) byteArray20);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        java.lang.String str29 = base64_15.encodeToString(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray33);
        byte[] byteArray36 = base64_15.decode(byteArray33);
        byte[] byteArray38 = base64_15.decode("hi!");
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger44);
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        byte[] byteArray47 = base64_15.decode(byteArray45);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        java.math.BigInteger bigInteger50 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger50);
        java.lang.String str52 = base64_7.encodeToString(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        boolean boolean61 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64(0, byteArray59, true);
        byte[] byteArray64 = base64_53.decode(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray67 = base64_65.decode("hi!");
        java.lang.String str68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray67);
        boolean boolean69 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray67);
        java.math.BigInteger bigInteger70 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray67);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray67);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        java.lang.Object obj74 = base64_53.encode((java.lang.Object) byteArray71);
        byte[] byteArray77 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger78 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray77);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger78);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray79);
        java.lang.String str81 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray80);
        byte[] byteArray82 = base64_53.decode(byteArray80);
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray82);
        java.lang.String str84 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray83);
        java.lang.Object obj85 = base64_7.encode((java.lang.Object) byteArray83);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "aGc" + "'", str29, "aGc");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hg" + "'", str68, "hg");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(bigInteger70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(obj85);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray9);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg==\r\n" + "'", str15, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hg" + "'", str17, "hg");
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray3 = base64_1.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray9);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray16 = base64_11.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((-1), byteArray20, true);
        byte[] byteArray25 = base64_23.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.lang.Object obj31 = base64_23.encode((java.lang.Object) byteArray28);
        java.lang.String str32 = base64_11.encodeToString(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64(100, byteArray28);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray36);
        java.lang.String str38 = base64_1.encodeToString(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = base64_39.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray45);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64(0, byteArray45, true);
        byte[] byteArray50 = base64_39.decode(byteArray45);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        java.lang.String str56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        boolean boolean57 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray55);
        java.math.BigInteger bigInteger58 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray55);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray59);
        java.lang.String str61 = base64_52.encodeToString(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray64 = base64_62.decode("hi!");
        java.lang.String str65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray64);
        boolean boolean66 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray64);
        java.math.BigInteger bigInteger67 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray64);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray64);
        byte[] byteArray69 = base64_52.decode(byteArray64);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray64);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray64, false, false);
        byte[] byteArray74 = base64_39.decode(byteArray64);
        byte[] byteArray76 = base64_39.decode("");
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray76);
        byte[] byteArray78 = base64_1.decode(byteArray77);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray79, true, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd" + "'", str32, "\ufffd");
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hg" + "'", str56, "hg");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "aGc=\r\n" + "'", str61, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-122]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hg" + "'", str65, "hg");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(bigInteger67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = base64_7.encode(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray12);
        byte[] byteArray15 = null;
        byte[] byteArray16 = base64_14.encode(byteArray15);
        byte[] byteArray18 = base64_14.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26);
        byte[] byteArray30 = base64_14.decode(byteArray26);
        boolean boolean31 = base64_14.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        byte[] byteArray17 = base64_6.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false, (int) (short) -1);
        java.lang.String str34 = base64_6.encodeToString(byteArray29);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        byte[] byteArray16 = base64_6.encode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((-1), byteArray20, true);
        byte[] byteArray25 = base64_23.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.lang.Object obj31 = base64_23.encode((java.lang.Object) byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.String str37 = base64_23.encodeToString(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        java.lang.String str40 = base64_6.encodeToString(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray46 = base64_41.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        java.lang.String str48 = base64_6.encodeToString(byteArray47);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = base64_50.decode("hi!");
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray52);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray52);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray52);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        java.lang.Object obj57 = base64_6.decode((java.lang.Object) byteArray55);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray55, true);
        boolean boolean60 = base64_59.isUrlSafe();
        boolean boolean61 = base64_59.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "aGc" + "'", str37, "aGc");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ufffd" + "'", str40, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ufffd" + "'", str48, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((-1), byteArray16, true);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        java.lang.String str24 = base64_19.encodeToString(byteArray22);
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22);
        java.lang.String str27 = base64_7.encodeToString(byteArray26);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg==]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hg" + "'", str25, "hg");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "aGc9PQ" + "'", str27, "aGc9PQ");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.decodeBase64("\ufffd");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray5 = base64_1.decode(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray2 = null;
        byte[] byteArray3 = base64_1.decode(byteArray2);
        boolean boolean4 = base64_1.isUrlSafe();
        org.junit.Assert.assertNull(byteArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray2);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 61]");
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("WVVkalBRPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[89, 85, 100, 106, 80, 81, 61, 61]");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        byte[] byteArray3 = base64_1.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray9 = base64_1.encode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, true, false);
        java.lang.String str17 = base64_1.encodeToString(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "aGc9PQ0K\r\n" + "'", str17, "aGc9PQ0K\r\n");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray5 = base64_0.decode(byteArray4);
        byte[] byteArray7 = base64_0.decode("");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13, true);
        byte[] byteArray18 = base64_16.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = base64_16.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64(0, byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((-1), byteArray21);
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray29);
        byte[] byteArray32 = base64_24.decode(byteArray31);
        byte[] byteArray34 = base64_24.decode("hg==");
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        java.lang.Object obj36 = base64_0.encode((java.lang.Object) byteArray34);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray40);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray48 = base64_46.decode("hi!");
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((-1), byteArray48, true);
        byte[] byteArray53 = base64_51.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray56 = base64_54.decode("hi!");
        byte[] byteArray57 = base64_51.encode(byteArray56);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64(0, byteArray56);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64((-1), byteArray56);
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger63 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray62);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray62);
        java.math.BigInteger bigInteger65 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray62);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger65);
        byte[] byteArray67 = base64_59.decode(byteArray66);
        java.math.BigInteger bigInteger68 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray66);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger68);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69);
        byte[] byteArray71 = base64_42.encode(byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj72 = base64_0.encode((java.lang.Object) base64_42);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(bigInteger65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        byte[] byteArray29 = base64_6.decode("hi!");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = base64_6.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((-1), byteArray42, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42);
        java.lang.Object obj47 = base64_6.encode((java.lang.Object) byteArray42);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray53 = base64_51.decode("hi!");
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((-1), byteArray53, true);
        byte[] byteArray58 = base64_56.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        byte[] byteArray62 = base64_56.encode(byteArray61);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64(0, byteArray61);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((-1), byteArray61);
        byte[] byteArray67 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger68 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray67);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger68);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray69);
        byte[] byteArray72 = base64_64.decode(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray72);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray72, true, true, (int) (byte) 100);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, false);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray77);
        java.math.BigInteger bigInteger81 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray80);
        java.lang.Object obj82 = base64_6.decode((java.lang.Object) byteArray80);
        boolean boolean83 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray80);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(bigInteger81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray5);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray8, false);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray8, false);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.decodeBase64("\ufffd");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        java.lang.Object obj21 = base64_17.encode((java.lang.Object) byteArray19);
        byte[] byteArray23 = null;
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64(10, byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((-1), byteArray28, true);
        byte[] byteArray33 = base64_31.decode("hg==\r\n");
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray40 = base64_31.decode(byteArray36);
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray43 = base64_24.decode(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        java.lang.String str51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray50);
        boolean boolean52 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64(0, byteArray50, true);
        byte[] byteArray55 = base64_44.decode(byteArray50);
        java.lang.String str56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        java.lang.String str57 = base64_24.encodeToString(byteArray55);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        java.lang.String str63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray62);
        boolean boolean64 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray62);
        java.math.BigInteger bigInteger65 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray62);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray66);
        java.lang.String str68 = base64_59.encodeToString(byteArray66);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray71 = base64_69.decode("hi!");
        java.lang.String str72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        boolean boolean73 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray71);
        java.math.BigInteger bigInteger74 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray71);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray76 = base64_59.decode(byteArray71);
        byte[] byteArray78 = base64_59.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_80 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray82 = base64_80.decode("\ufffd");
        java.lang.Object obj83 = base64_59.decode((java.lang.Object) byteArray82);
        byte[] byteArray84 = base64_24.encode(byteArray82);
        java.lang.String str85 = base64_17.encodeToString(byteArray82);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[90, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[87, 107, 70, 66, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hg" + "'", str51, "hg");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hg" + "'", str63, "hg");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(bigInteger65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "aGc=\r\n" + "'", str68, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hg" + "'", str72, "hg");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[89, 85, 100, 106, 80, 81, 48, 75]");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "YUdjPQ0K" + "'", str85, "YUdjPQ0K");
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false, false);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 61]");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[89, 85, 100, 106, 80, 81, 48, 75]");
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64(100, byteArray1, true);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((-1), byteArray7, true);
        byte[] byteArray12 = base64_10.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        boolean boolean20 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        byte[] byteArray21 = base64_10.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        byte[] byteArray27 = base64_22.decode(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        java.lang.Object obj31 = base64_10.decode((java.lang.Object) byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray30);
        java.lang.Object obj33 = base64_3.decode((java.lang.Object) byteArray32);
        boolean boolean34 = base64_3.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        java.lang.String str20 = base64_11.encodeToString(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        boolean boolean25 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray23);
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray28 = base64_11.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray32);
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        byte[] byteArray39 = base64_34.decode(byteArray37);
        java.lang.Object obj40 = base64_11.decode((java.lang.Object) byteArray37);
        java.lang.Object obj41 = base64_9.encode((java.lang.Object) byteArray37);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray46);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, true, true);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray49, false);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray58 = base64_56.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        java.lang.String str63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray62);
        boolean boolean64 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray62);
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64(0, byteArray62, true);
        byte[] byteArray67 = base64_56.decode(byteArray62);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray70 = base64_68.decode("hi!");
        java.lang.String str71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray70);
        boolean boolean72 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray70);
        java.math.BigInteger bigInteger73 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray70);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray74);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray74);
        java.lang.Object obj77 = base64_56.encode((java.lang.Object) byteArray74);
        java.lang.Object obj78 = base64_55.encode((java.lang.Object) byteArray74);
        byte[] byteArray80 = base64_55.decode("YUdjPQ0K");
        byte[] byteArray81 = base64_9.decode(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_82 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc=\r\n" + "'", str20, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hg" + "'", str63, "hg");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-122]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hg" + "'", str71, "hg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(bigInteger73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[104, 103]");
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(0, byteArray7, true);
        byte[] byteArray12 = base64_1.decode(byteArray7);
        boolean boolean13 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19);
        java.lang.String str21 = base64_14.encodeToString(byteArray20);
        byte[] byteArray22 = base64_1.decode(byteArray20);
        byte[] byteArray24 = base64_1.decode("");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray24, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc9PQ==" + "'", str21, "aGc9PQ==");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray2 = null;
        byte[] byteArray3 = base64_1.decode(byteArray2);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray10, true);
        byte[] byteArray15 = base64_4.decode(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        boolean boolean20 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray18);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        java.lang.Object obj25 = base64_4.encode((java.lang.Object) byteArray22);
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray30);
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray33 = base64_4.decode(byteArray31);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray38);
        java.lang.String str40 = base64_4.encodeToString(byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray39);
        java.lang.Object obj42 = base64_1.encode((java.lang.Object) byteArray39);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, true, true);
        org.junit.Assert.assertNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray25 = base64_16.encode(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray28 = base64_5.encode(byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        boolean boolean2 = base64_1.isUrlSafe();
        boolean boolean3 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray7);
        byte[] byteArray10 = base64_1.encode(byteArray7);
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.lang.Class<?> wildcardClass12 = byteArray10.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGcNCg" + "'", str11, "aGcNCg");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        byte[] byteArray16 = base64_6.decode("aGc=");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray20);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray27 = base64_22.decode(byteArray25);
        byte[] byteArray29 = null;
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(10, byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((-1), byteArray34, true);
        byte[] byteArray39 = base64_37.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray42);
        java.lang.Object obj45 = base64_37.encode((java.lang.Object) byteArray42);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray48 = base64_46.decode("hi!");
        java.lang.String str49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray48);
        java.lang.String str51 = base64_37.encodeToString(byteArray50);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false);
        byte[] byteArray54 = base64_30.decode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray58 = base64_56.decode("hi!");
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        byte[] byteArray60 = base64_55.decode(byteArray59);
        java.lang.Object obj61 = base64_30.encode((java.lang.Object) byteArray60);
        java.lang.Object obj62 = base64_22.decode((java.lang.Object) byteArray60);
        byte[] byteArray63 = base64_6.encode(byteArray60);
        boolean boolean64 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray60);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hg" + "'", str43, "hg");
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hg" + "'", str49, "hg");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "aGc" + "'", str51, "aGc");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(false);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray9 = base64_2.decode(byteArray8);
        byte[] byteArray11 = base64_2.decode("WVVkalBR");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [YUdjPQ]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[89, 85, 100, 106, 80, 81]");
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((-1), byteArray14);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((-1), byteArray29, true);
        byte[] byteArray34 = base64_32.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        byte[] byteArray38 = base64_32.encode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(0, byteArray37);
        boolean boolean40 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        java.lang.Object obj42 = base64_24.decode((java.lang.Object) byteArray37);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        java.lang.String str51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray50);
        boolean boolean52 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64(0, byteArray50, true);
        byte[] byteArray55 = base64_44.decode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray58 = base64_56.decode("hi!");
        java.lang.String str59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray58);
        boolean boolean60 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray58);
        java.math.BigInteger bigInteger61 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray58);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray62);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        java.lang.Object obj65 = base64_44.encode((java.lang.Object) byteArray62);
        byte[] byteArray68 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger69 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray68);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray70);
        java.lang.String str72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        byte[] byteArray73 = base64_44.decode(byteArray71);
        org.apache.commons.codec.binary.Base64 base64_74 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray76 = base64_74.decode("hi!");
        java.lang.String str77 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray76);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray76);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray78);
        java.lang.String str80 = base64_44.encodeToString(byteArray79);
        org.apache.commons.codec.binary.Base64 base64_82 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray79, true);
        byte[] byteArray83 = base64_24.decode(byteArray79);
        boolean boolean84 = base64_24.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hg" + "'", str51, "hg");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hg" + "'", str59, "hg");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-122]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hg" + "'", str77, "hg");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-122]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hg==" + "'", str80, "hg==");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        boolean boolean25 = base64_16.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((-1), byteArray30, true);
        byte[] byteArray35 = base64_33.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        byte[] byteArray39 = base64_33.encode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(0, byteArray38);
        byte[] byteArray41 = null;
        byte[] byteArray42 = base64_40.encode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray48 = base64_43.decode(byteArray47);
        byte[] byteArray49 = base64_40.encode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        boolean boolean56 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray54);
        java.math.BigInteger bigInteger57 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray58);
        java.lang.String str60 = base64_51.encodeToString(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray63 = base64_61.decode("hi!");
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray63);
        boolean boolean65 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray63);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray63);
        byte[] byteArray68 = base64_51.decode(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray71 = base64_69.decode("hi!");
        java.lang.String str72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray73);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false, false);
        java.lang.String str78 = base64_51.encodeToString(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_80 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray82 = base64_80.decode("hi!");
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray82);
        org.apache.commons.codec.binary.Base64 base64_84 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray82);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, false);
        java.lang.String str87 = base64_51.encodeToString(byteArray82);
        byte[] byteArray88 = base64_40.encode(byteArray82);
        byte[] byteArray89 = base64_16.decode(byteArray88);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray89, true, false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hg" + "'", str55, "hg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "aGc=\r\n" + "'", str60, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hg" + "'", str64, "hg");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hg" + "'", str72, "hg");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-122]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "aGc=\r\n" + "'", str78, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-122]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hg==\r\n" + "'", str87, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-122]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        byte[] byteArray16 = base64_6.decode("aGc=");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray16);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 57, 80, 81, 13, 10]");
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray3);
        byte[] byteArray7 = base64_5.decode("");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) '4');
        byte[] byteArray11 = base64_9.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray17 = base64_9.encode(byteArray16);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false);
        byte[] byteArray20 = base64_5.encode(byteArray16);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99, 61]");
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = base64_6.decode(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15, true);
        byte[] byteArray20 = base64_18.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        java.lang.Object obj26 = base64_18.encode((java.lang.Object) byteArray23);
        java.lang.String str27 = base64_6.encodeToString(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64(100, byteArray23);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ufffd" + "'", str27, "\ufffd");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103, 61, 61]");
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray23 = base64_0.decode("YUdjOVBR");
        byte[] byteArray25 = base64_0.decode("L3dvPQ0K\r\n");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 57, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 119, 111, 61, 13, 10]");
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        java.lang.String str5 = base64_1.encodeToString(byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = base64_7.encode(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray12);
        byte[] byteArray15 = null;
        byte[] byteArray16 = base64_14.encode(byteArray15);
        boolean boolean17 = base64_14.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        java.lang.String str14 = base64_9.encodeToString(byteArray12);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, true);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(1, byteArray12);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64(0, byteArray12);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray12, true);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103, 61, 61]");
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray15);
        java.lang.Object obj17 = base64_7.decode((java.lang.Object) byteArray15);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray15);
        byte[] byteArray19 = base64_1.decode(byteArray15);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "YUdjPQ0K\r\n" + "'", str16, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray7);
        java.lang.Class<?> wildcardClass9 = byteArray7.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "aGc=\r\n" + "'", str8, "aGc=\r\n");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, true, (int) ' ');
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray9);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((-1));
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.decodeBase64("WVVkag0K\r\n");
        byte[] byteArray4 = base64_1.decode(byteArray3);
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[89, 85, 100, 106, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[97, 71, 99]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "WVVkag0K\r\n" + "'", str5, "WVVkag0K\r\n");
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false, false);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        java.lang.Object obj15 = base64_5.decode((java.lang.Object) byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hg" + "'", str9, "hg");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "YUdjPQ0K\r\n" + "'", str14, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "YUdjPQ0K\r\n" + "'", str17, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61]");
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray3);
        byte[] byteArray10 = base64_8.decode("YUdjPQ==");
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray15);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((-1), byteArray21, true);
        byte[] byteArray26 = base64_24.decode("hg==\r\n");
        byte[] byteArray27 = base64_17.encode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((-1), byteArray31, true);
        byte[] byteArray36 = base64_34.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray39);
        java.lang.Object obj42 = base64_34.encode((java.lang.Object) byteArray39);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        java.lang.String str48 = base64_34.encodeToString(byteArray47);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false);
        java.lang.String str51 = base64_17.encodeToString(byteArray47);
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray47);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray47);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray53, false);
        byte[] byteArray56 = base64_8.encode(byteArray53);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hg" + "'", str40, "hg");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "aGc" + "'", str48, "aGc");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\ufffd" + "'", str51, "\ufffd");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "aGc" + "'", str52, "aGc");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[104, 103, 61, 61, -122]");
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.lang.String str29 = base64_2.encodeToString(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false);
        java.lang.String str38 = base64_2.encodeToString(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray33);
        boolean boolean40 = base64_39.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((-1), byteArray44, true);
        byte[] byteArray49 = base64_47.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = base64_50.decode("hi!");
        java.lang.String str53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray52);
        boolean boolean54 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray52);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray52);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray52);
        boolean boolean57 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray56);
        byte[] byteArray58 = base64_47.decode(byteArray56);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        byte[] byteArray64 = base64_59.decode(byteArray63);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray63);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray65);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray66);
        java.lang.Object obj68 = base64_47.decode((java.lang.Object) byteArray67);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray67);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, true);
        byte[] byteArray72 = base64_39.encode(byteArray71);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "aGc=\r\n" + "'", str29, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg==\r\n" + "'", str38, "hg==\r\n");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hg" + "'", str53, "hg");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-122]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 78, 67, 103, 61, 61]");
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = base64_0.decode(byteArray27);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        java.lang.String str36 = base64_0.encodeToString(byteArray35);
        byte[] byteArray38 = null;
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(10, byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((-1), byteArray43, true);
        byte[] byteArray48 = base64_46.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray51);
        java.math.BigInteger bigInteger53 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray51);
        java.lang.Object obj54 = base64_46.encode((java.lang.Object) byteArray51);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray57 = base64_55.decode("hi!");
        java.lang.String str58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray57);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray57);
        java.lang.String str60 = base64_46.encodeToString(byteArray59);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false);
        byte[] byteArray63 = base64_39.decode(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray67 = base64_65.decode("hi!");
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray67);
        byte[] byteArray69 = base64_64.decode(byteArray68);
        java.lang.Object obj70 = base64_39.encode((java.lang.Object) byteArray69);
        byte[] byteArray71 = base64_0.decode(byteArray69);
        java.lang.Class<?> wildcardClass72 = byteArray71.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hg" + "'", str52, "hg");
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hg" + "'", str58, "hg");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "aGc" + "'", str60, "aGc");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-122]");
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64(0, byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray10 = base64_5.decode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray8, false);
        byte[] byteArray14 = null;
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray14, true);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((-1), byteArray20, true);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20);
        java.lang.Object obj25 = base64_16.decode((java.lang.Object) byteArray20);
        boolean boolean26 = base64_16.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray30);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false);
        byte[] byteArray35 = base64_16.encode(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        byte[] byteArray39 = base64_12.encode(byteArray36);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[97, 71, 99, 57, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[89, 85, 100, 106, 79, 86, 66, 82]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[87, 86, 86, 107, 97, 107, 57, 87, 81, 108, 73, 61]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[87, 86, 86, 107, 97, 107, 57, 87, 81, 108, 73, 61]");
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        byte[] byteArray16 = base64_6.decode("aGc=");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103, 61, 61]");
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = base64_6.decode(byteArray11);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, false);
        boolean boolean22 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
    }
}
