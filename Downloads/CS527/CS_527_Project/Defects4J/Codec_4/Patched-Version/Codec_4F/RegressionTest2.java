import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11);
        java.lang.String str13 = base64_6.encodeToString(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22);
        byte[] byteArray24 = base64_6.decode(byteArray22);
        byte[] byteArray25 = base64_5.encode(byteArray24);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "aGc9PQ==" + "'", str13, "aGc9PQ==");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hg" + "'", str17, "hg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103, 61, 61]");
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = base64_5.decode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((-1), byteArray16, true);
        byte[] byteArray21 = base64_19.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = base64_19.encode(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(0, byteArray24);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((-1), byteArray24);
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray32);
        byte[] byteArray35 = base64_27.decode(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((-1), byteArray39, true);
        byte[] byteArray44 = base64_42.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray47 = base64_45.decode("hi!");
        java.lang.String str48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray47);
        java.math.BigInteger bigInteger49 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray47);
        java.lang.Object obj50 = base64_42.encode((java.lang.Object) byteArray47);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray53 = base64_51.decode("hi!");
        java.lang.String str54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray53);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        java.lang.String str56 = base64_42.encodeToString(byteArray55);
        boolean boolean57 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray55);
        java.lang.String str58 = base64_27.encodeToString(byteArray55);
        byte[] byteArray59 = base64_5.encode(byteArray55);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hg" + "'", str48, "hg");
        org.junit.Assert.assertNotNull(bigInteger49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hg" + "'", str54, "hg");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "aGc" + "'", str56, "aGc");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "aGc=" + "'", str58, "aGc=");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[97, 71, 99, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[97, 71, 99]");
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = base64_0.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray33);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str37 = base64_0.encodeToString(byteArray33);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger43);
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray44);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, true, (int) (byte) 100);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray54 = base64_0.encode(byteArray44);
        boolean boolean55 = base64_0.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        java.math.BigInteger bigInteger61 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray59);
        java.lang.String str62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray59, false);
        byte[] byteArray66 = base64_64.decode("\ufffd");
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, false);
        java.lang.String str70 = base64_0.encodeToString(byteArray67);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, false, false, 1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (14) than the specified maxium size of 1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg==" + "'", str37, "hg==");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hg" + "'", str62, "hg");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "WVVkalBRMEs=" + "'", str70, "WVVkalBRMEs=");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        byte[] byteArray21 = base64_2.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray29, false);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray40);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, true, true);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray43, false);
        java.lang.Object obj50 = base64_35.decode((java.lang.Object) byteArray43);
        byte[] byteArray51 = base64_2.encode(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        java.lang.String str56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        boolean boolean57 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray55);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64(0, byteArray55, true);
        boolean boolean60 = base64_59.isUrlSafe();
        byte[] byteArray62 = base64_59.decode("aGc=\r\n");
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = base64_64.decode("hi!");
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64((-1), byteArray66, true);
        byte[] byteArray71 = base64_69.decode("hg==\r\n");
        byte[] byteArray74 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger75 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray74);
        java.math.BigInteger bigInteger76 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray74);
        java.math.BigInteger bigInteger77 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray74);
        byte[] byteArray78 = base64_69.decode(byteArray74);
        java.lang.String str79 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray78);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78, true, true);
        java.lang.String str83 = base64_59.encodeToString(byteArray82);
        byte[] byteArray86 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger87 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray86);
        java.math.BigInteger bigInteger88 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray86);
        java.math.BigInteger bigInteger89 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray86);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger89);
        java.lang.String str91 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray90);
        byte[] byteArray92 = base64_59.decode(byteArray90);
        byte[] byteArray93 = base64_2.decode(byteArray92);
        org.apache.commons.codec.binary.Base64 base64_94 = new org.apache.commons.codec.binary.Base64(1, byteArray93);
        java.lang.String str95 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray93);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hg" + "'", str56, "hg");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger75);
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertNotNull(bigInteger77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger87);
        org.junit.Assert.assertNotNull(bigInteger88);
        org.junit.Assert.assertNotNull(bigInteger89);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64("\ufffd");
        byte[] byteArray18 = base64_7.decode(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray17);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(10, byteArray17);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bigInteger20);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray10);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((-1), byteArray18, true);
        byte[] byteArray23 = base64_21.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        boolean boolean31 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray30);
        byte[] byteArray32 = base64_21.decode(byteArray30);
        boolean boolean33 = base64_21.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray37);
        java.lang.String str39 = base64_35.encodeToString(byteArray38);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false, true, (int) (byte) 100);
        byte[] byteArray44 = base64_21.encode(byteArray43);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, true, true, 0);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray43);
        java.lang.Object obj50 = base64_14.decode((java.lang.Object) byteArray49);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[97, 71, 99, 61]");
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        byte[] byteArray29 = base64_6.decode("hi!");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = base64_6.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((-1), byteArray42, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42);
        java.lang.Object obj47 = base64_6.encode((java.lang.Object) byteArray42);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        java.lang.String str51 = base64_6.encodeToString(byteArray50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray50);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hg" + "'", str51, "hg");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = base64_7.encode(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray12);
        byte[] byteArray15 = null;
        byte[] byteArray16 = base64_14.encode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray20);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((-1), byteArray26, true);
        byte[] byteArray31 = base64_29.decode("hg==\r\n");
        byte[] byteArray32 = base64_22.encode(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((-1), byteArray36, true);
        byte[] byteArray41 = base64_39.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        java.math.BigInteger bigInteger46 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        java.lang.Object obj47 = base64_39.encode((java.lang.Object) byteArray44);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        java.lang.String str51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        java.lang.String str53 = base64_39.encodeToString(byteArray52);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false);
        java.lang.String str56 = base64_22.encodeToString(byteArray52);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = base64_58.decode("hi!");
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray60);
        byte[] byteArray62 = base64_57.decode(byteArray61);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray61);
        java.lang.String str64 = base64_22.encodeToString(byteArray63);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray63);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false);
        java.lang.Object obj68 = base64_14.decode((java.lang.Object) byteArray67);
        boolean boolean69 = base64_14.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hg" + "'", str45, "hg");
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hg" + "'", str51, "hg");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "aGc" + "'", str53, "aGc");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\ufffd" + "'", str56, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\ufffd" + "'", str64, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        byte[] byteArray16 = base64_6.decode("aGc=\r\n");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray20);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((-1), byteArray26, true);
        byte[] byteArray31 = base64_29.decode("hg==\r\n");
        byte[] byteArray32 = base64_22.encode(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray31);
        byte[] byteArray34 = base64_6.decode(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((-1), byteArray38, true);
        byte[] byteArray43 = base64_41.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray46);
        java.lang.Object obj49 = base64_41.encode((java.lang.Object) byteArray46);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = base64_50.decode("hi!");
        java.lang.String str53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray52);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray52);
        java.lang.String str55 = base64_41.encodeToString(byteArray54);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray54);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, true, false);
        byte[] byteArray64 = base64_6.encode(byteArray63);
        byte[] byteArray66 = base64_6.decode("hi!");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hg" + "'", str47, "hg");
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hg" + "'", str53, "hg");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "aGc" + "'", str55, "aGc");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 78, 67, 103]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        byte[] byteArray16 = base64_6.decode("aGc=");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray20);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray27 = base64_22.decode(byteArray25);
        byte[] byteArray29 = null;
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(10, byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((-1), byteArray34, true);
        byte[] byteArray39 = base64_37.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray42);
        java.lang.Object obj45 = base64_37.encode((java.lang.Object) byteArray42);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray48 = base64_46.decode("hi!");
        java.lang.String str49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray48);
        java.lang.String str51 = base64_37.encodeToString(byteArray50);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false);
        byte[] byteArray54 = base64_30.decode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray58 = base64_56.decode("hi!");
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        byte[] byteArray60 = base64_55.decode(byteArray59);
        java.lang.Object obj61 = base64_30.encode((java.lang.Object) byteArray60);
        java.lang.Object obj62 = base64_22.decode((java.lang.Object) byteArray60);
        byte[] byteArray63 = base64_6.encode(byteArray60);
        byte[] byteArray65 = base64_6.decode("aGc");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hg" + "'", str43, "hg");
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hg" + "'", str49, "hg");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "aGc" + "'", str51, "aGc");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[104, 103]");
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = base64_9.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(0, byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray25 = base64_17.decode(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, false);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray24);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true);
        java.lang.String str37 = base64_29.encodeToString(byteArray36);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "L3dvPQ0K" + "'", str37, "L3dvPQ0K");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray5, false);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14, true);
        byte[] byteArray19 = base64_17.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((-1), byteArray23, true);
        byte[] byteArray28 = base64_26.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.Object obj34 = base64_26.encode((java.lang.Object) byteArray31);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        java.lang.String str40 = base64_26.encodeToString(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray44);
        byte[] byteArray47 = base64_26.decode(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = base64_50.decode("hi!");
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray52);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64((-1), byteArray52, true);
        byte[] byteArray57 = base64_55.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = base64_58.decode("hi!");
        java.lang.String str61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray60);
        java.math.BigInteger bigInteger62 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray60);
        java.lang.Object obj63 = base64_55.encode((java.lang.Object) byteArray60);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = base64_64.decode("hi!");
        java.lang.String str67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        java.lang.String str69 = base64_55.encodeToString(byteArray68);
        org.apache.commons.codec.binary.Base64 base64_71 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray73 = base64_71.decode("hi!");
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray73);
        byte[] byteArray76 = base64_55.decode(byteArray73);
        byte[] byteArray78 = base64_55.decode("hi!");
        byte[] byteArray81 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger82 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray81);
        java.math.BigInteger bigInteger83 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray81);
        java.math.BigInteger bigInteger84 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray81);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger84);
        java.lang.String str86 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray85);
        byte[] byteArray87 = base64_55.decode(byteArray85);
        org.apache.commons.codec.binary.Base64 base64_89 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray85, false);
        byte[] byteArray90 = base64_26.decode(byteArray85);
        java.lang.Object obj91 = base64_17.encode((java.lang.Object) byteArray85);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray85, false);
        java.lang.Object obj94 = base64_10.decode((java.lang.Object) byteArray93);
        org.apache.commons.codec.binary.Base64 base64_96 = new org.apache.commons.codec.binary.Base64((-1), byteArray93, true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "aGc" + "'", str40, "aGc");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hg" + "'", str61, "hg");
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hg" + "'", str67, "hg");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "aGc" + "'", str69, "aGc");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-122]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-122]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger82);
        org.junit.Assert.assertNotNull(bigInteger83);
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(obj94);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
        org.junit.Assert.assertNotNull(bigInteger9);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        boolean boolean28 = base64_6.isUrlSafe();
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, true);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, true);
        java.lang.Object obj39 = base64_6.encode((java.lang.Object) byteArray38);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[76, 51, 100, 118, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj39);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray4, true);
        boolean boolean9 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray13);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((-1), byteArray19, true);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        java.lang.String str27 = base64_22.encodeToString(byteArray25);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        java.lang.Object obj29 = base64_15.decode((java.lang.Object) str28);
        java.lang.Object obj30 = base64_8.decode((java.lang.Object) str28);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37);
        java.lang.Object obj39 = base64_8.encode((java.lang.Object) byteArray37);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((-1), byteArray12, true);
        byte[] byteArray17 = base64_15.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.lang.Object obj23 = base64_15.encode((java.lang.Object) byteArray20);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        java.lang.String str29 = base64_15.encodeToString(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray33);
        byte[] byteArray36 = base64_15.decode(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = base64_39.decode("hi!");
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((-1), byteArray41, true);
        byte[] byteArray46 = base64_44.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray49 = base64_47.decode("hi!");
        java.lang.String str50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        java.math.BigInteger bigInteger51 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        java.lang.Object obj52 = base64_44.encode((java.lang.Object) byteArray49);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        java.lang.String str56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        java.lang.String str58 = base64_44.encodeToString(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray62);
        byte[] byteArray65 = base64_44.decode(byteArray62);
        byte[] byteArray67 = base64_44.decode("hi!");
        byte[] byteArray70 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger71 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        java.math.BigInteger bigInteger72 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        java.math.BigInteger bigInteger73 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger73);
        java.lang.String str75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray74);
        byte[] byteArray76 = base64_44.decode(byteArray74);
        org.apache.commons.codec.binary.Base64 base64_78 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray74, false);
        byte[] byteArray79 = base64_15.decode(byteArray74);
        java.lang.Object obj80 = base64_6.encode((java.lang.Object) byteArray74);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, true, false, 10);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray84, true, true);
        java.lang.String str88 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray84);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "aGc" + "'", str29, "aGc");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hg" + "'", str50, "hg");
        org.junit.Assert.assertNotNull(bigInteger51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hg" + "'", str56, "hg");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "aGc" + "'", str58, "aGc");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger71);
        org.junit.Assert.assertNotNull(bigInteger72);
        org.junit.Assert.assertNotNull(bigInteger73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        byte[] byteArray17 = base64_6.decode(byteArray15);
        boolean boolean18 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((-1), byteArray24, true);
        byte[] byteArray29 = base64_27.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = base64_27.encode(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64(0, byteArray32);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((-1), byteArray32);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray39);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger45 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        byte[] byteArray46 = base64_41.decode(byteArray44);
        byte[] byteArray47 = base64_35.decode(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray47);
        byte[] byteArray50 = base64_6.decode(byteArray47);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = base64_7.decode(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((-1), byteArray16, true);
        byte[] byteArray21 = base64_19.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        java.lang.Object obj27 = base64_19.encode((java.lang.Object) byteArray24);
        java.lang.String str28 = base64_7.encodeToString(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64(100, byteArray24);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray32);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        boolean boolean41 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray39);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray39);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray43);
        java.lang.String str45 = base64_36.encodeToString(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray48 = base64_46.decode("hi!");
        java.lang.String str49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray48);
        boolean boolean50 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray48);
        java.math.BigInteger bigInteger51 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray48);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray48);
        byte[] byteArray53 = base64_36.decode(byteArray48);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false, false);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((-1), byteArray48);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray63 = base64_61.decode("hi!");
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64((-1), byteArray63, true);
        byte[] byteArray68 = base64_66.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray71 = base64_69.decode("hi!");
        byte[] byteArray72 = base64_66.encode(byteArray71);
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64(0, byteArray71);
        boolean boolean74 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray71);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray71);
        java.lang.Object obj76 = base64_58.decode((java.lang.Object) byteArray71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj77 = base64_33.decode((java.lang.Object) base64_58);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hg" + "'", str25, "hg");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(obj27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ufffd" + "'", str28, "\ufffd");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hg" + "'", str40, "hg");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "aGc=\r\n" + "'", str45, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hg" + "'", str49, "hg");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(bigInteger51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-122]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj76);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        byte[] byteArray29 = base64_6.decode("hi!");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = base64_6.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((-1), byteArray42, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42);
        java.lang.Object obj47 = base64_6.encode((java.lang.Object) byteArray42);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((-1), byteArray51, true);
        byte[] byteArray56 = base64_54.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        boolean boolean61 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray59);
        java.math.BigInteger bigInteger62 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray59);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        boolean boolean64 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray63);
        byte[] byteArray65 = base64_54.decode(byteArray63);
        byte[] byteArray66 = base64_6.decode(byteArray63);
        byte[] byteArray68 = base64_6.decode("\ufffd");
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray71 = base64_69.decode("hi!");
        java.lang.String str72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        boolean boolean73 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray71);
        java.math.BigInteger bigInteger74 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray71);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray75);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray75);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray75);
        java.math.BigInteger bigInteger79 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray78);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger79);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray80);
        byte[] byteArray82 = base64_6.decode(byteArray80);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-122]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hg" + "'", str72, "hg");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(bigInteger79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[104, 103]");
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        java.lang.String str2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray1.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-122]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hg" + "'", str2, "hg");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = base64_0.decode(byteArray27);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3, false);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        java.lang.Object obj21 = base64_13.encode((java.lang.Object) byteArray18);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        java.lang.String str27 = base64_13.encodeToString(byteArray26);
        boolean boolean28 = base64_13.isUrlSafe();
        byte[] byteArray30 = base64_13.decode("YUdjPQ");
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        boolean boolean35 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray33);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray33);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, true, false);
        java.lang.String str44 = base64_13.encodeToString(byteArray40);
        java.lang.String str45 = base64_6.encodeToString(byteArray40);
        java.lang.Class<?> wildcardClass46 = byteArray40.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hg" + "'", str25, "hg");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "aGc" + "'", str27, "aGc");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "YUdjOVBRMEs" + "'", str44, "YUdjOVBRMEs");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ufffd" + "'", str45, "\ufffd");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = base64_5.decode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14, true);
        byte[] byteArray19 = base64_17.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        java.lang.Object obj25 = base64_17.encode((java.lang.Object) byteArray22);
        java.lang.String str26 = base64_5.encodeToString(byteArray22);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ufffd" + "'", str26, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103, 61, 61]");
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = base64_6.decode(byteArray11);
        boolean boolean16 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((-1), byteArray20, true);
        byte[] byteArray25 = base64_23.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.lang.Object obj31 = base64_23.encode((java.lang.Object) byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.String str37 = base64_23.encodeToString(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = base64_39.decode("hi!");
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray41);
        byte[] byteArray44 = base64_23.decode(byteArray41);
        byte[] byteArray46 = base64_23.decode("hi!");
        java.lang.Object obj47 = base64_6.encode((java.lang.Object) byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray46);
        java.lang.Class<?> wildcardClass49 = byteArray48.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "aGc" + "'", str37, "aGc");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray2);
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray2);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false, (int) '4');
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false, (int) 'a');
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17);
        java.lang.Class<?> wildcardClass19 = byteArray18.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg==\r\n" + "'", str4, "hg==\r\n");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg==\r\n" + "'", str5, "hg==\r\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[87, 86, 86, 107, 97, 108, 66, 82]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false);
        java.lang.String str28 = base64_1.encodeToString(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray36 = base64_1.decode(byteArray31);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray40);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, false, false, (int) (short) -1);
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray47);
        java.math.BigInteger bigInteger49 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray47);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "aGc=\r\n" + "'", str28, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(bigInteger49);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = base64_7.encode(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray12);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = base64_5.decode(byteArray8);
        byte[] byteArray12 = null;
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray12, true);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((-1), byteArray18, true);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18);
        java.lang.Object obj23 = base64_14.decode((java.lang.Object) byteArray18);
        boolean boolean24 = base64_14.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false);
        byte[] byteArray33 = base64_14.encode(byteArray32);
        byte[] byteArray34 = base64_5.encode(byteArray32);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 57, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[97, 71, 99, 57, 80, 81, 61, 61, -122]");
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray6, false);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13, true);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        java.lang.String str26 = base64_16.encodeToString(byteArray25);
        byte[] byteArray27 = base64_9.encode(byteArray25);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "aGc9PQ0K" + "'", str26, "aGc9PQ0K");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 61]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115]");
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((-1), byteArray28, true);
        byte[] byteArray33 = base64_31.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        java.lang.Object obj39 = base64_31.encode((java.lang.Object) byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        java.lang.String str45 = base64_31.encodeToString(byteArray44);
        boolean boolean46 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray44);
        java.lang.String str47 = base64_16.encodeToString(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((-1), byteArray51, true);
        byte[] byteArray56 = base64_54.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        byte[] byteArray60 = base64_54.encode(byteArray59);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60);
        byte[] byteArray62 = base64_16.encode(byteArray61);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hg" + "'", str43, "hg");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "aGc" + "'", str45, "aGc");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "aGc=" + "'", str47, "aGc=");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        boolean boolean2 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((-1), byteArray7, true);
        byte[] byteArray12 = base64_10.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = base64_10.encode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64(0, byteArray15);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        java.lang.String str21 = base64_1.encodeToString(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64("WVVkag0K\r\n");
        byte[] byteArray24 = base64_1.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        boolean boolean31 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray29);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        java.lang.String str34 = base64_26.encodeToString(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, true);
        byte[] byteArray39 = base64_1.decode(byteArray36);
        java.lang.Class<?> wildcardClass40 = byteArray36.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc9PQ0K" + "'", str21, "aGc9PQ0K");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[89, 85, 100, 106, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hg" + "'", str30, "hg");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "aGc=\r\n" + "'", str34, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, false, (int) ' ');
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray3);
        byte[] byteArray13 = base64_11.decode("L3dvPQ0K\r\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 119, 111, 61, 13, 10]");
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray18);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray18);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "aGc=\r\n" + "'", str22, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str21 = base64_7.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray25);
        byte[] byteArray28 = base64_7.decode(byteArray25);
        byte[] byteArray30 = base64_7.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray34);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.Object obj38 = base64_7.decode((java.lang.Object) byteArray34);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray34, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertNotNull(obj38);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray5 = base64_0.decode(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "WVVkalBRPT0=\r\n" + "'", str13, "WVVkalBRPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[87, 86, 86, 107, 97, 108, 66, 82, 80, 84, 48, 61]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V1ZWa2FsQlJQVDA9" + "'", str15, "V1ZWa2FsQlJQVDA9");
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray22);
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = base64_24.decode(byteArray27);
        java.lang.Object obj30 = base64_1.decode((java.lang.Object) byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64(0, byteArray37, true);
        byte[] byteArray42 = base64_31.decode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray45);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        java.lang.Object obj52 = base64_31.encode((java.lang.Object) byteArray49);
        byte[] byteArray55 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger56 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger56);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray57);
        java.lang.String str59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray58);
        byte[] byteArray60 = base64_31.decode(byteArray58);
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        java.math.BigInteger bigInteger65 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger66);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger66);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger66);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger66);
        java.lang.Object obj72 = base64_31.encode((java.lang.Object) byteArray71);
        byte[] byteArray73 = base64_1.decode(byteArray71);
        java.lang.String str74 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray73);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray73);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(bigInteger65);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("V1ZWa2FrOVdRbEk9\r\n");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[87, 86, 86, 107, 97, 107, 57, 87, 81, 108, 73, 61]");
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray20 = base64_1.decode("aGc");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = base64_6.encode(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "aGc" + "'", str14, "aGc");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "aGc" + "'", str15, "aGc");
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13, true);
        byte[] byteArray18 = base64_16.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        java.lang.Object obj24 = base64_16.encode((java.lang.Object) byteArray21);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        java.lang.String str30 = base64_16.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray34);
        byte[] byteArray37 = base64_16.decode(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((-1), byteArray42, true);
        byte[] byteArray47 = base64_45.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        java.lang.String str51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray50);
        java.math.BigInteger bigInteger52 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray50);
        java.lang.Object obj53 = base64_45.encode((java.lang.Object) byteArray50);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray56 = base64_54.decode("hi!");
        java.lang.String str57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray56);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray56);
        java.lang.String str59 = base64_45.encodeToString(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray63 = base64_61.decode("hi!");
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray63);
        byte[] byteArray66 = base64_45.decode(byteArray63);
        byte[] byteArray68 = base64_45.decode("hi!");
        byte[] byteArray71 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger72 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray71);
        java.math.BigInteger bigInteger73 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray71);
        java.math.BigInteger bigInteger74 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray71);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger74);
        java.lang.String str76 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray75);
        byte[] byteArray77 = base64_45.decode(byteArray75);
        org.apache.commons.codec.binary.Base64 base64_79 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray75, false);
        byte[] byteArray80 = base64_16.decode(byteArray75);
        java.lang.Object obj81 = base64_7.encode((java.lang.Object) byteArray75);
        org.apache.commons.codec.binary.Base64 base64_83 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray75, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "aGc" + "'", str30, "aGc");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hg" + "'", str51, "hg");
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hg" + "'", str57, "hg");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "aGc" + "'", str59, "aGc");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-122]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger72);
        org.junit.Assert.assertNotNull(bigInteger73);
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(obj81);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray16 = base64_7.decode(byteArray12);
        boolean boolean17 = base64_7.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        boolean boolean22 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray20);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        boolean boolean25 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray24);
        byte[] byteArray26 = base64_7.encode(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        boolean boolean35 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64(0, byteArray33, true);
        byte[] byteArray38 = base64_27.decode(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = base64_39.decode("hi!");
        java.lang.String str42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray41);
        boolean boolean43 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray41);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        java.lang.Object obj48 = base64_27.encode((java.lang.Object) byteArray45);
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger52 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger52);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray53);
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        byte[] byteArray56 = base64_27.decode(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray61);
        java.lang.String str63 = base64_27.encodeToString(byteArray62);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray62);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray64, false, false, 10);
        byte[] byteArray69 = base64_7.encode(byteArray64);
        org.apache.commons.codec.binary.Base64 base64_70 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray64);
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray74 = base64_72.decode("hi!");
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray74);
        org.apache.commons.codec.binary.Base64 base64_77 = new org.apache.commons.codec.binary.Base64((-1), byteArray74, true);
        byte[] byteArray79 = base64_77.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_80 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray82 = base64_80.decode("hi!");
        java.lang.String str83 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray82);
        boolean boolean84 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray82);
        java.math.BigInteger bigInteger85 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray82);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray82);
        boolean boolean87 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray86);
        byte[] byteArray88 = base64_77.decode(byteArray86);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86, false);
        java.lang.Object obj91 = base64_70.decode((java.lang.Object) byteArray86);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hg" + "'", str42, "hg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hg==" + "'", str63, "hg==");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-122]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-122]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-122]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hg" + "'", str83, "hg");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(bigInteger85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-122]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(obj91);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(false);
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger7);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = base64_1.decode(byteArray10);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, true, (int) '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.lang.String str19 = base64_10.encodeToString(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray22);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray27 = base64_10.decode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray31);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray38 = base64_33.decode(byteArray36);
        java.lang.Object obj39 = base64_10.decode((java.lang.Object) byteArray36);
        java.lang.Object obj40 = base64_8.encode((java.lang.Object) byteArray36);
        boolean boolean41 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray45);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray49);
        byte[] byteArray51 = base64_42.encode(byteArray49);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        byte[] byteArray53 = base64_8.encode(byteArray49);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, true, true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, true, true, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (6) than the specified maxium size of -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "aGc=\r\n" + "'", str19, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[97, 71, 99, 13, 10]");
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray20 = base64_1.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray25);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, true, true);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray28, false);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray39);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray39);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray42, false);
        java.lang.Object obj49 = base64_34.decode((java.lang.Object) byteArray42);
        byte[] byteArray50 = base64_1.encode(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        boolean boolean56 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64(0, byteArray54, true);
        boolean boolean59 = base64_58.isUrlSafe();
        byte[] byteArray61 = base64_58.decode("aGc=\r\n");
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray65 = base64_63.decode("hi!");
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray65);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64((-1), byteArray65, true);
        byte[] byteArray70 = base64_68.decode("hg==\r\n");
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger74 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray73);
        java.math.BigInteger bigInteger75 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray73);
        java.math.BigInteger bigInteger76 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray73);
        byte[] byteArray77 = base64_68.decode(byteArray73);
        java.lang.String str78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray77);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, true, true);
        java.lang.String str82 = base64_58.encodeToString(byteArray81);
        byte[] byteArray85 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger86 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray85);
        java.math.BigInteger bigInteger87 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray85);
        java.math.BigInteger bigInteger88 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray85);
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger88);
        java.lang.String str90 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray89);
        byte[] byteArray91 = base64_58.decode(byteArray89);
        byte[] byteArray92 = base64_1.decode(byteArray91);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray92);
        byte[] byteArray96 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray92, true, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hg" + "'", str55, "hg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-122]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-122]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(bigInteger75);
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger86);
        org.junit.Assert.assertNotNull(bigInteger87);
        org.junit.Assert.assertNotNull(bigInteger88);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[]");
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, true);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray7, false);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        boolean boolean22 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64(0, byteArray20, true);
        byte[] byteArray25 = base64_14.decode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray28);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        java.lang.Object obj35 = base64_14.encode((java.lang.Object) byteArray32);
        java.lang.Object obj36 = base64_13.encode((java.lang.Object) byteArray32);
        byte[] byteArray38 = base64_13.decode("YUdjPQ0K");
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray38);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "YUdjPQ0K\r\n" + "'", str39, "YUdjPQ0K\r\n");
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("aGc9PQ0K");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, true, false, (int) (byte) 100);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray10);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, true, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg==\r\n" + "'", str15, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        boolean boolean28 = base64_6.isUrlSafe();
        byte[] byteArray30 = base64_6.decode("\ufffd");
        byte[] byteArray32 = base64_6.decode("L3dvPQ");
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((-1), byteArray36, true);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        java.lang.String str44 = base64_39.encodeToString(byteArray42);
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray47);
        java.lang.String str49 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray47);
        java.lang.Object obj50 = base64_39.encode((java.lang.Object) byteArray47);
        byte[] byteArray51 = null;
        byte[] byteArray52 = base64_39.encode(byteArray51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj53 = base64_6.encode((java.lang.Object) byteArray52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 119, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hg" + "'", str44, "hg");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "/wo=\r\n" + "'", str49, "/wo=\r\n");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNull(byteArray52);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray18);
        byte[] byteArray20 = base64_9.decode(byteArray18);
        boolean boolean21 = base64_9.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        java.lang.String str27 = base64_23.encodeToString(byteArray26);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, true, (int) (byte) 100);
        byte[] byteArray32 = base64_9.encode(byteArray31);
        byte[] byteArray33 = base64_2.encode(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((-1), byteArray37, true);
        byte[] byteArray42 = base64_40.decode("hg==\r\n");
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger46 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray49 = base64_40.decode(byteArray45);
        boolean boolean50 = base64_40.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray53 = base64_51.decode("hi!");
        java.lang.String str54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray53);
        boolean boolean55 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray53);
        java.math.BigInteger bigInteger56 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        boolean boolean58 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray57);
        byte[] byteArray59 = base64_40.encode(byteArray57);
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray57);
        byte[] byteArray61 = base64_2.decode(byteArray57);
        boolean boolean62 = base64_2.isUrlSafe();
        boolean boolean63 = base64_2.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hg" + "'", str54, "hg");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[97, 71, 99]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "aGc=\r\n" + "'", str60, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray11);
        byte[] byteArray14 = base64_12.decode("YUdjOVBRMEs=\r\n");
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        java.lang.Object obj22 = base64_12.decode((java.lang.Object) byteArray20);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64("\ufffd");
        java.lang.String str25 = base64_12.encodeToString(byteArray24);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "YUdjPQ0K" + "'", str25, "YUdjPQ0K");
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.lang.String str16 = base64_7.encodeToString(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = base64_7.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false);
        java.lang.String str34 = base64_7.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray42 = base64_7.decode(byteArray37);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false);
        java.lang.Object obj46 = base64_5.encode((java.lang.Object) byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        boolean boolean48 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray47);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, true, false, (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "aGc=\r\n" + "'", str16, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "aGc=\r\n" + "'", str34, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64(0, byteArray28, true);
        byte[] byteArray33 = base64_22.decode(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        java.lang.Object obj43 = base64_22.encode((java.lang.Object) byteArray40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray48);
        java.lang.String str50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        byte[] byteArray51 = base64_22.decode(byteArray49);
        java.lang.String str52 = base64_0.encodeToString(byteArray49);
        java.lang.Class<?> wildcardClass53 = base64_0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.lang.String str16 = base64_7.encodeToString(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = base64_7.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false);
        java.lang.String str34 = base64_7.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray42 = base64_7.decode(byteArray37);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false);
        java.lang.Object obj46 = base64_5.encode((java.lang.Object) byteArray45);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray53 = base64_51.decode("hi!");
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((-1), byteArray53, true);
        byte[] byteArray58 = base64_56.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        byte[] byteArray62 = base64_56.encode(byteArray61);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64(0, byteArray61);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((-1), byteArray61);
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64(10, byteArray61);
        java.lang.String str66 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray61);
        byte[] byteArray67 = base64_5.decode(byteArray61);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray71 = base64_69.decode("hi!");
        java.lang.String str72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        boolean boolean73 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray71);
        java.math.BigInteger bigInteger74 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray71);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray75);
        byte[] byteArray77 = base64_68.encode(byteArray75);
        org.apache.commons.codec.binary.Base64 base64_78 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray80 = base64_78.decode("hi!");
        java.lang.String str81 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray80);
        java.lang.String str82 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray80);
        byte[] byteArray83 = base64_68.decode(byteArray80);
        java.lang.String str84 = base64_5.encodeToString(byteArray83);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray83);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "aGc=\r\n" + "'", str16, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "aGc=\r\n" + "'", str34, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hg==\r\n" + "'", str66, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hg" + "'", str72, "hg");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-122]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hg" + "'", str81, "hg");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hg==\r\n" + "'", str82, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray2);
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/wo=\r\n" + "'", str4, "/wo=\r\n");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/wo=\r\n" + "'", str5, "/wo=\r\n");
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        byte[] byteArray18 = base64_7.decode(byteArray16);
        boolean boolean19 = base64_7.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        java.lang.String str25 = base64_21.encodeToString(byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, true, (int) (byte) 100);
        byte[] byteArray30 = base64_7.encode(byteArray29);
        byte[] byteArray32 = null;
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64(10, byteArray32);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((-1), byteArray37, true);
        byte[] byteArray42 = base64_40.decode("hg==\r\n");
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger46 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray49 = base64_40.decode(byteArray45);
        java.lang.String str50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        java.math.BigInteger bigInteger51 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        byte[] byteArray52 = base64_33.decode(byteArray49);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        boolean boolean61 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64(0, byteArray59, true);
        byte[] byteArray64 = base64_53.decode(byteArray59);
        java.lang.String str65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray64);
        java.lang.String str66 = base64_33.encodeToString(byteArray64);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray71 = base64_69.decode("hi!");
        java.lang.String str72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        boolean boolean73 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray71);
        java.math.BigInteger bigInteger74 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray71);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray75);
        java.lang.String str77 = base64_68.encodeToString(byteArray75);
        org.apache.commons.codec.binary.Base64 base64_78 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray80 = base64_78.decode("hi!");
        java.lang.String str81 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray80);
        boolean boolean82 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray80);
        java.math.BigInteger bigInteger83 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray80);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray80);
        byte[] byteArray85 = base64_68.decode(byteArray80);
        byte[] byteArray87 = base64_68.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_89 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray91 = base64_89.decode("\ufffd");
        java.lang.Object obj92 = base64_68.decode((java.lang.Object) byteArray91);
        byte[] byteArray93 = base64_33.encode(byteArray91);
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray93);
        java.lang.Object obj95 = base64_7.decode((java.lang.Object) byteArray94);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_96 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray94);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc=??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(bigInteger51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hg" + "'", str72, "hg");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "aGc=\r\n" + "'", str77, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-122]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hg" + "'", str81, "hg");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(bigInteger83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj95);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        boolean boolean28 = base64_6.isUrlSafe();
        byte[] byteArray30 = base64_6.decode("\ufffd");
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        byte[] byteArray3 = base64_1.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((-1), byteArray7, true);
        byte[] byteArray12 = base64_10.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        boolean boolean20 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        byte[] byteArray21 = base64_10.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        byte[] byteArray27 = base64_22.decode(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        java.lang.Object obj31 = base64_10.decode((java.lang.Object) byteArray30);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.String str41 = base64_10.encodeToString(byteArray34);
        byte[] byteArray42 = base64_1.encode(byteArray34);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray1, true);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        java.lang.Object obj15 = base64_5.decode((java.lang.Object) byteArray13);
        boolean boolean16 = base64_5.isUrlSafe();
        byte[] byteArray18 = base64_5.decode("YUdjOVBRMEs");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hg" + "'", str9, "hg");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "YUdjPQ0K\r\n" + "'", str14, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 61]");
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = base64_7.encode(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray12);
        boolean boolean15 = base64_14.isUrlSafe();
        boolean boolean16 = base64_14.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((-1), byteArray21, true);
        byte[] byteArray26 = base64_24.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        byte[] byteArray30 = base64_24.encode(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64(0, byteArray29);
        byte[] byteArray32 = null;
        byte[] byteArray33 = base64_31.encode(byteArray32);
        byte[] byteArray35 = base64_31.decode("hi!");
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        java.lang.Object obj43 = base64_31.encode((java.lang.Object) byteArray42);
        byte[] byteArray44 = base64_14.encode(byteArray42);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray42);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(10, byteArray10);
        byte[] byteArray17 = base64_15.decode("X3dv\r\n");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[95, 119, 111]");
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        byte[] byteArray10 = base64_1.encode(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64(1, byteArray11);
        byte[] byteArray14 = base64_12.decode("aGc=");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = base64_7.decode(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((-1), byteArray16, true);
        byte[] byteArray21 = base64_19.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        java.lang.Object obj27 = base64_19.encode((java.lang.Object) byteArray24);
        java.lang.String str28 = base64_7.encodeToString(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64(100, byteArray24);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        boolean boolean31 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray24);
        boolean boolean32 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray24, true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hg" + "'", str25, "hg");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(obj27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ufffd" + "'", str28, "\ufffd");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.lang.String str19 = base64_10.encodeToString(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray22);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray27 = base64_10.decode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray31);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray38 = base64_33.decode(byteArray36);
        java.lang.Object obj39 = base64_10.decode((java.lang.Object) byteArray36);
        java.lang.Object obj40 = base64_8.encode((java.lang.Object) byteArray36);
        byte[] byteArray42 = base64_8.decode("aGc9PQ0K");
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64((-1), byteArray46, true);
        byte[] byteArray51 = base64_49.decode("hg==\r\n");
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        java.math.BigInteger bigInteger56 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        java.math.BigInteger bigInteger57 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray58 = base64_49.decode(byteArray54);
        boolean boolean59 = base64_49.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray63 = base64_61.decode("hi!");
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64((-1), byteArray63, true);
        byte[] byteArray68 = base64_66.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray71 = base64_69.decode("hi!");
        java.lang.String str72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        java.math.BigInteger bigInteger73 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray71);
        java.lang.Object obj74 = base64_66.encode((java.lang.Object) byteArray71);
        org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray77 = base64_75.decode("hi!");
        java.lang.String str78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray77);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray77);
        java.lang.String str80 = base64_66.encodeToString(byteArray79);
        org.apache.commons.codec.binary.Base64 base64_82 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray84 = base64_82.decode("hi!");
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray84);
        org.apache.commons.codec.binary.Base64 base64_86 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray84);
        byte[] byteArray87 = base64_66.decode(byteArray84);
        byte[] byteArray89 = base64_66.decode("hi!");
        java.lang.Object obj90 = base64_49.encode((java.lang.Object) byteArray89);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray89);
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray89, false, true);
        java.lang.String str95 = base64_8.encodeToString(byteArray94);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "aGc=\r\n" + "'", str19, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-122]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hg" + "'", str72, "hg");
        org.junit.Assert.assertNotNull(bigInteger73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-122]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hg" + "'", str78, "hg");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "aGc" + "'", str80, "aGc");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-122]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-122]");
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "aGc" + "'", str95, "aGc");
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false, 10);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "YUdjPQ" + "'", str14, "YUdjPQ");
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(false);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray9 = base64_2.decode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        java.lang.String str20 = base64_11.encodeToString(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        boolean boolean29 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64(0, byteArray27, true);
        byte[] byteArray32 = base64_21.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray35 = base64_33.decode("hi!");
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray35);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray35);
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        java.lang.Object obj42 = base64_21.encode((java.lang.Object) byteArray39);
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger46 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray47);
        java.lang.String str49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray48);
        byte[] byteArray50 = base64_21.decode(byteArray48);
        byte[] byteArray53 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger54 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        java.math.BigInteger bigInteger56 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger56);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger56);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger56);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger56);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger56);
        java.lang.Object obj62 = base64_21.encode((java.lang.Object) byteArray61);
        java.lang.Object obj63 = base64_11.encode((java.lang.Object) byteArray61);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = base64_64.decode("hi!");
        java.lang.String str67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray68);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray68, false, false);
        java.lang.String str73 = base64_11.encodeToString(byteArray72);
        java.lang.Object obj74 = base64_2.decode((java.lang.Object) byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc=]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc=\r\n" + "'", str20, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hg" + "'", str67, "hg");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-122]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "YUdjPQ==\r\n" + "'", str73, "YUdjPQ==\r\n");
        org.junit.Assert.assertNotNull(obj74);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray3 = base64_1.decode("aGc=\r\n");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "aGc=\r\n" + "'", str4, "aGc=\r\n");
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray20 = base64_1.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray25);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, true, true);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray28, false);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray39);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray39);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray42, false);
        java.lang.Object obj49 = base64_34.decode((java.lang.Object) byteArray42);
        byte[] byteArray50 = base64_1.encode(byteArray42);
        java.lang.String str51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        byte[] byteArray4 = base64_2.decode("hg");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, true, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        boolean boolean31 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray29);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray33);
        java.lang.String str35 = base64_26.encodeToString(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        boolean boolean40 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray38);
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray38);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        byte[] byteArray43 = base64_26.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray48);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false, false);
        java.lang.String str53 = base64_26.encodeToString(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray56 = base64_54.decode("hi!");
        java.lang.String str57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray56);
        boolean boolean58 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray56);
        java.math.BigInteger bigInteger59 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray56);
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray56);
        byte[] byteArray61 = base64_26.decode(byteArray56);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false, false);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray65);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, false, false, (int) (short) -1);
        java.lang.String str71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray65);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, true, false);
        java.lang.String str75 = base64_16.encodeToString(byteArray74);
        byte[] byteArray77 = base64_16.decode("aGc9PQ0K\r\n");
        org.apache.commons.codec.binary.Base64 base64_78 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray80 = base64_78.decode("hi!");
        java.lang.String str81 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray80);
        java.math.BigInteger bigInteger82 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray80);
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger82);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray83);
        byte[] byteArray85 = base64_16.decode(byteArray83);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray83, false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hg" + "'", str30, "hg");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "aGc=\r\n" + "'", str35, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hg" + "'", str39, "hg");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hg" + "'", str47, "hg");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "aGc=\r\n" + "'", str53, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hg" + "'", str57, "hg");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-122]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hg" + "'", str81, "hg");
        org.junit.Assert.assertNotNull(bigInteger82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        java.lang.String str13 = base64_8.encodeToString(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray11);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true, (int) (short) 10);
        byte[] byteArray23 = base64_1.encode(byteArray11);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg==\r\n" + "'", str16, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = base64_7.encode(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray12);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray12);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray4 = base64_0.decode("/wo=");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10]");
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3, false);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.Object obj12 = base64_8.encode((java.lang.Object) byteArray11);
        byte[] byteArray14 = null;
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray14, true);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((-1), byteArray22, true);
        byte[] byteArray27 = base64_25.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        byte[] byteArray31 = base64_25.encode(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64(0, byteArray30);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((-1), byteArray30);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        byte[] byteArray41 = base64_33.decode(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((-1), byteArray45, true);
        byte[] byteArray50 = base64_48.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray53 = base64_51.decode("hi!");
        java.lang.String str54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray53);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        java.lang.Object obj56 = base64_48.encode((java.lang.Object) byteArray53);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        java.lang.String str62 = base64_48.encodeToString(byteArray61);
        boolean boolean63 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray61);
        java.lang.String str64 = base64_33.encodeToString(byteArray61);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, true, false);
        byte[] byteArray68 = base64_16.decode(byteArray61);
        java.lang.String str69 = base64_8.encodeToString(byteArray68);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hg" + "'", str54, "hg");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "aGc" + "'", str62, "aGc");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "aGc=" + "'", str64, "aGc=");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-122]");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\ufffd" + "'", str69, "\ufffd");
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.lang.String str19 = base64_10.encodeToString(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray22);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray27 = base64_10.decode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray31);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray38 = base64_33.decode(byteArray36);
        java.lang.Object obj39 = base64_10.decode((java.lang.Object) byteArray36);
        java.lang.Object obj40 = base64_8.encode((java.lang.Object) byteArray36);
        boolean boolean41 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray45);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray49);
        byte[] byteArray51 = base64_42.encode(byteArray49);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        byte[] byteArray53 = base64_8.encode(byteArray49);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, true);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56, true, false, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (14) than the specified maxium size of 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "aGc=\r\n" + "'", str19, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[89, 85, 100, 106, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[87, 86, 86, 107, 97, 103, 48, 75]");
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        byte[] byteArray21 = base64_2.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray29, false);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray40);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, true, true);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray43, false);
        java.lang.Object obj50 = base64_35.decode((java.lang.Object) byteArray43);
        byte[] byteArray51 = base64_2.encode(byteArray43);
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray51);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, true, true, 1);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray56);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64((-1), byteArray62, true);
        byte[] byteArray67 = base64_65.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray70 = base64_68.decode("hi!");
        java.lang.String str71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray70);
        java.math.BigInteger bigInteger72 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        java.lang.Object obj73 = base64_65.encode((java.lang.Object) byteArray70);
        org.apache.commons.codec.binary.Base64 base64_74 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray76 = base64_74.decode("hi!");
        java.lang.String str77 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray76);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray76);
        java.lang.String str79 = base64_65.encodeToString(byteArray78);
        org.apache.commons.codec.binary.Base64 base64_81 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray83 = base64_81.decode("hi!");
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray83);
        org.apache.commons.codec.binary.Base64 base64_85 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray83);
        byte[] byteArray86 = base64_65.decode(byteArray83);
        org.apache.commons.codec.binary.Base64 base64_88 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray83, false);
        byte[] byteArray89 = base64_57.encode(byteArray83);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray83);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-122]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hg" + "'", str71, "hg");
        org.junit.Assert.assertNotNull(bigInteger72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-122]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hg" + "'", str77, "hg");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "aGc" + "'", str79, "aGc");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-122]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray3 = base64_1.decode("hg");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        java.lang.String str11 = base64_3.encodeToString(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray15);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        java.lang.Object obj21 = base64_3.decode((java.lang.Object) byteArray19);
        byte[] byteArray22 = base64_1.decode(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, true, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (6) than the specified maxium size of 1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((-1), byteArray28, true);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.String str36 = base64_31.encodeToString(byteArray34);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray34);
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray34);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false);
        java.lang.Object obj42 = base64_16.decode((java.lang.Object) byteArray41);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray41);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hg==\r\n" + "'", str39, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[97, 71, 99, 57, 80, 81]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "aGc9PQ==\r\n" + "'", str44, "aGc9PQ==\r\n");
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        byte[] byteArray9 = base64_0.encode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray12);
        byte[] byteArray15 = base64_0.decode(byteArray12);
        boolean boolean16 = base64_0.isUrlSafe();
        boolean boolean17 = base64_0.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg==\r\n" + "'", str14, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray1, true);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((-1), byteArray7, true);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        java.lang.Object obj12 = base64_3.decode((java.lang.Object) byteArray7);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((-1), byteArray16, true);
        byte[] byteArray21 = base64_19.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        java.lang.Object obj27 = base64_19.encode((java.lang.Object) byteArray24);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        java.lang.String str33 = base64_19.encodeToString(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        java.lang.Class<?> wildcardClass35 = byteArray32.getClass();
        java.lang.Object obj36 = base64_3.decode((java.lang.Object) byteArray32);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        boolean boolean41 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray39);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray39);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray43);
        byte[] byteArray45 = base64_3.decode(byteArray44);
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray44);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (10) than the specified maxium size of 1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hg" + "'", str25, "hg");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "aGc" + "'", str33, "aGc");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hg" + "'", str40, "hg");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "YUdjPQ0K" + "'", str46, "YUdjPQ0K");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("\ufffd");
        org.junit.Assert.assertNotNull(byteArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[97, 71, 99, 61]");
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64(0, byteArray3, true);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103, 61, 61]");
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        byte[] byteArray16 = base64_6.encode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((-1), byteArray20, true);
        byte[] byteArray25 = base64_23.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.lang.Object obj31 = base64_23.encode((java.lang.Object) byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.String str37 = base64_23.encodeToString(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        java.lang.String str40 = base64_6.encodeToString(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray46 = base64_41.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        java.lang.String str48 = base64_6.encodeToString(byteArray47);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        boolean boolean56 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray54);
        java.math.BigInteger bigInteger57 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray58);
        java.lang.String str60 = base64_51.encodeToString(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray63 = base64_61.decode("hi!");
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray63);
        boolean boolean65 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray63);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray63);
        byte[] byteArray68 = base64_51.decode(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray71 = base64_69.decode("hi!");
        java.lang.String str72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray73);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false, false);
        java.lang.String str78 = base64_51.encodeToString(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_79 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray81 = base64_79.decode("hi!");
        java.lang.String str82 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray81);
        boolean boolean83 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray81);
        java.math.BigInteger bigInteger84 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray81);
        java.lang.String str85 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray81);
        byte[] byteArray86 = base64_51.decode(byteArray81);
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86, false, false);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray90);
        org.apache.commons.codec.binary.Base64 base64_92 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray90);
        byte[] byteArray93 = base64_6.encode(byteArray90);
        org.apache.commons.codec.binary.Base64 base64_94 = new org.apache.commons.codec.binary.Base64((-1), byteArray90);
        java.lang.String str95 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray90);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "aGc" + "'", str37, "aGc");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ufffd" + "'", str40, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ufffd" + "'", str48, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hg" + "'", str55, "hg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "aGc=\r\n" + "'", str60, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hg" + "'", str64, "hg");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hg" + "'", str72, "hg");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-122]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "aGc=\r\n" + "'", str78, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-122]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hg" + "'", str82, "hg");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hg" + "'", str85, "hg");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray7);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        java.lang.String str13 = base64_4.encodeToString(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        byte[] byteArray21 = base64_4.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray25);
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        byte[] byteArray32 = base64_27.decode(byteArray30);
        java.lang.Object obj33 = base64_4.decode((java.lang.Object) byteArray30);
        byte[] byteArray34 = base64_2.decode(byteArray30);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray30);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray35);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "aGc=\r\n" + "'", str13, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hg" + "'", str17, "hg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, true);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, (int) ' ');
        java.lang.Object obj26 = base64_12.encode((java.lang.Object) byteArray25);
        byte[] byteArray27 = null;
        byte[] byteArray28 = base64_12.encode(byteArray27);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNull(byteArray28);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5);
        java.lang.String str7 = base64_0.encodeToString(byteArray6);
        byte[] byteArray9 = base64_0.decode("");
        boolean boolean10 = base64_0.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14, true);
        byte[] byteArray19 = base64_17.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((-1), byteArray23, true);
        byte[] byteArray28 = base64_26.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.Object obj34 = base64_26.encode((java.lang.Object) byteArray31);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        java.lang.String str40 = base64_26.encodeToString(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray44);
        byte[] byteArray47 = base64_26.decode(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = base64_50.decode("hi!");
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray52);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64((-1), byteArray52, true);
        byte[] byteArray57 = base64_55.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = base64_58.decode("hi!");
        java.lang.String str61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray60);
        java.math.BigInteger bigInteger62 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray60);
        java.lang.Object obj63 = base64_55.encode((java.lang.Object) byteArray60);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = base64_64.decode("hi!");
        java.lang.String str67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        java.lang.String str69 = base64_55.encodeToString(byteArray68);
        org.apache.commons.codec.binary.Base64 base64_71 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray73 = base64_71.decode("hi!");
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray73);
        byte[] byteArray76 = base64_55.decode(byteArray73);
        byte[] byteArray78 = base64_55.decode("hi!");
        byte[] byteArray81 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger82 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray81);
        java.math.BigInteger bigInteger83 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray81);
        java.math.BigInteger bigInteger84 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray81);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger84);
        java.lang.String str86 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray85);
        byte[] byteArray87 = base64_55.decode(byteArray85);
        org.apache.commons.codec.binary.Base64 base64_89 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray85, false);
        byte[] byteArray90 = base64_26.decode(byteArray85);
        java.lang.Object obj91 = base64_17.encode((java.lang.Object) byteArray85);
        byte[] byteArray95 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray85, true, false, 10);
        java.lang.String str96 = base64_0.encodeToString(byteArray95);
        byte[] byteArray97 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray95);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "aGc9PQ==" + "'", str7, "aGc9PQ==");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "aGc" + "'", str40, "aGc");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hg" + "'", str61, "hg");
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hg" + "'", str67, "hg");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "aGc" + "'", str69, "aGc");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-122]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-122]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger82);
        org.junit.Assert.assertNotNull(bigInteger83);
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[]");
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray3, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, true, (int) ' ');
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger22);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        byte[] byteArray16 = base64_6.encode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((-1), byteArray20, true);
        byte[] byteArray25 = base64_23.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.lang.Object obj31 = base64_23.encode((java.lang.Object) byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.String str37 = base64_23.encodeToString(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        java.lang.String str40 = base64_6.encodeToString(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray46 = base64_41.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        java.lang.String str48 = base64_6.encodeToString(byteArray47);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = base64_50.decode("hi!");
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray52);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray52);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray52);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        java.lang.Object obj57 = base64_6.decode((java.lang.Object) byteArray55);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray55, true);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray64 = base64_62.decode("hi!");
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray64);
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray64);
        byte[] byteArray69 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger70 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray69);
        byte[] byteArray71 = base64_66.decode(byteArray69);
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray75 = base64_73.decode("hi!");
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray75);
        org.apache.commons.codec.binary.Base64 base64_78 = new org.apache.commons.codec.binary.Base64((-1), byteArray75, true);
        byte[] byteArray80 = base64_78.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_81 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray83 = base64_81.decode("hi!");
        java.lang.String str84 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray83);
        java.math.BigInteger bigInteger85 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray83);
        java.lang.Object obj86 = base64_78.encode((java.lang.Object) byteArray83);
        java.lang.String str87 = base64_66.encodeToString(byteArray83);
        org.apache.commons.codec.binary.Base64 base64_88 = new org.apache.commons.codec.binary.Base64(100, byteArray83);
        java.math.BigInteger bigInteger89 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray83);
        byte[] byteArray90 = base64_59.encode(byteArray83);
        byte[] byteArray93 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger94 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray93);
        byte[] byteArray95 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger94);
        byte[] byteArray96 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray95);
        byte[] byteArray97 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray95);
        byte[] byteArray98 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray97);
        byte[] byteArray99 = base64_59.encode(byteArray98);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "aGc" + "'", str37, "aGc");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ufffd" + "'", str40, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ufffd" + "'", str48, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-122]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-122]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-122]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-122]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hg" + "'", str84, "hg");
        org.junit.Assert.assertNotNull(bigInteger85);
        org.junit.Assert.assertNotNull(obj86);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\ufffd" + "'", str87, "\ufffd");
        org.junit.Assert.assertNotNull(bigInteger89);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger94);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[]");
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[]");
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[]");
        org.junit.Assert.assertNotNull(byteArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray99), "[]");
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray25 = base64_16.encode(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray28 = base64_5.encode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray39 = base64_5.encode(byteArray37);
        byte[] byteArray40 = null;
        byte[] byteArray41 = base64_5.decode(byteArray40);
        byte[] byteArray43 = base64_5.decode("V2tGQlBRMEs=\r\n");
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, true);
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray46);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61, -122]");
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[87, 107, 70, 66, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[86, 50, 116, 71, 81, 108, 66, 82, 77, 69, 115]");
        org.junit.Assert.assertNotNull(bigInteger47);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, true, (int) (byte) 100);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray7);
        boolean boolean18 = base64_17.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = base64_9.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(0, byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray25 = base64_17.decode(byteArray24);
        boolean boolean26 = base64_17.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((-1), byteArray31, true);
        byte[] byteArray36 = base64_34.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        byte[] byteArray40 = base64_34.encode(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64(0, byteArray39);
        byte[] byteArray42 = null;
        byte[] byteArray43 = base64_41.encode(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray47 = base64_45.decode("hi!");
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray47);
        byte[] byteArray49 = base64_44.decode(byteArray48);
        byte[] byteArray50 = base64_41.encode(byteArray49);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        java.lang.String str56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        boolean boolean57 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray55);
        java.math.BigInteger bigInteger58 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray55);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray59);
        java.lang.String str61 = base64_52.encodeToString(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray64 = base64_62.decode("hi!");
        java.lang.String str65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray64);
        boolean boolean66 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray64);
        java.math.BigInteger bigInteger67 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray64);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray64);
        byte[] byteArray69 = base64_52.decode(byteArray64);
        org.apache.commons.codec.binary.Base64 base64_70 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray72 = base64_70.decode("hi!");
        java.lang.String str73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray72);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray72);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray74);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, false, false);
        java.lang.String str79 = base64_52.encodeToString(byteArray74);
        org.apache.commons.codec.binary.Base64 base64_81 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray83 = base64_81.decode("hi!");
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray83);
        org.apache.commons.codec.binary.Base64 base64_85 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray83);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray83, false);
        java.lang.String str88 = base64_52.encodeToString(byteArray83);
        byte[] byteArray89 = base64_41.encode(byteArray83);
        byte[] byteArray90 = base64_17.decode(byteArray89);
        org.apache.commons.codec.binary.Base64 base64_92 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray90, false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hg" + "'", str56, "hg");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "aGc=\r\n" + "'", str61, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-122]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hg" + "'", str65, "hg");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(bigInteger67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-122]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hg" + "'", str73, "hg");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-122]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "aGc=\r\n" + "'", str79, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-122]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hg==\r\n" + "'", str88, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-122]");
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("WVVkalBR\r\n");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64(0, byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [YUdjPQ]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[87, 86, 86, 107, 97, 108, 66, 82]");
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.lang.String str16 = base64_7.encodeToString(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = base64_7.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false);
        java.lang.String str34 = base64_7.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray42 = base64_7.decode(byteArray37);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false);
        java.lang.Object obj46 = base64_5.encode((java.lang.Object) byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        java.lang.Class<?> wildcardClass49 = byteArray45.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "aGc=\r\n" + "'", str16, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "aGc=\r\n" + "'", str34, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        byte[] byteArray29 = base64_6.decode("hi!");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = base64_6.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((-1), byteArray42, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42);
        java.lang.Object obj47 = base64_6.encode((java.lang.Object) byteArray42);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true);
        java.lang.Class<?> wildcardClass51 = byteArray42.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray3);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray11, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg==]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103, 61, 61]");
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5);
        java.lang.String str7 = base64_0.encodeToString(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray11);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        byte[] byteArray20 = base64_0.decode(byteArray11);
        byte[] byteArray22 = base64_0.decode("YUdjPQ==");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "aGc9PQ==" + "'", str7, "aGc9PQ==");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 61]");
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        byte[] byteArray16 = base64_6.encode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((-1), byteArray20, true);
        byte[] byteArray25 = base64_23.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.lang.Object obj31 = base64_23.encode((java.lang.Object) byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.String str37 = base64_23.encodeToString(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        java.lang.String str40 = base64_6.encodeToString(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray46 = base64_41.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        java.lang.String str48 = base64_6.encodeToString(byteArray47);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = base64_50.decode("hi!");
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray52);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray52);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray52);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        java.lang.Object obj57 = base64_6.decode((java.lang.Object) byteArray55);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray55, true);
        boolean boolean60 = base64_59.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray65 = base64_63.decode("hi!");
        byte[] byteArray67 = base64_63.decode("aGc9PQ==\r\n");
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray70 = base64_68.decode("hi!");
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70, true, false);
        byte[] byteArray75 = base64_63.decode(byteArray74);
        byte[] byteArray76 = base64_62.decode(byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj77 = base64_59.decode((java.lang.Object) base64_62);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "aGc" + "'", str37, "aGc");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ufffd" + "'", str40, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ufffd" + "'", str48, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-122]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-122]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-122]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-122]");
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray10);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((-1), byteArray16, true);
        byte[] byteArray21 = base64_19.decode("hg==\r\n");
        byte[] byteArray22 = base64_12.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((-1), byteArray26, true);
        byte[] byteArray31 = base64_29.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        java.lang.Object obj37 = base64_29.encode((java.lang.Object) byteArray34);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        java.lang.String str43 = base64_29.encodeToString(byteArray42);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false);
        java.lang.String str46 = base64_12.encodeToString(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        byte[] byteArray52 = base64_47.decode(byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray51);
        java.lang.String str54 = base64_12.encodeToString(byteArray53);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false);
        byte[] byteArray58 = base64_6.decode(byteArray57);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray59, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [YUdjPQ0K]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "aGc" + "'", str43, "aGc");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ufffd" + "'", str46, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ufffd" + "'", str54, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[89, 85, 100, 106, 80, 81, 48, 75]");
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false, (int) (byte) 10);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[97, 71, 99, 57, 80, 81]");
        org.junit.Assert.assertNotNull(bigInteger33);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false, (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        java.math.BigInteger bigInteger2 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray20);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray27 = base64_22.decode(byteArray25);
        byte[] byteArray28 = base64_16.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray31);
        byte[] byteArray38 = base64_16.decode(byteArray37);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray41);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray5, false);
        boolean boolean10 = base64_9.isUrlSafe();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = base64_1.decode((java.lang.Object) boolean10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61]");
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray5);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((-1), byteArray11, true);
        byte[] byteArray16 = base64_14.decode("hg==\r\n");
        byte[] byteArray17 = base64_7.encode(byteArray16);
        byte[] byteArray18 = base64_1.encode(byteArray17);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray18);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 57, 80, 89, 89, 61]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "YUdjOVBZWT0" + "'", str19, "YUdjOVBZWT0");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103, 61, 61, -122]");
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_9.decode("aGc");
        boolean boolean12 = base64_9.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        java.lang.String str17 = base64_9.encodeToString(byteArray15);
        byte[] byteArray19 = base64_9.decode("\ufffd");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((-1), byteArray23, true);
        byte[] byteArray28 = base64_26.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.Object obj34 = base64_26.encode((java.lang.Object) byteArray31);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        java.lang.String str40 = base64_26.encodeToString(byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray39);
        java.lang.Object obj43 = base64_9.decode((java.lang.Object) byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray39, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hg" + "'", str17, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "aGc" + "'", str40, "aGc");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj43);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        byte[] byteArray17 = base64_6.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray23 = base64_18.decode(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        java.lang.Object obj27 = base64_6.decode((java.lang.Object) byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 78, 67, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 78, 67, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3, false);
        boolean boolean8 = base64_7.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((-1), byteArray12, true);
        byte[] byteArray17 = base64_15.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.lang.Object obj23 = base64_15.encode((java.lang.Object) byteArray20);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        java.lang.String str29 = base64_15.encodeToString(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray33);
        byte[] byteArray36 = base64_15.decode(byteArray33);
        byte[] byteArray38 = base64_15.decode("hi!");
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger44);
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        byte[] byteArray47 = base64_15.decode(byteArray45);
        byte[] byteArray48 = base64_7.decode(byteArray45);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray52 = base64_50.decode("aGc=");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj53 = base64_7.encode((java.lang.Object) base64_50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "aGc" + "'", str29, "aGc");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray13);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) (byte) 10, byteArray5, false);
        boolean boolean8 = base64_7.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15, true);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        java.lang.String str23 = base64_18.encodeToString(byteArray21);
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21);
        java.lang.String str26 = base64_6.encodeToString(byteArray25);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "aGc9PQ" + "'", str26, "aGc9PQ");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        byte[] byteArray3 = base64_1.decode("hg");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray6);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true);
        byte[] byteArray11 = base64_1.encode(byteArray10);
        boolean boolean12 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[76, 51, 100, 118, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("X3dv\r\n");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[95, 119, 111]");
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (byte) 10, byteArray6, false);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray6, true);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        java.lang.String str22 = base64_10.encodeToString(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 119, 111, 61]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "L3dvPQ" + "'", str22, "L3dvPQ");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[76, 51, 100, 118, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(10, byteArray10);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray26 = base64_15.decode(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = base64_6.encode(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, true, false);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "aGc" + "'", str14, "aGc");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "YUdjPQ0K" + "'", str18, "YUdjPQ0K");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 57, 80, 81]");
        org.junit.Assert.assertNotNull(bigInteger24);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.lang.Object obj19 = base64_1.decode((java.lang.Object) byteArray17);
        boolean boolean20 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray24);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray31);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray31, true);
        boolean boolean36 = base64_35.isUrlSafe();
        byte[] byteArray38 = base64_35.decode("aGc9PQ0K");
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray38);
        byte[] byteArray40 = base64_26.decode(byteArray38);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, true);
        java.lang.Object obj43 = base64_1.decode((java.lang.Object) byteArray38);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray49 = base64_47.decode("hi!");
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((-1), byteArray49, true);
        byte[] byteArray54 = base64_52.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray57 = base64_55.decode("hi!");
        byte[] byteArray58 = base64_52.encode(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64(0, byteArray57);
        byte[] byteArray60 = null;
        byte[] byteArray61 = base64_59.encode(byteArray60);
        byte[] byteArray63 = base64_59.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray63, false);
        java.lang.String str66 = base64_1.encodeToString(byteArray63);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "aGc=\r\n" + "'", str9, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hg" + "'", str25, "hg");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[104, 103]");
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hg==\r\n" + "'", str66, "hg==\r\n");
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        byte[] byteArray19 = base64_8.decode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray25 = base64_20.decode(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.Object obj29 = base64_8.decode((java.lang.Object) byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.lang.Object obj31 = base64_1.encode((java.lang.Object) byteArray30);
        byte[] byteArray33 = base64_1.decode("/wo=\r\n");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray33);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, 119, 111, 61, 13, 10]");
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray1, true);
        byte[] byteArray5 = base64_3.decode("hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray5 = base64_0.decode(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[89, 85, 100, 106, 80, 81, 48, 75]");
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        byte[] byteArray2 = null;
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray2, false);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray10 = base64_5.decode(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        java.lang.Object obj14 = base64_4.decode((java.lang.Object) byteArray11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray11, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc=??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        boolean boolean25 = base64_16.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((-1), byteArray30, true);
        byte[] byteArray35 = base64_33.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        byte[] byteArray39 = base64_33.encode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(0, byteArray38);
        byte[] byteArray41 = null;
        byte[] byteArray42 = base64_40.encode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray48 = base64_43.decode(byteArray47);
        byte[] byteArray49 = base64_40.encode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        boolean boolean56 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray54);
        java.math.BigInteger bigInteger57 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray58);
        java.lang.String str60 = base64_51.encodeToString(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray63 = base64_61.decode("hi!");
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray63);
        boolean boolean65 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray63);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray63);
        byte[] byteArray68 = base64_51.decode(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray71 = base64_69.decode("hi!");
        java.lang.String str72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray73);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false, false);
        java.lang.String str78 = base64_51.encodeToString(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_80 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray82 = base64_80.decode("hi!");
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray82);
        org.apache.commons.codec.binary.Base64 base64_84 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray82);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, false);
        java.lang.String str87 = base64_51.encodeToString(byteArray82);
        byte[] byteArray88 = base64_40.encode(byteArray82);
        byte[] byteArray89 = base64_16.decode(byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray93 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray89, true, true, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (6) than the specified maxium size of 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hg" + "'", str55, "hg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "aGc=\r\n" + "'", str60, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hg" + "'", str64, "hg");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hg" + "'", str72, "hg");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-122]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "aGc=\r\n" + "'", str78, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-122]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hg==\r\n" + "'", str87, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-122]");
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(10, byteArray10);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray26 = base64_15.decode(byteArray23);
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.Object obj36 = base64_15.encode((java.lang.Object) byteArray35);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((-1), byteArray1);
        boolean boolean3 = base64_2.isUrlSafe();
        byte[] byteArray5 = base64_2.decode("\ufffd");
        boolean boolean6 = base64_2.isUrlSafe();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray8 = base64_3.decode(byteArray7);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        byte[] byteArray12 = base64_2.encode(byteArray7);
        java.lang.Class<?> wildcardClass13 = base64_2.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        java.lang.String str10 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        java.lang.Object obj20 = base64_2.decode((java.lang.Object) byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((-1), byteArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg==]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj20);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, true);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray7, false);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        boolean boolean22 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64(0, byteArray20, true);
        byte[] byteArray25 = base64_14.decode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray28);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        java.lang.Object obj35 = base64_14.encode((java.lang.Object) byteArray32);
        java.lang.Object obj36 = base64_13.encode((java.lang.Object) byteArray32);
        byte[] byteArray38 = null;
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((-1), byteArray43, true);
        byte[] byteArray48 = base64_46.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray51);
        boolean boolean53 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray51);
        java.math.BigInteger bigInteger54 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray51);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        boolean boolean56 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray55);
        byte[] byteArray57 = base64_46.decode(byteArray55);
        boolean boolean58 = base64_46.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray62);
        java.lang.String str64 = base64_60.encodeToString(byteArray63);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false, true, (int) (byte) 100);
        byte[] byteArray69 = base64_46.encode(byteArray68);
        byte[] byteArray70 = base64_39.encode(byteArray68);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.decodeBase64("aGc=\r\n");
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray72);
        java.lang.String str74 = base64_39.encodeToString(byteArray73);
        boolean boolean75 = base64_39.isUrlSafe();
        byte[] byteArray77 = base64_39.decode("YUdjOVBRMEs");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj78 = base64_13.encode((java.lang.Object) base64_39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hg" + "'", str52, "hg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-122]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hg==" + "'", str74, "hg==");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, true, (int) (byte) 100);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 1);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray18);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        byte[] byteArray10 = base64_8.decode("aGc");
        boolean boolean11 = base64_8.isUrlSafe();
        boolean boolean12 = base64_8.isUrlSafe();
        boolean boolean13 = base64_8.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        boolean boolean28 = base64_6.isUrlSafe();
        byte[] byteArray30 = base64_6.decode("\ufffd");
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, true, true);
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray39);
        java.lang.String str41 = base64_6.encodeToString(byteArray39);
        byte[] byteArray43 = base64_6.decode("\ufffd");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 57, 80, 81, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "YUdjOVBRDQo" + "'", str41, "YUdjOVBRDQo");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray2);
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray2);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false, (int) '4');
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false, (int) 'a');
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg==\r\n" + "'", str4, "hg==\r\n");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg==\r\n" + "'", str5, "hg==\r\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[87, 86, 86, 107, 97, 108, 66, 82]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[87, 86, 86, 107, 97, 108, 66, 82]");
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray9, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "aGc=\r\n" + "'", str12, "aGc=\r\n");
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray7 = base64_0.encode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13, true);
        byte[] byteArray18 = base64_16.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = base64_16.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64(0, byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((-1), byteArray21);
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger30);
        byte[] byteArray32 = base64_24.decode(byteArray31);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        java.lang.String str37 = base64_0.encodeToString(byteArray36);
        byte[] byteArray39 = base64_0.decode("YUdjOVBRDQo");
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 57, 80, 81, 13, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "YUdjOVBRDQo" + "'", str40, "YUdjOVBRDQo");
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        java.lang.Object obj16 = base64_8.encode((java.lang.Object) byteArray13);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        java.lang.String str22 = base64_8.encodeToString(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray26);
        byte[] byteArray29 = base64_8.decode(byteArray26);
        byte[] byteArray31 = base64_8.decode("hi!");
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger37);
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        byte[] byteArray40 = base64_8.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((-1), byteArray44, true);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44);
        java.lang.Object obj49 = base64_8.encode((java.lang.Object) byteArray44);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray53 = base64_51.decode("hi!");
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((-1), byteArray53, true);
        byte[] byteArray58 = base64_56.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        java.lang.String str62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray61);
        boolean boolean63 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray61);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray61);
        boolean boolean66 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray65);
        byte[] byteArray67 = base64_56.decode(byteArray65);
        byte[] byteArray68 = base64_8.decode(byteArray65);
        byte[] byteArray70 = base64_8.decode("\ufffd");
        byte[] byteArray71 = base64_1.encode(byteArray70);
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray75 = base64_73.decode("hi!");
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray75);
        org.apache.commons.codec.binary.Base64 base64_77 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray75);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray75);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray78);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78, true, true);
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray78);
        boolean boolean84 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray83);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray83, false);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray83);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray87, false, true);
        byte[] byteArray91 = base64_1.encode(byteArray87);
        org.apache.commons.codec.binary.Base64 base64_92 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray87);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "aGc" + "'", str22, "aGc");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hg" + "'", str62, "hg");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-122]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-122]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray6, false);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13, true);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        java.lang.String str26 = base64_16.encodeToString(byteArray25);
        byte[] byteArray27 = base64_9.encode(byteArray25);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "aGc9PQ0K" + "'", str26, "aGc9PQ0K");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "YUdjOVBRMEs" + "'", str28, "YUdjOVBRMEs");
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        java.lang.String str13 = base64_8.encodeToString(byteArray11);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64(1, byteArray11);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(0, byteArray11);
        boolean boolean19 = base64_18.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3, false);
        boolean boolean8 = base64_7.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((-1), byteArray12, true);
        byte[] byteArray17 = base64_15.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.lang.Object obj23 = base64_15.encode((java.lang.Object) byteArray20);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        java.lang.String str29 = base64_15.encodeToString(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray33);
        byte[] byteArray36 = base64_15.decode(byteArray33);
        byte[] byteArray38 = base64_15.decode("hi!");
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger44);
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        byte[] byteArray47 = base64_15.decode(byteArray45);
        byte[] byteArray48 = base64_7.decode(byteArray45);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray53 = base64_51.decode("hi!");
        java.lang.String str54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray53);
        boolean boolean55 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray53);
        java.math.BigInteger bigInteger56 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray57);
        java.lang.String str59 = base64_50.encodeToString(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        java.lang.String str63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray62);
        boolean boolean64 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray62);
        java.math.BigInteger bigInteger65 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray62);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        byte[] byteArray67 = base64_50.decode(byteArray62);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray62);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray68);
        java.lang.String str70 = base64_7.encodeToString(byteArray68);
        boolean boolean71 = base64_7.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "aGc" + "'", str29, "aGc");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hg" + "'", str54, "hg");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "aGc=\r\n" + "'", str59, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hg" + "'", str63, "hg");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(bigInteger65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-122]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "aGc9PQ0K" + "'", str70, "aGc9PQ0K");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray2);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray10);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc9PQ==\r\n" + "'", str11, "aGc9PQ==\r\n");
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray20 = base64_1.decode("aGc");
        boolean boolean21 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray30);
        java.lang.String str32 = base64_23.encodeToString(byteArray30);
        java.lang.String str33 = base64_1.encodeToString(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        boolean boolean40 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray38);
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray38);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray42);
        java.lang.String str44 = base64_35.encodeToString(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray47 = base64_45.decode("hi!");
        java.lang.String str48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray47);
        boolean boolean49 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray47);
        java.math.BigInteger bigInteger50 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray47);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray47);
        byte[] byteArray52 = base64_35.decode(byteArray47);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        java.lang.String str56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray57);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false);
        java.lang.String str62 = base64_35.encodeToString(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray65 = base64_63.decode("hi!");
        java.lang.String str66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray65);
        boolean boolean67 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray65);
        java.math.BigInteger bigInteger68 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray65);
        java.lang.String str69 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray65);
        byte[] byteArray70 = base64_35.decode(byteArray65);
        byte[] byteArray72 = null;
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64(10, byteArray72);
        org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray77 = base64_75.decode("hi!");
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray77);
        org.apache.commons.codec.binary.Base64 base64_80 = new org.apache.commons.codec.binary.Base64((-1), byteArray77, true);
        byte[] byteArray82 = base64_80.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_83 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray85 = base64_83.decode("hi!");
        java.lang.String str86 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray85);
        java.math.BigInteger bigInteger87 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray85);
        java.lang.Object obj88 = base64_80.encode((java.lang.Object) byteArray85);
        org.apache.commons.codec.binary.Base64 base64_89 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray91 = base64_89.decode("hi!");
        java.lang.String str92 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray91);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray91);
        java.lang.String str94 = base64_80.encodeToString(byteArray93);
        byte[] byteArray96 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray93, false);
        byte[] byteArray97 = base64_73.decode(byteArray93);
        byte[] byteArray98 = base64_35.encode(byteArray93);
        byte[] byteArray99 = base64_1.encode(byteArray98);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "aGc=\r\n" + "'", str32, "aGc=\r\n");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "aGc=\r\n" + "'", str33, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hg" + "'", str39, "hg");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "aGc=\r\n" + "'", str44, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hg" + "'", str48, "hg");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hg" + "'", str56, "hg");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "aGc=\r\n" + "'", str62, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-122]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hg" + "'", str66, "hg");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hg" + "'", str69, "hg");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-122]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-122]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-122]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hg" + "'", str86, "hg");
        org.junit.Assert.assertNotNull(bigInteger87);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-122]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "hg" + "'", str92, "hg");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "aGc" + "'", str94, "aGc");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[-122]");
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray99), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray5 = base64_0.decode(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false, 100);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 78, 67, 103, 61, 61]");
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray6);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((-1), byteArray32, true);
        byte[] byteArray37 = base64_35.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.lang.Object obj43 = base64_35.encode((java.lang.Object) byteArray40);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        java.lang.String str49 = base64_35.encodeToString(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray53 = base64_51.decode("hi!");
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray53);
        byte[] byteArray56 = base64_35.decode(byteArray53);
        byte[] byteArray58 = base64_35.decode("hi!");
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger62 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        java.math.BigInteger bigInteger63 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger64);
        java.lang.String str66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray65);
        byte[] byteArray67 = base64_35.decode(byteArray65);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray65, false);
        byte[] byteArray70 = base64_6.decode(byteArray65);
        java.math.BigInteger bigInteger71 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        java.math.BigInteger bigInteger72 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray70);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hg" + "'", str47, "hg");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "aGc" + "'", str49, "aGc");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(bigInteger71);
        org.junit.Assert.assertNotNull(bigInteger72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray11 = base64_1.decode(byteArray10);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("YUdj");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[97, 71, 99]");
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = base64_6.decode(byteArray11);
        boolean boolean16 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray23);
        byte[] byteArray25 = base64_6.encode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        boolean boolean34 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64(0, byteArray32, true);
        byte[] byteArray37 = base64_26.decode(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        boolean boolean42 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray40);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        java.lang.Object obj47 = base64_26.encode((java.lang.Object) byteArray44);
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger51 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger51);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray52);
        java.lang.String str54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray53);
        byte[] byteArray55 = base64_26.decode(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray58 = base64_56.decode("hi!");
        java.lang.String str59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray58);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray60);
        java.lang.String str62 = base64_26.encodeToString(byteArray61);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray61);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false, false, 10);
        byte[] byteArray68 = base64_6.encode(byteArray63);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray63);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hg" + "'", str33, "hg");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hg" + "'", str59, "hg");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hg==" + "'", str62, "hg==");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        java.lang.String str13 = base64_8.encodeToString(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray11);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true, (int) (short) 10);
        byte[] byteArray23 = base64_1.encode(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray28);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        java.lang.String str33 = base64_25.encodeToString(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32);
        byte[] byteArray36 = base64_1.encode(byteArray35);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg==\r\n" + "'", str16, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "aGc=\r\n" + "'", str33, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = base64_0.decode(byteArray27);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.Object obj41 = base64_0.encode((java.lang.Object) byteArray40);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger45 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        java.math.BigInteger bigInteger46 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        byte[] byteArray48 = base64_0.decode(byteArray47);
        java.lang.Class<?> wildcardClass49 = byteArray47.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 10]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray4, true);
        boolean boolean9 = base64_8.isUrlSafe();
        byte[] byteArray11 = base64_8.decode("aGc9PQ0K");
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger16);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray18, false);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((-1), byteArray26, true);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        java.lang.String str34 = base64_29.encodeToString(byteArray32);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, true);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64(1, byteArray32);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray32);
        byte[] byteArray40 = base64_21.decode(byteArray39);
        byte[] byteArray41 = base64_8.encode(byteArray39);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 57, 80, 81, 48, 75, -122]");
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        byte[] byteArray19 = base64_8.decode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray25 = base64_20.decode(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.Object obj29 = base64_8.decode((java.lang.Object) byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.lang.Object obj31 = base64_1.encode((java.lang.Object) byteArray30);
        java.lang.Object obj32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj33 = base64_1.encode(obj32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj31);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        byte[] byteArray10 = base64_1.encode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        byte[] byteArray16 = base64_1.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray13, false);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger24);
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, true, false);
        byte[] byteArray31 = base64_18.decode(byteArray27);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg==\r\n" + "'", str15, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = base64_0.decode(byteArray27);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.Object obj41 = base64_0.encode((java.lang.Object) byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger42);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bigInteger16);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = base64_7.encode(byteArray12);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "aGc" + "'", str15, "aGc");
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        boolean boolean22 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[89, 85, 100, 106, 80, 81]");
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true, true);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        java.lang.String str5 = base64_1.encodeToString(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, true, (int) (byte) 100);
        java.lang.Class<?> wildcardClass10 = byteArray9.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64("\ufffd");
        byte[] byteArray17 = base64_6.decode(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103, 61, 61]");
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        boolean boolean28 = base64_6.isUrlSafe();
        byte[] byteArray30 = base64_6.decode("\ufffd");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        java.lang.String str14 = base64_9.encodeToString(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray12);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, true, (int) (short) 10);
        byte[] byteArray24 = base64_2.encode(byteArray12);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, true, true, (int) ' ');
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray12, false);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray34);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true, true);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray42);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true);
        java.lang.String str47 = base64_30.encodeToString(byteArray42);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hg==\r\n" + "'", str17, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3, false);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.Object obj12 = base64_8.encode((java.lang.Object) byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103, 61, 61]");
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        byte[] byteArray3 = base64_1.decode("hg");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray6);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true);
        byte[] byteArray11 = base64_1.encode(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        boolean boolean20 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64(0, byteArray18, true);
        byte[] byteArray23 = base64_12.decode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        java.lang.Object obj33 = base64_12.encode((java.lang.Object) byteArray30);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray38);
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        byte[] byteArray41 = base64_12.decode(byteArray39);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger45 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray46);
        java.lang.String str48 = base64_12.encodeToString(byteArray47);
        byte[] byteArray50 = null;
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64(10, byteArray50);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((-1), byteArray55, true);
        byte[] byteArray60 = base64_58.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray63 = base64_61.decode("hi!");
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray63);
        java.math.BigInteger bigInteger65 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        java.lang.Object obj66 = base64_58.encode((java.lang.Object) byteArray63);
        org.apache.commons.codec.binary.Base64 base64_67 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray69 = base64_67.decode("hi!");
        java.lang.String str70 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray69);
        java.lang.String str72 = base64_58.encodeToString(byteArray71);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray71, false);
        byte[] byteArray75 = base64_51.decode(byteArray71);
        org.apache.commons.codec.binary.Base64 base64_76 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_77 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray79 = base64_77.decode("hi!");
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray79);
        byte[] byteArray81 = base64_76.decode(byteArray80);
        java.lang.Object obj82 = base64_51.encode((java.lang.Object) byteArray81);
        byte[] byteArray83 = base64_12.decode(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj84 = base64_1.decode((java.lang.Object) base64_12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[76, 51, 100, 118, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hg" + "'", str64, "hg");
        org.junit.Assert.assertNotNull(bigInteger65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-122]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hg" + "'", str70, "hg");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "aGc" + "'", str72, "aGc");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-122]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-122]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-122]");
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        java.lang.String str14 = base64_9.encodeToString(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray12);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, true, (int) (short) 10);
        byte[] byteArray24 = base64_2.encode(byteArray12);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, true, true, (int) ' ');
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray12, false);
        byte[] byteArray32 = base64_30.decode("V2tGQlBRMEs=\r\n");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hg==\r\n" + "'", str17, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[87, 107, 70, 66, 80, 81, 48, 75]");
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        boolean boolean25 = base64_16.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((-1), byteArray30, true);
        byte[] byteArray35 = base64_33.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        byte[] byteArray39 = base64_33.encode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(0, byteArray38);
        byte[] byteArray41 = null;
        byte[] byteArray42 = base64_40.encode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray48 = base64_43.decode(byteArray47);
        byte[] byteArray49 = base64_40.encode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        boolean boolean56 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray54);
        java.math.BigInteger bigInteger57 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray58);
        java.lang.String str60 = base64_51.encodeToString(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray63 = base64_61.decode("hi!");
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray63);
        boolean boolean65 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray63);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray63);
        byte[] byteArray68 = base64_51.decode(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray71 = base64_69.decode("hi!");
        java.lang.String str72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray73);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false, false);
        java.lang.String str78 = base64_51.encodeToString(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_80 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray82 = base64_80.decode("hi!");
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray82);
        org.apache.commons.codec.binary.Base64 base64_84 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray82);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, false);
        java.lang.String str87 = base64_51.encodeToString(byteArray82);
        byte[] byteArray88 = base64_40.encode(byteArray82);
        byte[] byteArray89 = base64_16.decode(byteArray88);
        java.lang.String str90 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray88);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray88);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hg" + "'", str55, "hg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "aGc=\r\n" + "'", str60, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hg" + "'", str64, "hg");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hg" + "'", str72, "hg");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-122]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "aGc=\r\n" + "'", str78, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-122]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hg==\r\n" + "'", str87, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-122]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "aGc9PQ==\r\n" + "'", str90, "aGc9PQ==\r\n");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-122]");
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false);
        java.lang.String str28 = base64_1.encodeToString(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray36 = base64_1.decode(byteArray31);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, true, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "aGc=\r\n" + "'", str28, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "YUdjPQ" + "'", str9, "YUdjPQ");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("YUdjOVBZWT0");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[97, 71, 99, 57, 80, 89, 89, 61]");
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true, true);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(bigInteger17);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] { (byte) 100, (byte) 0 };
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true);
        java.lang.Object obj7 = base64_1.decode((java.lang.Object) byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        boolean boolean20 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false);
        byte[] byteArray23 = base64_1.decode(byteArray19);
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[90, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (byte) 1);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        byte[] byteArray18 = base64_12.encode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64(0, byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((-1), byteArray17);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(10, byteArray17);
        java.lang.Object obj22 = base64_2.encode((java.lang.Object) byteArray17);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray17);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103, 61, 61]");
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        byte[] byteArray19 = base64_8.decode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray25 = base64_20.decode(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.Object obj29 = base64_8.decode((java.lang.Object) byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.lang.Object obj31 = base64_1.encode((java.lang.Object) byteArray30);
        byte[] byteArray33 = base64_1.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40);
        java.lang.String str43 = base64_1.encodeToString(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, true);
        byte[] byteArray53 = base64_1.decode(byteArray52);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64((-1), byteArray59, true);
        byte[] byteArray64 = base64_62.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray67 = base64_65.decode("hi!");
        byte[] byteArray68 = base64_62.encode(byteArray67);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64(0, byteArray67);
        org.apache.commons.codec.binary.Base64 base64_70 = new org.apache.commons.codec.binary.Base64((-1), byteArray67);
        java.lang.Object obj71 = base64_1.decode((java.lang.Object) byteArray67);
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64(0);
        org.apache.commons.codec.binary.Base64 base64_74 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray76 = base64_74.decode("hi!");
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray76);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray77);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray77);
        java.lang.String str80 = base64_73.encodeToString(byteArray79);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray79, true);
        byte[] byteArray83 = base64_1.encode(byteArray79);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "aGc=\r\n" + "'", str43, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hg" + "'", str47, "hg");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-122]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[104, 103]");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-122]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-122]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[97, 71, 99, 57, 80, 81]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "YUdjOVBR" + "'", str80, "YUdjOVBR");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[89, 85, 100, 106, 79, 86, 66, 82, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[89, 85, 100, 106, 79, 86, 66, 82, 13, 10]");
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray4);
        byte[] byteArray11 = base64_9.decode("YUdjPQ==");
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15, true);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        java.lang.String str23 = base64_18.encodeToString(byteArray21);
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21);
        byte[] byteArray26 = base64_9.decode(byteArray21);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger27);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((-1), byteArray28);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] { (byte) 100, (byte) 0 };
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true);
        java.lang.Object obj7 = base64_1.decode((java.lang.Object) byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        boolean boolean20 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false);
        byte[] byteArray23 = base64_1.decode(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23);
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray23);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[90, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray16 = base64_7.decode(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger18);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((int) (byte) 10, byteArray19);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = base64_7.encode(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray12);
        byte[] byteArray15 = null;
        byte[] byteArray16 = base64_14.encode(byteArray15);
        byte[] byteArray18 = base64_14.decode("hi!");
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        java.lang.Object obj26 = base64_14.encode((java.lang.Object) byteArray25);
        byte[] byteArray28 = base64_14.decode("YUdjOVBRMEs=\r\n");
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, (int) ' ');
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false);
        byte[] byteArray46 = base64_14.decode(byteArray45);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 61]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 61]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray6 = base64_2.decode("aGc9PQ==\r\n");
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false);
        byte[] byteArray14 = base64_2.decode(byteArray13);
        byte[] byteArray15 = base64_1.decode(byteArray13);
        boolean boolean16 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("YUdjOVBRDQo=\r\n");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[97, 71, 99, 57, 80, 81, 13, 10]");
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false);
        java.lang.String str28 = base64_1.encodeToString(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray36 = base64_1.decode(byteArray31);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray40);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, false, false, (int) (short) -1);
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "aGc=\r\n" + "'", str28, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3, false);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.Object obj12 = base64_8.encode((java.lang.Object) byteArray11);
        boolean boolean13 = base64_8.isUrlSafe();
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger19);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger19);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false);
        byte[] byteArray28 = base64_8.encode(byteArray27);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        byte[] byteArray29 = base64_6.decode("hi!");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = base64_6.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray42);
        boolean boolean48 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray42);
        byte[] byteArray49 = base64_6.encode(byteArray42);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hg" + "'", str43, "hg");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false);
        java.lang.String str28 = base64_1.encodeToString(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false);
        java.lang.String str37 = base64_1.encodeToString(byteArray32);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "aGc=\r\n" + "'", str28, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg==\r\n" + "'", str37, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray20 = base64_1.decode("aGc");
        byte[] byteArray22 = base64_1.decode("\ufffd");
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((-1), byteArray26, true);
        byte[] byteArray31 = base64_29.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        java.lang.Object obj37 = base64_29.encode((java.lang.Object) byteArray34);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        java.lang.String str43 = base64_29.encodeToString(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray47 = base64_45.decode("hi!");
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray47);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray47);
        byte[] byteArray50 = base64_29.decode(byteArray47);
        byte[] byteArray52 = base64_29.decode("hi!");
        byte[] byteArray55 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger56 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray55);
        java.math.BigInteger bigInteger57 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray55);
        java.math.BigInteger bigInteger58 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray55);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger58);
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        byte[] byteArray61 = base64_29.decode(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray65 = base64_63.decode("hi!");
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray65);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64((-1), byteArray65, true);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65);
        java.lang.Object obj70 = base64_29.encode((java.lang.Object) byteArray65);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, true, true);
        java.lang.Object obj74 = base64_1.decode((java.lang.Object) byteArray73);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "aGc" + "'", str43, "aGc");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-122]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(obj74);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        java.lang.String str13 = base64_8.encodeToString(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray11);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true, (int) (short) 10);
        byte[] byteArray23 = base64_1.encode(byteArray11);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg==\r\n" + "'", str16, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(1, byteArray9);
        byte[] byteArray12 = base64_10.decode("aGc9PYY=");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 57, 80, 89, 89, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[89, 85, 100, 106, 79, 86, 66, 90, 87, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray10, false);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray20, false);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64(false);
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger31);
        byte[] byteArray34 = base64_27.decode(byteArray33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, false);
        java.lang.String str38 = base64_25.encodeToString(byteArray37);
        byte[] byteArray39 = base64_16.decode(byteArray37);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        byte[] byteArray16 = null;
        byte[] byteArray17 = base64_15.encode(byteArray16);
        byte[] byteArray19 = base64_15.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray19, false);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((-1), byteArray27, true);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        java.lang.String str35 = base64_30.encodeToString(byteArray33);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray33);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray33);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, true, (int) (short) 10);
        byte[] byteArray45 = base64_23.encode(byteArray33);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46);
        java.lang.Object obj48 = base64_21.decode((java.lang.Object) byteArray47);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg==\r\n" + "'", str38, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj48);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        java.lang.Object obj15 = base64_5.decode((java.lang.Object) byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger16);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hg" + "'", str9, "hg");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "YUdjPQ0K\r\n" + "'", str14, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "YUdjPQ" + "'", str18, "YUdjPQ");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((-1), byteArray28, true);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.String str36 = base64_31.encodeToString(byteArray34);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray34);
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray34);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false);
        java.lang.Object obj42 = base64_16.decode((java.lang.Object) byteArray41);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray48 = base64_43.decode(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray47);
        java.math.BigInteger bigInteger50 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray47);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger50);
        java.lang.String str53 = base64_16.encodeToString(byteArray52);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hg==\r\n" + "'", str39, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "aGc9PQ==" + "'", str53, "aGc9PQ==");
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray3 = base64_1.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray9);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray16 = base64_11.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((-1), byteArray20, true);
        byte[] byteArray25 = base64_23.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.lang.Object obj31 = base64_23.encode((java.lang.Object) byteArray28);
        java.lang.String str32 = base64_11.encodeToString(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64(100, byteArray28);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray36);
        java.lang.String str38 = base64_1.encodeToString(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = base64_39.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray45);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64(0, byteArray45, true);
        byte[] byteArray50 = base64_39.decode(byteArray45);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        java.lang.String str56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        boolean boolean57 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray55);
        java.math.BigInteger bigInteger58 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray55);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray59);
        java.lang.String str61 = base64_52.encodeToString(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray64 = base64_62.decode("hi!");
        java.lang.String str65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray64);
        boolean boolean66 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray64);
        java.math.BigInteger bigInteger67 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray64);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray64);
        byte[] byteArray69 = base64_52.decode(byteArray64);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray64);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray64, false, false);
        byte[] byteArray74 = base64_39.decode(byteArray64);
        byte[] byteArray76 = base64_39.decode("");
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray76);
        byte[] byteArray78 = base64_1.decode(byteArray77);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78, true, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd" + "'", str32, "\ufffd");
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hg" + "'", str56, "hg");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "aGc=\r\n" + "'", str61, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-122]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hg" + "'", str65, "hg");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(bigInteger67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray11);
        byte[] byteArray14 = base64_12.decode("YUdjOVBRMEs=\r\n");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((-1), byteArray20, true);
        byte[] byteArray25 = base64_23.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        byte[] byteArray29 = base64_23.encode(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(0, byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((-1), byteArray28);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray36);
        byte[] byteArray39 = base64_31.decode(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, true, true, (int) (byte) 100);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47);
        boolean boolean50 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray47);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray47);
        byte[] byteArray52 = base64_12.decode(byteArray47);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("\ufffd");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray1);
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray2);
        org.junit.Assert.assertNotNull(byteArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[90, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 0]");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ZAA=\r\n" + "'", str3, "ZAA=\r\n");
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(0);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        java.lang.String str8 = base64_1.encodeToString(byteArray7);
        boolean boolean9 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13, true);
        byte[] byteArray18 = base64_16.decode("hg==\r\n");
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        byte[] byteArray25 = base64_16.decode(byteArray21);
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray27 = base64_1.encode(byteArray25);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[97, 71, 99, 57, 80, 81]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "YUdjOVBR" + "'", str8, "YUdjOVBR");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        boolean boolean2 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64(0);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        java.lang.String str11 = base64_4.encodeToString(byteArray10);
        byte[] byteArray12 = base64_1.decode(byteArray10);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 57, 80, 81]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "YUdjOVBR" + "'", str11, "YUdjOVBR");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103, 61, 61]");
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        byte[] byteArray19 = base64_8.decode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray25 = base64_20.decode(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.Object obj29 = base64_8.decode((java.lang.Object) byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.lang.Object obj31 = base64_1.encode((java.lang.Object) byteArray30);
        byte[] byteArray33 = base64_1.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40);
        java.lang.String str43 = base64_1.encodeToString(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, true);
        byte[] byteArray53 = base64_1.decode(byteArray52);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "aGc=\r\n" + "'", str43, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hg" + "'", str47, "hg");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[104, 103, 61, 61]");
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (byte) 10, byteArray7, false);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray7, true);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false);
        java.lang.String str23 = base64_11.encodeToString(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((-1), byteArray22, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [/wo=]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 61]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "L3dvPQ" + "'", str23, "L3dvPQ");
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 10);
        boolean boolean2 = base64_1.isUrlSafe();
        byte[] byteArray4 = base64_1.decode("L3dvPQ0K\r\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[47, 119, 111, 61, 13, 10]");
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc9PQ0K" + "'", str21, "aGc9PQ0K");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(bigInteger7);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("WVVkalBRPT0");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[89, 85, 100, 106, 80, 81, 61, 61]");
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64(0, byteArray2, true);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(bigInteger5);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        java.lang.String str22 = base64_13.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        byte[] byteArray30 = base64_13.decode(byteArray25);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false);
        byte[] byteArray35 = base64_0.decode(byteArray25);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hg" + "'", str17, "hg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "aGc=\r\n" + "'", str22, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hg" + "'", str26, "hg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        java.lang.String str20 = base64_11.encodeToString(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        boolean boolean25 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray23);
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray28 = base64_11.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray32);
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        byte[] byteArray39 = base64_34.decode(byteArray37);
        java.lang.Object obj40 = base64_11.decode((java.lang.Object) byteArray37);
        java.lang.Object obj41 = base64_9.encode((java.lang.Object) byteArray37);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray37, false);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.decodeBase64("hg");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        byte[] byteArray47 = base64_43.encode(byteArray45);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray53 = base64_51.decode("hi!");
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((-1), byteArray53, true);
        byte[] byteArray58 = base64_56.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        byte[] byteArray62 = base64_56.encode(byteArray61);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64(0, byteArray61);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((-1), byteArray61);
        byte[] byteArray67 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger68 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray67);
        java.math.BigInteger bigInteger69 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray67);
        java.math.BigInteger bigInteger70 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray67);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger70);
        byte[] byteArray72 = base64_64.decode(byteArray71);
        boolean boolean73 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray71);
        java.lang.String str74 = base64_43.encodeToString(byteArray71);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray75);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc=\r\n" + "'", str20, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103, 61, 61, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(bigInteger69);
        org.junit.Assert.assertNotNull(bigInteger70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray9);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15, true);
        byte[] byteArray20 = base64_18.decode("hg==\r\n");
        byte[] byteArray21 = base64_11.encode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((-1), byteArray25, true);
        byte[] byteArray30 = base64_28.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        java.lang.Object obj36 = base64_28.encode((java.lang.Object) byteArray33);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        java.lang.String str42 = base64_28.encodeToString(byteArray41);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false);
        java.lang.String str45 = base64_11.encodeToString(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray49 = base64_47.decode("hi!");
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        byte[] byteArray51 = base64_46.decode(byteArray50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray50);
        java.lang.String str53 = base64_11.encodeToString(byteArray52);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray52);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false);
        byte[] byteArray57 = base64_5.decode(byteArray56);
        java.lang.Class<?> wildcardClass58 = base64_5.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hg" + "'", str40, "hg");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "aGc" + "'", str42, "aGc");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ufffd" + "'", str45, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ufffd" + "'", str53, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.lang.String str19 = base64_10.encodeToString(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray22);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray27 = base64_10.decode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray31);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray38 = base64_33.decode(byteArray36);
        java.lang.Object obj39 = base64_10.decode((java.lang.Object) byteArray36);
        java.lang.Object obj40 = base64_8.encode((java.lang.Object) byteArray36);
        byte[] byteArray42 = base64_8.decode("aGc9PQ0K");
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, false, (int) '#');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "aGc=\r\n" + "'", str19, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray1, true);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((-1), byteArray7, true);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        java.lang.Object obj12 = base64_3.decode((java.lang.Object) byteArray7);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((-1), byteArray16, true);
        byte[] byteArray21 = base64_19.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        java.lang.Object obj27 = base64_19.encode((java.lang.Object) byteArray24);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        java.lang.String str33 = base64_19.encodeToString(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        java.lang.Class<?> wildcardClass35 = byteArray32.getClass();
        java.lang.Object obj36 = base64_3.decode((java.lang.Object) byteArray32);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        boolean boolean41 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray39);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray39);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray43);
        byte[] byteArray45 = base64_3.decode(byteArray44);
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray44);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, false, (int) '#');
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hg" + "'", str25, "hg");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "aGc" + "'", str33, "aGc");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hg" + "'", str40, "hg");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "YUdjPQ0K" + "'", str46, "YUdjPQ0K");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99, 61]");
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        java.lang.Class<?> wildcardClass22 = byteArray18.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        byte[] byteArray11 = base64_0.encode(byteArray7);
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(bigInteger12);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        byte[] byteArray9 = base64_0.encode(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertNotNull(bigInteger12);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        byte[] byteArray17 = base64_6.decode(byteArray15);
        boolean boolean18 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        java.lang.String str24 = base64_20.encodeToString(byteArray23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, true, (int) (byte) 100);
        byte[] byteArray29 = base64_6.encode(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((-1), byteArray33, true);
        byte[] byteArray38 = base64_36.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = base64_39.decode("hi!");
        java.lang.String str42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray41);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        java.lang.Object obj44 = base64_36.encode((java.lang.Object) byteArray41);
        byte[] byteArray46 = base64_36.decode("aGc=");
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false);
        java.lang.String str50 = base64_6.encodeToString(byteArray49);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hg" + "'", str42, "hg");
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "aGc9PQ" + "'", str50, "aGc9PQ");
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        byte[] byteArray16 = null;
        byte[] byteArray17 = base64_15.encode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray23 = base64_18.decode(byteArray22);
        byte[] byteArray24 = base64_15.encode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        boolean boolean31 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray29);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray33);
        java.lang.String str35 = base64_26.encodeToString(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        boolean boolean40 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray38);
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray38);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        byte[] byteArray43 = base64_26.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray48);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false, false);
        java.lang.String str53 = base64_26.encodeToString(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray57 = base64_55.decode("hi!");
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray57);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false);
        java.lang.String str62 = base64_26.encodeToString(byteArray57);
        byte[] byteArray63 = base64_15.encode(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg==]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hg" + "'", str30, "hg");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "aGc=\r\n" + "'", str35, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hg" + "'", str39, "hg");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hg" + "'", str47, "hg");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "aGc=\r\n" + "'", str53, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hg==\r\n" + "'", str62, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103, 61, 61]");
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64(0, byteArray28, true);
        byte[] byteArray33 = base64_22.decode(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        java.lang.Object obj43 = base64_22.encode((java.lang.Object) byteArray40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray48);
        java.lang.String str50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        byte[] byteArray51 = base64_22.decode(byteArray49);
        java.lang.String str52 = base64_0.encodeToString(byteArray49);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        java.lang.String str56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray57);
        java.lang.Object obj59 = base64_0.encode((java.lang.Object) byteArray58);
        boolean boolean60 = base64_0.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hg" + "'", str56, "hg");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(10, byteArray10);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray26 = base64_15.decode(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 57, 80, 81, 61, 61]");
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray8);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[76, 51, 100, 118, 80, 81, 61, 61]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "TDNkdlBRPT0=\r\n" + "'", str9, "TDNkdlBRPT0=\r\n");
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray20 = base64_1.decode("aGc");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        boolean boolean22 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray21);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray16 = base64_7.decode(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray12, true);
        byte[] byteArray20 = base64_18.decode("YUdjOVBRMEs");
        byte[] byteArray23 = new byte[] { (byte) 100, (byte) 0 };
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, true);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray29);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        boolean boolean32 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray29);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true);
        byte[] byteArray36 = base64_18.decode(byteArray35);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray35);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[90, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[87, 107, 70, 66, 80, 81, 48, 75]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[86, 50, 116, 71, 81, 108, 66, 82, 77, 69, 115, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[87, 107, 70, 66, 80, 81, 48, 75]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        byte[] byteArray10 = base64_1.encode(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray8);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray15, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        java.lang.Object obj15 = base64_5.decode((java.lang.Object) byteArray13);
        boolean boolean16 = base64_5.isUrlSafe();
        byte[] byteArray18 = base64_5.decode("YUdjOVBRMEs");
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64(0, byteArray24, true);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        boolean boolean34 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray36);
        java.lang.String str38 = base64_29.encodeToString(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = base64_39.decode("hi!");
        java.lang.String str42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray41);
        boolean boolean43 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray41);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        byte[] byteArray46 = base64_29.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray50);
        byte[] byteArray55 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger56 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray55);
        byte[] byteArray57 = base64_52.decode(byteArray55);
        java.lang.Object obj58 = base64_29.decode((java.lang.Object) byteArray55);
        java.lang.Object obj59 = base64_27.encode((java.lang.Object) byteArray55);
        boolean boolean60 = base64_27.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray64 = base64_62.decode("hi!");
        java.lang.String str65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray64);
        boolean boolean66 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray64);
        java.math.BigInteger bigInteger67 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray64);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray64);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray68);
        byte[] byteArray70 = base64_61.encode(byteArray68);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray68);
        byte[] byteArray72 = base64_27.encode(byteArray68);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray72, true);
        java.lang.String str75 = base64_5.encodeToString(byteArray74);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, true, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hg" + "'", str9, "hg");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "YUdjPQ0K\r\n" + "'", str14, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hg" + "'", str33, "hg");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "aGc=\r\n" + "'", str38, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hg" + "'", str42, "hg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-122]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hg" + "'", str65, "hg");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(bigInteger67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[89, 85, 100, 106, 13, 10]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "WVVkag0K" + "'", str75, "WVVkag0K");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[87, 86, 86, 107, 97, 103, 48, 75, 13, 10]");
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = base64_9.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(0, byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray25 = base64_17.decode(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, false);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray24);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true);
        java.lang.String str37 = base64_29.encodeToString(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((-1), byteArray43, true);
        byte[] byteArray48 = base64_46.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        byte[] byteArray52 = base64_46.encode(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64(0, byteArray51);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((-1), byteArray51);
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger58 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray57);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger58);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray59);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray59);
        byte[] byteArray62 = base64_54.decode(byteArray61);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, true, true, (int) (byte) 100);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, false);
        java.lang.Object obj70 = base64_29.decode((java.lang.Object) byteArray69);
        java.lang.String str71 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray69);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "L3dvPQ0K" + "'", str37, "L3dvPQ0K");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray10, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true, false);
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg==\r\n" + "'", str22, "hg==\r\n");
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = base64_9.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(0, byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray25 = base64_17.decode(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, true, (int) (byte) 100);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray35, false);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, true);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[97, 71, 99, 78, 67, 103]");
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8);
        byte[] byteArray12 = base64_1.encode(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[97, 71, 99, 61]");
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        byte[] byteArray16 = base64_6.decode("aGc=");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray20);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray27 = base64_22.decode(byteArray25);
        byte[] byteArray29 = null;
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(10, byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((-1), byteArray34, true);
        byte[] byteArray39 = base64_37.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray42);
        java.lang.Object obj45 = base64_37.encode((java.lang.Object) byteArray42);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray48 = base64_46.decode("hi!");
        java.lang.String str49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray48);
        java.lang.String str51 = base64_37.encodeToString(byteArray50);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false);
        byte[] byteArray54 = base64_30.decode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray58 = base64_56.decode("hi!");
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        byte[] byteArray60 = base64_55.decode(byteArray59);
        java.lang.Object obj61 = base64_30.encode((java.lang.Object) byteArray60);
        java.lang.Object obj62 = base64_22.decode((java.lang.Object) byteArray60);
        byte[] byteArray63 = base64_6.encode(byteArray60);
        byte[] byteArray67 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger68 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray67);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger68);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger68);
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64(0, byteArray70, false);
        byte[] byteArray73 = base64_6.decode(byteArray70);
        boolean boolean74 = base64_6.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hg" + "'", str43, "hg");
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hg" + "'", str49, "hg");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "aGc" + "'", str51, "aGc");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        byte[] byteArray19 = base64_8.decode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray25 = base64_20.decode(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.Object obj29 = base64_8.decode((java.lang.Object) byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.lang.Object obj31 = base64_1.encode((java.lang.Object) byteArray30);
        byte[] byteArray33 = base64_1.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40);
        java.lang.String str43 = base64_1.encodeToString(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, true);
        byte[] byteArray53 = base64_1.decode(byteArray52);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false, false);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54);
        java.math.BigInteger bigInteger59 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray58);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "aGc=\r\n" + "'", str43, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hg" + "'", str47, "hg");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[97, 71, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[97, 71, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger59);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("YUdjPYY");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[97, 71, 99, 61, -122]");
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray10);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        boolean boolean15 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((-1), byteArray21, true);
        byte[] byteArray26 = base64_24.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        byte[] byteArray30 = base64_24.encode(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64(0, byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((-1), byteArray29);
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        byte[] byteArray40 = base64_32.decode(byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, true, true, (int) (byte) 100);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false);
        byte[] byteArray48 = base64_6.decode(byteArray47);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, true);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray3);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg==\r\n" + "'", str13, "hg==\r\n");
        org.junit.Assert.assertNotNull(bigInteger14);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3, false);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray20);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray27 = base64_22.decode(byteArray25);
        byte[] byteArray28 = base64_16.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray31);
        byte[] byteArray38 = base64_16.decode(byteArray37);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray42);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 78, 67, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(bigInteger35);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        java.lang.Class<?> wildcardClass11 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "aGc=\r\n" + "'", str9, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.lang.String str29 = base64_2.encodeToString(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        boolean boolean34 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        byte[] byteArray37 = base64_2.decode(byteArray32);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray41);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, true, false, 100);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "aGc=\r\n" + "'", str29, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hg" + "'", str33, "hg");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false, false);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        java.lang.String str13 = base64_8.encodeToString(byteArray11);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64(1, byteArray11);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(0, byteArray11);
        byte[] byteArray20 = base64_18.decode("aGc9PQ0K");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("YUdjPQ==");
        java.lang.String str2 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray1);
        boolean boolean3 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "YUdjPQ==\r\n" + "'", str2, "YUdjPQ==\r\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray20);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray27 = base64_22.decode(byteArray25);
        byte[] byteArray28 = base64_16.decode(byteArray27);
        java.lang.Class<?> wildcardClass29 = byteArray27.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        byte[] byteArray0 = null;
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, true, false);
        org.junit.Assert.assertNull(byteArray3);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = base64_9.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(0, byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray25 = base64_17.decode(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, true, (int) (byte) 100);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, (int) (byte) -1);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray37, true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(1, byteArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg==]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 61, 61]");
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray15);
        java.lang.Object obj18 = base64_7.encode((java.lang.Object) byteArray15);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray15, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/wo=\r\n" + "'", str17, "/wo=\r\n");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "/wo=\r\n" + "'", str19, "/wo=\r\n");
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((-1), byteArray19, true);
        byte[] byteArray24 = base64_22.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        java.lang.Object obj30 = base64_22.encode((java.lang.Object) byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        java.lang.String str36 = base64_22.encodeToString(byteArray35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false);
        java.lang.String str39 = base64_5.encodeToString(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        byte[] byteArray45 = base64_40.decode(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        java.lang.String str47 = base64_5.encodeToString(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray51);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray51);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        java.lang.Object obj56 = base64_5.decode((java.lang.Object) byteArray54);
        boolean boolean57 = base64_5.isUrlSafe();
        byte[] byteArray59 = null;
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64(10, byteArray59);
        byte[] byteArray62 = base64_60.decode("hg");
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray62);
        byte[] byteArray64 = base64_5.decode(byteArray63);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "aGc" + "'", str36, "aGc");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ufffd" + "'", str39, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ufffd" + "'", str47, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15, true);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        java.lang.String str23 = base64_18.encodeToString(byteArray21);
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21);
        java.lang.String str26 = base64_6.encodeToString(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((-1), byteArray32, true);
        byte[] byteArray37 = base64_35.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        byte[] byteArray41 = base64_35.encode(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64(0, byteArray40);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((-1), byteArray40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        byte[] byteArray51 = base64_43.decode(byteArray50);
        byte[] byteArray53 = base64_43.decode("hg==");
        boolean boolean54 = base64_43.isUrlSafe();
        byte[] byteArray56 = base64_43.decode("L3dvPQ");
        java.lang.String str57 = base64_6.encodeToString(byteArray56);
        byte[] byteArray59 = base64_6.decode("YUdjPQ0K");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "aGc9PQ" + "'", str26, "aGc9PQ");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[47, 119, 111, 61]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "L3dvPQ" + "'", str57, "L3dvPQ");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[97, 71, 99, 61, 13, 10]");
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, false, (int) ' ');
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray4);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray4);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(bigInteger14);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger15);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray10, false);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64(0, byteArray22, true);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        boolean boolean32 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray30);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray34);
        java.lang.String str36 = base64_27.encodeToString(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        boolean boolean41 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray39);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray39);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        byte[] byteArray44 = base64_27.decode(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray48 = base64_46.decode("hi!");
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray48);
        byte[] byteArray53 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger54 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        byte[] byteArray55 = base64_50.decode(byteArray53);
        java.lang.Object obj56 = base64_27.decode((java.lang.Object) byteArray53);
        java.lang.Object obj57 = base64_25.encode((java.lang.Object) byteArray53);
        boolean boolean58 = base64_25.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        java.lang.String str63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray62);
        boolean boolean64 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray62);
        java.math.BigInteger bigInteger65 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray62);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray66);
        byte[] byteArray68 = base64_59.encode(byteArray66);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray66);
        byte[] byteArray70 = base64_25.encode(byteArray66);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, true, true);
        byte[] byteArray75 = base64_16.encode(byteArray66);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "aGc=\r\n" + "'", str36, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hg" + "'", str40, "hg");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hg" + "'", str63, "hg");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(bigInteger65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-122]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[97, 71, 99, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[97, 71, 99, 61]");
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(false);
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger7);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = base64_1.decode(byteArray10);
        java.lang.Class<?> wildcardClass13 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.lang.Object obj19 = base64_1.decode((java.lang.Object) byteArray17);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, (int) (byte) 100);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "aGc=\r\n" + "'", str9, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[89, 85, 100, 106, 79, 86, 66, 82, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[89, 85, 100, 106, 79, 86, 66, 82, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[89, 85, 100, 106, 79, 86, 66, 82, 80, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray4, false);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.Object obj13 = base64_9.encode((java.lang.Object) byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray12, true);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray12);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray18);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str21 = base64_7.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray25);
        byte[] byteArray28 = base64_7.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray25, true);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        boolean boolean35 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray33);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39);
        byte[] byteArray41 = base64_30.decode(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray45);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49);
        byte[] byteArray53 = base64_42.encode(byteArray49);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray57 = base64_55.decode("hi!");
        java.lang.String str58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray57);
        java.math.BigInteger bigInteger59 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray57);
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray57, false);
        byte[] byteArray64 = base64_62.decode("\ufffd");
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray64);
        byte[] byteArray66 = base64_42.decode(byteArray65);
        java.lang.Object obj67 = base64_30.encode((java.lang.Object) byteArray66);
        org.apache.commons.codec.binary.Base64 base64_70 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray72 = base64_70.decode("hi!");
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray72);
        org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64((-1), byteArray72, true);
        byte[] byteArray77 = base64_75.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_78 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray80 = base64_78.decode("hi!");
        byte[] byteArray81 = base64_75.encode(byteArray80);
        org.apache.commons.codec.binary.Base64 base64_82 = new org.apache.commons.codec.binary.Base64(0, byteArray80);
        byte[] byteArray84 = base64_82.decode("aGc=");
        org.apache.commons.codec.binary.Base64 base64_86 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray88 = base64_86.decode("hi!");
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray88);
        org.apache.commons.codec.binary.Base64 base64_90 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray88);
        java.lang.String str91 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray88);
        java.lang.Object obj92 = base64_82.decode((java.lang.Object) byteArray88);
        java.lang.Object obj93 = base64_30.decode(obj92);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hg" + "'", str58, "hg");
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-122]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-122]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-122]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-122]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hg" + "'", str91, "hg");
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertNotNull(obj93);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray22 = base64_13.decode(byteArray18);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        java.lang.String str27 = base64_6.encodeToString(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64(0, byteArray22, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        boolean boolean2 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray8 = base64_3.decode(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        java.lang.Object obj10 = base64_1.encode((java.lang.Object) byteArray7);
        byte[] byteArray12 = null;
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((-1), byteArray17, true);
        byte[] byteArray22 = base64_20.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray29);
        byte[] byteArray31 = base64_20.decode(byteArray29);
        boolean boolean32 = base64_20.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray36);
        java.lang.String str38 = base64_34.encodeToString(byteArray37);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, true, (int) (byte) 100);
        byte[] byteArray43 = base64_20.encode(byteArray42);
        byte[] byteArray44 = base64_13.encode(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray48 = base64_46.decode("hi!");
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((-1), byteArray48, true);
        byte[] byteArray53 = base64_51.decode("hg==\r\n");
        byte[] byteArray56 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger57 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray56);
        java.math.BigInteger bigInteger58 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray56);
        java.math.BigInteger bigInteger59 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray56);
        byte[] byteArray60 = base64_51.decode(byteArray56);
        boolean boolean61 = base64_51.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray64 = base64_62.decode("hi!");
        java.lang.String str65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray64);
        boolean boolean66 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray64);
        java.math.BigInteger bigInteger67 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray64);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray64);
        boolean boolean69 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray68);
        byte[] byteArray70 = base64_51.encode(byteArray68);
        java.lang.String str71 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray68);
        byte[] byteArray72 = base64_13.decode(byteArray68);
        byte[] byteArray74 = base64_13.decode("hg");
        java.lang.String str75 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray74);
        byte[] byteArray76 = base64_1.decode(byteArray74);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hg" + "'", str26, "hg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-122]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hg" + "'", str65, "hg");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(bigInteger67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[97, 71, 99]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "aGc=\r\n" + "'", str71, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-122]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-122]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hg==\r\n" + "'", str75, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(1, byteArray9);
        byte[] byteArray12 = base64_10.decode("YUdjOVBRMEs");
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((-1), byteArray16, true);
        byte[] byteArray21 = base64_19.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        java.lang.Object obj27 = base64_19.encode((java.lang.Object) byteArray24);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        java.lang.String str33 = base64_19.encodeToString(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, true);
        byte[] byteArray38 = base64_10.encode(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((-1), byteArray44, true);
        byte[] byteArray49 = base64_47.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = base64_50.decode("hi!");
        byte[] byteArray53 = base64_47.encode(byteArray52);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64(0, byteArray52);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64((-1), byteArray52);
        java.lang.Class<?> wildcardClass56 = base64_55.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj57 = base64_10.encode((java.lang.Object) base64_55);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hg" + "'", str25, "hg");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "aGc" + "'", str33, "aGc");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        boolean boolean11 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str16 = base64_6.encodeToString(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray20);
        byte[] byteArray27 = base64_25.decode("YUdjPQ==");
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((-1), byteArray31, true);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        java.lang.String str39 = base64_34.encodeToString(byteArray37);
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37);
        byte[] byteArray42 = base64_25.decode(byteArray37);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray42);
        byte[] byteArray44 = base64_6.decode(byteArray42);
        boolean boolean45 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray44);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hg" + "'", str10, "hg");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "aGc9PQ0K" + "'", str16, "aGc9PQ0K");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hg" + "'", str39, "hg");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hg" + "'", str40, "hg");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray11 = base64_1.decode(byteArray10);
        byte[] byteArray13 = base64_1.decode("aGcNCg");
        byte[] byteArray15 = base64_1.decode("/wo=\r\n");
        byte[] byteArray17 = base64_1.decode("aGc9PQ");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61]");
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(0, byteArray7, true);
        byte[] byteArray12 = base64_1.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        java.lang.String str23 = base64_14.encodeToString(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray31 = base64_14.decode(byteArray26);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        byte[] byteArray36 = base64_1.decode(byteArray26);
        byte[] byteArray38 = base64_1.decode("");
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = base64_39.decode("hi!");
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        java.lang.Object obj43 = base64_1.encode((java.lang.Object) byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64(10, byteArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "aGc=\r\n" + "'", str23, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103]");
        org.junit.Assert.assertNotNull(obj43);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, true, (int) (byte) 100);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 1);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.lang.String str29 = base64_2.encodeToString(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        boolean boolean34 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        byte[] byteArray37 = base64_2.decode(byteArray32);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray42);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "aGc=\r\n" + "'", str29, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hg" + "'", str33, "hg");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        byte[] byteArray16 = base64_6.decode("aGc=");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray20);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray27 = base64_22.decode(byteArray25);
        byte[] byteArray29 = null;
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(10, byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((-1), byteArray34, true);
        byte[] byteArray39 = base64_37.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray42);
        java.lang.Object obj45 = base64_37.encode((java.lang.Object) byteArray42);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray48 = base64_46.decode("hi!");
        java.lang.String str49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray48);
        java.lang.String str51 = base64_37.encodeToString(byteArray50);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false);
        byte[] byteArray54 = base64_30.decode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray58 = base64_56.decode("hi!");
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        byte[] byteArray60 = base64_55.decode(byteArray59);
        java.lang.Object obj61 = base64_30.encode((java.lang.Object) byteArray60);
        java.lang.Object obj62 = base64_22.decode((java.lang.Object) byteArray60);
        byte[] byteArray63 = base64_6.encode(byteArray60);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hg" + "'", str43, "hg");
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hg" + "'", str49, "hg");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "aGc" + "'", str51, "aGc");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[97, 71, 99, 61]");
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        byte[] byteArray29 = base64_6.decode("hi!");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = base64_6.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        boolean boolean45 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray43);
        java.math.BigInteger bigInteger46 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray43);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray47);
        byte[] byteArray49 = base64_40.encode(byteArray47);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray47);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64(1, byteArray50);
        byte[] byteArray52 = base64_6.decode(byteArray50);
        java.lang.String str53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray50);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hg" + "'", str44, "hg");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hg" + "'", str53, "hg");
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        boolean boolean31 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray29);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray33);
        java.lang.String str35 = base64_26.encodeToString(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        boolean boolean40 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray38);
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray38);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        byte[] byteArray43 = base64_26.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray48);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false, false);
        java.lang.String str53 = base64_26.encodeToString(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray56 = base64_54.decode("hi!");
        java.lang.String str57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray56);
        boolean boolean58 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray56);
        java.math.BigInteger bigInteger59 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray56);
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray56);
        byte[] byteArray61 = base64_26.decode(byteArray56);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false, false);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray65);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, false, false, (int) (short) -1);
        java.lang.String str71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray65);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, true, false);
        java.lang.String str75 = base64_16.encodeToString(byteArray74);
        byte[] byteArray77 = base64_16.decode("aGc9PQ0K\r\n");
        org.apache.commons.codec.binary.Base64 base64_78 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray80 = base64_78.decode("hi!");
        java.lang.String str81 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray80);
        java.math.BigInteger bigInteger82 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray80);
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger82);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray83);
        byte[] byteArray85 = base64_16.decode(byteArray83);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray83);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hg" + "'", str30, "hg");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "aGc=\r\n" + "'", str35, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hg" + "'", str39, "hg");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hg" + "'", str47, "hg");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "aGc=\r\n" + "'", str53, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hg" + "'", str57, "hg");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-122]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hg" + "'", str81, "hg");
        org.junit.Assert.assertNotNull(bigInteger82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray2 = null;
        byte[] byteArray3 = base64_1.decode(byteArray2);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray10, true);
        byte[] byteArray15 = base64_4.decode(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        boolean boolean20 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray18);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        java.lang.Object obj25 = base64_4.encode((java.lang.Object) byteArray22);
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray30);
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray33 = base64_4.decode(byteArray31);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray38);
        java.lang.String str40 = base64_4.encodeToString(byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray39);
        java.lang.Object obj42 = base64_1.encode((java.lang.Object) byteArray39);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64((-1), byteArray46, true);
        byte[] byteArray51 = base64_49.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        java.math.BigInteger bigInteger56 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        java.lang.Object obj57 = base64_49.encode((java.lang.Object) byteArray54);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = base64_58.decode("hi!");
        java.lang.String str61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray60);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray60);
        java.lang.String str63 = base64_49.encodeToString(byteArray62);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        boolean boolean65 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray62);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62);
        java.lang.String str67 = base64_1.encodeToString(byteArray62);
        org.junit.Assert.assertNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hg" + "'", str55, "hg");
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hg" + "'", str61, "hg");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "aGc" + "'", str63, "aGc");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[97, 71, 99]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "aGc=" + "'", str67, "aGc=");
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = base64_6.encode(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((-1), byteArray16, true);
        byte[] byteArray21 = base64_19.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        java.lang.Object obj27 = base64_19.encode((java.lang.Object) byteArray24);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        java.lang.String str33 = base64_19.encodeToString(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        byte[] byteArray35 = base64_6.decode(byteArray34);
        byte[] byteArray37 = base64_6.decode("\ufffd");
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger42);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64(0, byteArray43, true);
        byte[] byteArray48 = base64_46.decode("aGc");
        boolean boolean49 = base64_46.isUrlSafe();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj50 = base64_6.decode((java.lang.Object) boolean49);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hg" + "'", str25, "hg");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "aGc" + "'", str33, "aGc");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str21 = base64_7.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray25);
        byte[] byteArray28 = base64_7.decode(byteArray25);
        boolean boolean29 = base64_7.isUrlSafe();
        byte[] byteArray31 = base64_7.decode("\ufffd");
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true, true);
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.lang.String str42 = base64_7.encodeToString(byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc9PQ??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99, 57, 80, 81, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "YUdjOVBRDQo" + "'", str42, "YUdjOVBRDQo");
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        byte[] byteArray4 = base64_2.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        boolean boolean7 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((-1), byteArray11, true);
        byte[] byteArray16 = base64_14.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.lang.Object obj22 = base64_14.encode((java.lang.Object) byteArray19);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        java.lang.String str28 = base64_14.encodeToString(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray32);
        byte[] byteArray35 = base64_14.decode(byteArray32);
        byte[] byteArray37 = base64_14.decode("hi!");
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger43);
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        byte[] byteArray46 = base64_14.decode(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray50 = base64_48.decode("hi!");
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((-1), byteArray50, true);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50);
        java.lang.Object obj55 = base64_14.encode((java.lang.Object) byteArray50);
        java.lang.Object obj56 = base64_6.encode(obj55);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = base64_58.decode("hi!");
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray60);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64((-1), byteArray60, true);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = base64_64.decode("hi!");
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        java.lang.String str68 = base64_63.encodeToString(byteArray66);
        java.lang.String str69 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray66);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, true, true);
        java.lang.String str73 = base64_6.encodeToString(byteArray66);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hg" + "'", str26, "hg");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "aGc" + "'", str28, "aGc");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-122]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hg" + "'", str68, "hg");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hg" + "'", str69, "hg");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[104, 103, 13, 10]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hg" + "'", str73, "hg");
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray3 = base64_1.decode("aGc=");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[97, 71, 99, 61]");
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str21 = base64_7.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray25);
        byte[] byteArray28 = base64_7.decode(byteArray25);
        byte[] byteArray30 = base64_7.decode("hi!");
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger36);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray39 = base64_7.decode(byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray40);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.lang.Object obj17 = base64_9.encode((java.lang.Object) byteArray14);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        java.lang.String str23 = base64_9.encodeToString(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false);
        byte[] byteArray26 = base64_2.decode(byteArray22);
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26);
        boolean boolean29 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray28);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "aGc" + "'", str23, "aGc");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg==\r\n" + "'", str27, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((-1));
        byte[] byteArray3 = null;
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9);
        java.lang.Object obj14 = base64_5.decode((java.lang.Object) byteArray9);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((-1), byteArray18, true);
        byte[] byteArray23 = base64_21.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        java.lang.Object obj29 = base64_21.encode((java.lang.Object) byteArray26);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        java.lang.String str35 = base64_21.encodeToString(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.Class<?> wildcardClass37 = byteArray34.getClass();
        java.lang.Object obj38 = base64_5.decode((java.lang.Object) byteArray34);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = base64_39.decode("hi!");
        java.lang.String str42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray41);
        boolean boolean43 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray41);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        byte[] byteArray47 = base64_5.decode(byteArray46);
        java.lang.Object obj48 = base64_1.decode((java.lang.Object) byteArray47);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.decodeBase64("YUdjOVBRMEs=");
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50);
        java.lang.Object obj52 = base64_1.decode((java.lang.Object) byteArray50);
        byte[] byteArray54 = base64_1.decode("WVVkalBRMEs=");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hg" + "'", str33, "hg");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "aGc" + "'", str35, "aGc");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hg" + "'", str42, "hg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 61]");
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[89, 85, 100, 106, 80, 81, 48, 75]");
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64(0, byteArray28, true);
        byte[] byteArray33 = base64_22.decode(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        java.lang.Object obj43 = base64_22.encode((java.lang.Object) byteArray40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray48);
        java.lang.String str50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        byte[] byteArray51 = base64_22.decode(byteArray49);
        java.lang.String str52 = base64_0.encodeToString(byteArray49);
        byte[] byteArray54 = base64_0.decode("\ufffd");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[97, 71, 99, 61]");
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 1);
        byte[] byteArray3 = base64_1.decode("YUdjOVBRMEs");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 0 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true);
        java.lang.Object obj11 = base64_5.decode((java.lang.Object) byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray15);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray15);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false);
        byte[] byteArray27 = base64_5.decode(byteArray23);
        java.lang.String str28 = base64_1.encodeToString(byteArray23);
        boolean boolean29 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100, 0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[90, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray6, false);
        boolean boolean10 = base64_9.isUrlSafe();
        byte[] byteArray12 = base64_9.decode("WVVkalBRPT0NCg");
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[89, 85, 100, 106, 80, 81, 61, 61]");
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.lang.String str29 = base64_2.encodeToString(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        boolean boolean34 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        byte[] byteArray37 = base64_2.decode(byteArray32);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray41);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray47 = base64_45.decode("hi!");
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray47);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((-1), byteArray47, true);
        byte[] byteArray52 = base64_50.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        java.lang.String str56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        java.math.BigInteger bigInteger57 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray55);
        java.lang.Object obj58 = base64_50.encode((java.lang.Object) byteArray55);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        java.lang.String str62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray61);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray61);
        java.lang.String str64 = base64_50.encodeToString(byteArray63);
        boolean boolean65 = base64_50.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_67 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray69 = base64_67.decode("hi!");
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray69);
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64((-1), byteArray69, true);
        byte[] byteArray74 = base64_72.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray77 = base64_75.decode("hi!");
        java.lang.String str78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray77);
        java.math.BigInteger bigInteger79 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray77);
        java.lang.Object obj80 = base64_72.encode((java.lang.Object) byteArray77);
        byte[] byteArray82 = base64_72.decode("aGc=");
        org.apache.commons.codec.binary.Base64 base64_84 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray86 = base64_84.decode("hi!");
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray86);
        org.apache.commons.codec.binary.Base64 base64_89 = new org.apache.commons.codec.binary.Base64((-1), byteArray86, true);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86);
        java.lang.Object obj91 = base64_72.decode((java.lang.Object) byteArray86);
        java.lang.Object obj92 = base64_50.encode((java.lang.Object) byteArray86);
        java.lang.Object obj93 = base64_43.decode(obj92);
        org.apache.commons.codec.binary.Base64 base64_94 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray96 = base64_94.decode("hi!");
        java.math.BigInteger bigInteger97 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray96);
        byte[] byteArray98 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray96);
        java.lang.Object obj99 = base64_43.encode((java.lang.Object) byteArray98);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "aGc=\r\n" + "'", str29, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hg" + "'", str33, "hg");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hg" + "'", str56, "hg");
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hg" + "'", str62, "hg");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "aGc" + "'", str64, "aGc");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-122]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-122]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-122]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hg" + "'", str78, "hg");
        org.junit.Assert.assertNotNull(bigInteger79);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-122]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertNotNull(obj93);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger97);
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[]");
        org.junit.Assert.assertNotNull(obj99);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14);
        byte[] byteArray22 = base64_6.encode(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 119, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[76, 51, 100, 118, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[84, 68, 78, 107, 100, 108, 66, 82]");
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray1, true);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((-1), byteArray7, true);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        java.lang.Object obj12 = base64_3.decode((java.lang.Object) byteArray7);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20);
        byte[] byteArray24 = base64_13.encode(byteArray20);
        java.lang.String str25 = base64_3.encodeToString(byteArray20);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hg" + "'", str17, "hg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "aGc" + "'", str25, "aGc");
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        byte[] byteArray3 = base64_1.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = base64_13.encode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64(0, byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((-1), byteArray18);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray25);
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        byte[] byteArray32 = base64_27.decode(byteArray30);
        byte[] byteArray33 = base64_21.decode(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray32, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj36 = base64_1.decode((java.lang.Object) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        byte[] byteArray2 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray2);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        java.lang.String str14 = base64_5.encodeToString(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        byte[] byteArray22 = base64_5.decode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray26);
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray33 = base64_28.decode(byteArray31);
        java.lang.Object obj34 = base64_5.decode((java.lang.Object) byteArray31);
        byte[] byteArray35 = base64_3.decode(byteArray31);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray31, false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hg" + "'", str9, "hg");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "aGc=\r\n" + "'", str14, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = base64_5.decode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14, true);
        byte[] byteArray19 = base64_17.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        java.lang.Object obj25 = base64_17.encode((java.lang.Object) byteArray22);
        java.lang.String str26 = base64_5.encodeToString(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0 };
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, true);
        java.lang.Object obj34 = base64_28.decode((java.lang.Object) byteArray33);
        java.lang.String str35 = base64_5.encodeToString(byteArray33);
        boolean boolean36 = base64_5.isUrlSafe();
        java.lang.Class<?> wildcardClass37 = base64_5.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ufffd" + "'", str26, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 0]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[90, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ufffd" + "'", str35, "\ufffd");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        byte[] byteArray17 = base64_6.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray23 = base64_18.decode(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        java.lang.Object obj27 = base64_6.decode((java.lang.Object) byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((-1), byteArray31, true);
        byte[] byteArray36 = base64_34.decode("hg==\r\n");
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray39);
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray39);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray39);
        byte[] byteArray43 = base64_34.decode(byteArray39);
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, true, true);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray43);
        byte[] byteArray49 = base64_6.encode(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = base64_50.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray56 = base64_54.decode("hi!");
        java.lang.String str57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray56);
        boolean boolean58 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray56);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64(0, byteArray56, true);
        byte[] byteArray61 = base64_50.decode(byteArray56);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = base64_64.decode("hi!");
        java.lang.String str67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray66);
        boolean boolean68 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray66);
        java.math.BigInteger bigInteger69 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray66);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray70);
        java.lang.String str72 = base64_63.encodeToString(byteArray70);
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray75 = base64_73.decode("hi!");
        java.lang.String str76 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray75);
        boolean boolean77 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray75);
        java.math.BigInteger bigInteger78 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray75);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray75);
        byte[] byteArray80 = base64_63.decode(byteArray75);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray75);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray75, false, false);
        byte[] byteArray85 = base64_50.decode(byteArray75);
        byte[] byteArray87 = base64_50.decode("");
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray87);
        java.lang.Object obj89 = base64_6.encode((java.lang.Object) byteArray88);
        byte[] byteArray91 = base64_6.decode("YUdjPQ");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hg" + "'", str57, "hg");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hg" + "'", str67, "hg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(bigInteger69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "aGc=\r\n" + "'", str72, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-122]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hg" + "'", str76, "hg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(bigInteger78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[97, 71, 99, 61]");
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = base64_0.decode(byteArray27);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        java.lang.String str36 = base64_0.encodeToString(byteArray35);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger41);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64(0, byteArray42, true);
        byte[] byteArray47 = base64_45.decode("aGc");
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray47);
        java.lang.Object obj49 = base64_0.encode((java.lang.Object) byteArray47);
        boolean boolean50 = base64_0.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((-1), byteArray12, true);
        byte[] byteArray17 = base64_15.decode("hg==\r\n");
        byte[] byteArray18 = base64_8.encode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((-1), byteArray22, true);
        byte[] byteArray27 = base64_25.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        java.lang.Object obj33 = base64_25.encode((java.lang.Object) byteArray30);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        java.lang.String str39 = base64_25.encodeToString(byteArray38);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false);
        java.lang.String str42 = base64_8.encodeToString(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray48 = base64_43.decode(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray47);
        java.lang.String str50 = base64_8.encodeToString(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        java.lang.Object obj52 = base64_2.decode((java.lang.Object) byteArray49);
        java.math.BigInteger bigInteger53 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        boolean boolean54 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [aGc=??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "aGc" + "'", str39, "aGc");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ufffd" + "'", str42, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ufffd" + "'", str50, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3, false);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15, true);
        byte[] byteArray20 = base64_18.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = base64_18.encode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64(0, byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((-1), byteArray23);
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger32);
        byte[] byteArray34 = base64_26.decode(byteArray33);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(100, byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray39);
        byte[] byteArray42 = base64_8.decode(byteArray39);
        byte[] byteArray44 = base64_8.decode("YUdjOVBRMEs");
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray48 = base64_46.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = base64_50.decode("hi!");
        java.lang.String str53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray52);
        boolean boolean54 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray52);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64(0, byteArray52, true);
        byte[] byteArray57 = base64_46.decode(byteArray52);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = base64_58.decode("hi!");
        java.lang.String str61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray60);
        boolean boolean62 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray60);
        java.math.BigInteger bigInteger63 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray60);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray60);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray64);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray64);
        java.lang.Object obj67 = base64_46.encode((java.lang.Object) byteArray64);
        byte[] byteArray70 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger71 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray72);
        java.lang.String str74 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray73);
        byte[] byteArray75 = base64_46.decode(byteArray73);
        byte[] byteArray78 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger79 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray78);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger79);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray80);
        java.lang.String str82 = base64_46.encodeToString(byteArray81);
        org.apache.commons.codec.binary.Base64 base64_84 = new org.apache.commons.codec.binary.Base64(10, byteArray81, true);
        java.lang.String str85 = base64_8.encodeToString(byteArray81);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hg" + "'", str53, "hg");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hg" + "'", str61, "hg");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 57, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, 85, 100, 106, 79, 86, 66, 82, 80, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        byte[] byteArray10 = base64_8.decode("aGc");
        boolean boolean11 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        java.lang.String str16 = base64_8.encodeToString(byteArray14);
        byte[] byteArray18 = base64_8.decode("\ufffd");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((-1), byteArray22, true);
        byte[] byteArray27 = base64_25.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        java.lang.Object obj33 = base64_25.encode((java.lang.Object) byteArray30);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        java.lang.String str39 = base64_25.encodeToString(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        java.lang.Object obj42 = base64_8.decode((java.lang.Object) byteArray38);
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger46 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray47);
        java.lang.String str49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray48);
        java.lang.Object obj50 = base64_8.encode((java.lang.Object) byteArray48);
        byte[] byteArray53 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger54 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, true);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53);
        java.lang.String str59 = base64_8.encodeToString(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray64 = base64_62.decode("hi!");
        java.lang.String str65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray64);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray64);
        java.lang.String str67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray64);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray64, false);
        org.apache.commons.codec.binary.Base64 base64_70 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray72 = base64_70.decode("hi!");
        java.lang.Object obj73 = base64_69.encode((java.lang.Object) byteArray72);
        java.math.BigInteger bigInteger74 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray72);
        org.apache.commons.codec.binary.Base64 base64_76 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray72, true);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray72, false);
        java.lang.String str79 = base64_8.encodeToString(byteArray78);
        byte[] byteArray82 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger83 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray82);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger83);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger83);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray85);
        java.lang.Object obj87 = base64_8.decode((java.lang.Object) byteArray86);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "aGc" + "'", str39, "aGc");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[47, 119, 111, 61]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "L3dvPQ" + "'", str59, "L3dvPQ");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-122]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hg" + "'", str65, "hg");
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hg" + "'", str67, "hg");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-122]");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "aGc9PQ" + "'", str79, "aGc9PQ");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(obj87);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64(0, byteArray3, true);
        boolean boolean8 = base64_7.isUrlSafe();
        byte[] byteArray10 = base64_7.decode("aGc=\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray24);
        java.lang.Object obj26 = base64_16.decode((java.lang.Object) byteArray24);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        java.lang.String str28 = base64_7.encodeToString(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        java.lang.String str39 = base64_7.encodeToString(byteArray38);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "YUdjPQ0K\r\n" + "'", str25, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "YUdjPQ0K" + "'", str28, "YUdjPQ0K");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "YUdjOVBRPT0NCg" + "'", str39, "YUdjOVBRPT0NCg");
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16);
        byte[] byteArray19 = base64_9.encode(byteArray18);
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray19, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [YUdjPQ]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "WVVkalBR\r\n" + "'", str20, "WVVkalBR\r\n");
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray1, true);
        byte[] byteArray5 = base64_3.decode("aGc9PQ==");
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger6);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray12, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray12);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5);
        java.lang.String str7 = base64_0.encodeToString(byteArray6);
        byte[] byteArray9 = base64_0.decode("");
        boolean boolean10 = base64_0.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14, true);
        byte[] byteArray19 = base64_17.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((-1), byteArray23, true);
        byte[] byteArray28 = base64_26.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.Object obj34 = base64_26.encode((java.lang.Object) byteArray31);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        java.lang.String str40 = base64_26.encodeToString(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = base64_42.decode("hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray44);
        byte[] byteArray47 = base64_26.decode(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = base64_50.decode("hi!");
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray52);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64((-1), byteArray52, true);
        byte[] byteArray57 = base64_55.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = base64_58.decode("hi!");
        java.lang.String str61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray60);
        java.math.BigInteger bigInteger62 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray60);
        java.lang.Object obj63 = base64_55.encode((java.lang.Object) byteArray60);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = base64_64.decode("hi!");
        java.lang.String str67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        java.lang.String str69 = base64_55.encodeToString(byteArray68);
        org.apache.commons.codec.binary.Base64 base64_71 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray73 = base64_71.decode("hi!");
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray73);
        byte[] byteArray76 = base64_55.decode(byteArray73);
        byte[] byteArray78 = base64_55.decode("hi!");
        byte[] byteArray81 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger82 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray81);
        java.math.BigInteger bigInteger83 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray81);
        java.math.BigInteger bigInteger84 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray81);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger84);
        java.lang.String str86 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray85);
        byte[] byteArray87 = base64_55.decode(byteArray85);
        org.apache.commons.codec.binary.Base64 base64_89 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray85, false);
        byte[] byteArray90 = base64_26.decode(byteArray85);
        java.lang.Object obj91 = base64_17.encode((java.lang.Object) byteArray85);
        byte[] byteArray95 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray85, true, false, 10);
        java.lang.String str96 = base64_0.encodeToString(byteArray95);
        boolean boolean97 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray95);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "aGc9PQ==" + "'", str7, "aGc9PQ==");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "aGc" + "'", str40, "aGc");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hg" + "'", str61, "hg");
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hg" + "'", str67, "hg");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "aGc" + "'", str69, "aGc");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-122]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-122]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger82);
        org.junit.Assert.assertNotNull(bigInteger83);
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        byte[] byteArray11 = base64_0.encode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray15, false);
        byte[] byteArray22 = base64_20.decode("\ufffd");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray24 = base64_0.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        byte[] byteArray30 = base64_25.decode(byteArray29);
        byte[] byteArray32 = base64_25.decode("");
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = base64_36.decode("hi!");
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((-1), byteArray38, true);
        byte[] byteArray43 = base64_41.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        byte[] byteArray47 = base64_41.encode(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64(0, byteArray46);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64((-1), byteArray46);
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger53 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray52);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger53);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray54);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray54);
        byte[] byteArray57 = base64_49.decode(byteArray56);
        byte[] byteArray59 = base64_49.decode("hg==");
        java.math.BigInteger bigInteger60 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray59);
        java.lang.Object obj61 = base64_25.encode((java.lang.Object) byteArray59);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, true, true);
        byte[] byteArray65 = base64_0.encode(byteArray64);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray65);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg" + "'", str16, "hg");
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[97, 71, 99, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[89, 85, 100, 106, 84, 107, 78, 110, 80, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        byte[] byteArray9 = base64_0.encode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray12);
        byte[] byteArray15 = base64_0.decode(byteArray12);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg==\r\n" + "'", str14, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray23 = base64_0.decode("YUdjOVBR");
        java.lang.Object obj24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = base64_0.encode(obj24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 57, 80, 81]");
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray4, true);
        boolean boolean9 = base64_8.isUrlSafe();
        boolean boolean10 = base64_8.isUrlSafe();
        byte[] byteArray12 = base64_8.decode("aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        byte[] byteArray11 = base64_0.encode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64(true);
        boolean boolean14 = base64_13.isUrlSafe();
        boolean boolean15 = base64_13.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray19);
        byte[] byteArray22 = base64_13.encode(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19);
        byte[] byteArray24 = base64_0.encode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, false);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray33);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, true);
        byte[] byteArray42 = base64_30.decode(byteArray33);
        byte[] byteArray43 = base64_0.decode(byteArray33);
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64(0, byteArray49, true);
        byte[] byteArray54 = base64_52.decode("aGc");
        boolean boolean55 = base64_52.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray58 = base64_56.decode("hi!");
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        java.lang.String str60 = base64_52.encodeToString(byteArray58);
        byte[] byteArray62 = base64_52.decode("\ufffd");
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = base64_64.decode("hi!");
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64((-1), byteArray66, true);
        byte[] byteArray71 = base64_69.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray74 = base64_72.decode("hi!");
        java.lang.String str75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray74);
        java.math.BigInteger bigInteger76 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray74);
        java.lang.Object obj77 = base64_69.encode((java.lang.Object) byteArray74);
        org.apache.commons.codec.binary.Base64 base64_78 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray80 = base64_78.decode("hi!");
        java.lang.String str81 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray80);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray80);
        java.lang.String str83 = base64_69.encodeToString(byteArray82);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray82);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray82);
        java.lang.Object obj86 = base64_52.decode((java.lang.Object) byteArray82);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, false);
        byte[] byteArray89 = base64_0.decode(byteArray88);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 71, 99, 61]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-122]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hg" + "'", str75, "hg");
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-122]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hg" + "'", str81, "hg");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "aGc" + "'", str83, "aGc");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[104, 103]");
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        byte[] byteArray17 = base64_6.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray23 = base64_18.decode(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        java.lang.Object obj27 = base64_6.decode((java.lang.Object) byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, true, (int) '#');
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[89, 85, 100, 106, 80, 81, 48, 75]");
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false, (int) (short) 100);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[87, 86, 86, 107, 97, 108, 66, 82, 80, 84, 48, 78, 67, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[86, 49, 90, 87, 97, 50, 70, 115, 81, 108, 74, 81, 86, 68, 66, 79, 81, 50, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4);
        java.lang.String str9 = base64_0.encodeToString(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((-1), byteArray16, true);
        byte[] byteArray21 = base64_19.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = base64_19.encode(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(0, byteArray24);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((-1), byteArray24);
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        byte[] byteArray35 = base64_27.decode(byteArray34);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, true, false);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray34);
        byte[] byteArray42 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray42);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray42);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true);
        java.lang.String str47 = base64_39.encodeToString(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray53 = base64_51.decode("hi!");
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((-1), byteArray53, true);
        byte[] byteArray58 = base64_56.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = base64_59.decode("hi!");
        byte[] byteArray62 = base64_56.encode(byteArray61);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64(0, byteArray61);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((-1), byteArray61);
        byte[] byteArray67 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger68 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray67);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger68);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray69);
        byte[] byteArray72 = base64_64.decode(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray72);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray72, true, true, (int) (byte) 100);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, false);
        java.lang.Object obj80 = base64_39.decode((java.lang.Object) byteArray79);
        byte[] byteArray81 = base64_0.decode(byteArray79);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 61, 61]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hg==" + "'", str9, "hg==");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "L3dvPQ0K" + "'", str47, "L3dvPQ0K");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[97, 71, 99, 61]");
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        byte[] byteArray20 = base64_1.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray24 = base64_22.decode("\ufffd");
        java.lang.Object obj25 = base64_1.decode((java.lang.Object) byteArray24);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((-1), byteArray29, true);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray35 = base64_33.decode("hi!");
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        java.lang.String str37 = base64_32.encodeToString(byteArray35);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray35);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray35);
        boolean boolean40 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray35);
        byte[] byteArray41 = base64_1.encode(byteArray35);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray35);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (6) than the specified maxium size of -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger42);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, true, (int) (byte) 100);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 13, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hg==\r\n" + "'", str9, "hg==\r\n");
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str21 = base64_7.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray25);
        byte[] byteArray28 = base64_7.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray25, true);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false);
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, true, false);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray43);
        java.lang.Object obj45 = base64_30.decode((java.lang.Object) byteArray43);
        boolean boolean46 = base64_30.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "YUdjPQ" + "'", str40, "YUdjPQ");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = base64_7.encode(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        boolean boolean23 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64(0, byteArray21, true);
        byte[] byteArray26 = base64_15.decode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        boolean boolean31 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray29);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        java.lang.Object obj36 = base64_15.encode((java.lang.Object) byteArray33);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray41);
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        byte[] byteArray44 = base64_15.decode(byteArray42);
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        java.lang.String str51 = base64_15.encodeToString(byteArray50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray50);
        byte[] byteArray53 = base64_14.encode(byteArray50);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, true, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hg" + "'", str30, "hg");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64(0, byteArray2, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = base64_13.encode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64(0, byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((-1), byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray29 = base64_21.decode(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        java.lang.String str31 = base64_4.encodeToString(byteArray30);
        boolean boolean32 = base64_4.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray2);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[89, 85, 100, 106, 79, 86, 66, 82, 77, 69, 115, 61]");
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3, false);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.Object obj12 = base64_8.encode((java.lang.Object) byteArray11);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        byte[] byteArray19 = base64_8.decode(byteArray18);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61]");
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray10);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64(0, byteArray24, true);
        byte[] byteArray29 = base64_18.decode(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64(0, byteArray29, false);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray35 = base64_33.decode("hi!");
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        byte[] byteArray40 = base64_31.encode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64((int) (byte) 10, byteArray47, false);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray47, true);
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        java.math.BigInteger bigInteger56 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        java.math.BigInteger bigInteger57 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, true);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray54);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false);
        java.lang.String str63 = base64_51.encodeToString(byteArray62);
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray62);
        byte[] byteArray65 = base64_31.decode(byteArray62);
        java.lang.Object obj66 = base64_16.decode((java.lang.Object) byteArray62);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hg" + "'", str25, "hg");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[47, 119, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 61]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "L3dvPQ" + "'", str63, "L3dvPQ");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "L3dvPQ" + "'", str64, "L3dvPQ");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, 10]");
        org.junit.Assert.assertNotNull(obj66);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str11 = base64_2.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = base64_2.decode(byteArray14);
        byte[] byteArray21 = base64_2.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray29, false);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray40);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, true, true);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray43, false);
        java.lang.Object obj50 = base64_35.decode((java.lang.Object) byteArray43);
        byte[] byteArray51 = base64_2.encode(byteArray43);
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray51);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, true, true, 1);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray56);
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger62 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger62);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger62);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger62);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, false);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64(1, byteArray67);
        byte[] byteArray70 = base64_68.decode("YUdjOVBRMEs");
        java.lang.String str71 = base64_57.encodeToString(byteArray70);
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray74 = base64_72.decode("hi!");
        java.lang.String str75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray74);
        boolean boolean76 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray74);
        java.math.BigInteger bigInteger77 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray74);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray74);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray78);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray78);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78);
        java.math.BigInteger bigInteger82 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray81);
        java.lang.String str83 = base64_57.encodeToString(byteArray81);
        org.apache.commons.codec.binary.Base64 base64_84 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray86 = base64_84.decode("hi!");
        java.lang.String str87 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray86);
        boolean boolean88 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray86);
        byte[] byteArray89 = base64_57.encode(byteArray86);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "aGc=\r\n" + "'", str11, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "YUdjOVBRMEs=" + "'", str71, "YUdjOVBRMEs=");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-122]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hg" + "'", str75, "hg");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(bigInteger77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(bigInteger82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "YUdjPQ==" + "'", str83, "YUdjPQ==");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-122]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hg" + "'", str87, "hg");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[104, 103, 61, 61]");
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3, false);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1), byteArray15, true);
        byte[] byteArray20 = base64_18.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = base64_18.encode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64(0, byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((-1), byteArray23);
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger32);
        byte[] byteArray34 = base64_26.decode(byteArray33);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(100, byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray39);
        byte[] byteArray42 = base64_8.decode(byteArray39);
        boolean boolean43 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray42);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray6, false);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((-1), byteArray12, true);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str20 = base64_15.encodeToString(byteArray18);
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        java.lang.String str25 = base64_8.encodeToString(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((-1), byteArray29, true);
        byte[] byteArray34 = base64_32.decode("hg==\r\n");
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        byte[] byteArray41 = base64_32.decode(byteArray37);
        boolean boolean42 = base64_32.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64((-1), byteArray46, true);
        byte[] byteArray51 = base64_49.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        java.math.BigInteger bigInteger56 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        java.lang.Object obj57 = base64_49.encode((java.lang.Object) byteArray54);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = base64_58.decode("hi!");
        java.lang.String str61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray60);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray60);
        java.lang.String str63 = base64_49.encodeToString(byteArray62);
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray67 = base64_65.decode("hi!");
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray67);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray67);
        byte[] byteArray70 = base64_49.decode(byteArray67);
        byte[] byteArray72 = base64_49.decode("hi!");
        java.lang.Object obj73 = base64_32.encode((java.lang.Object) byteArray72);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray72);
        byte[] byteArray75 = base64_8.decode(byteArray72);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hg" + "'", str55, "hg");
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-122]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hg" + "'", str61, "hg");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "aGc" + "'", str63, "aGc");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-122]");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str21 = base64_7.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray25);
        byte[] byteArray28 = base64_7.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray25, true);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        boolean boolean35 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray33);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39);
        byte[] byteArray41 = base64_30.decode(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray42);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertNotNull(bigInteger43);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3, false);
        boolean boolean8 = base64_7.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray12);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        java.lang.String str16 = base64_7.encodeToString(byteArray12);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, true, true, (int) ' ');
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg==" + "'", str16, "hg==");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64(0, byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13, true);
        byte[] byteArray18 = base64_16.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = base64_16.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64(0, byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((-1), byteArray21);
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray29);
        byte[] byteArray32 = base64_24.decode(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true, true, (int) (byte) 100);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true, false, (int) (short) 1);
        byte[] byteArray42 = base64_7.encode(byteArray32);
        byte[] byteArray44 = base64_7.decode("YUdjOVBRMEs");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = base64_0.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        java.lang.String str36 = base64_0.encodeToString(byteArray35);
        byte[] byteArray38 = base64_0.decode("aGc=\r\n");
        byte[] byteArray40 = base64_0.decode("aGc9PYY=");
        java.lang.Class<?> wildcardClass41 = byteArray40.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hg" + "'", str33, "hg");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg==" + "'", str36, "hg==");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str21 = base64_7.encodeToString(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray25);
        byte[] byteArray28 = base64_7.decode(byteArray25);
        byte[] byteArray30 = base64_7.decode("hi!");
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger36);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray39 = base64_7.decode(byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((-1), byteArray37);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[90, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[87, 107, 70, 66, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = base64_23.decode("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((-1), byteArray25, true);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray29);
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray29);
        java.lang.String str32 = base64_0.encodeToString(byteArray29);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray29);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "aGc=\r\n" + "'", str30, "aGc=\r\n");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "aGc=\r\n" + "'", str31, "aGc=\r\n");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "aGc=" + "'", str32, "aGc=");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[97, 71, 99, 61]");
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray10, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger19);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = base64_7.encode(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray12);
        byte[] byteArray16 = base64_14.decode("aGc=");
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray24);
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, false);
        byte[] byteArray30 = base64_14.decode(byteArray24);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "YUdjPQ0K\r\n" + "'", str25, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 103]");
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(0, byteArray7, true);
        byte[] byteArray12 = base64_1.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray12, false);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray18);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray23 = base64_14.encode(byteArray21);
        boolean boolean24 = base64_14.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hg" + "'", str8, "hg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 61]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        byte[] byteArray0 = null;
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false);
        org.junit.Assert.assertNull(byteArray2);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64(1, byteArray1, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        java.lang.Object obj7 = base64_3.encode((java.lang.Object) byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(0, byteArray22, true);
        byte[] byteArray27 = base64_16.decode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = base64_28.decode("hi!");
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        boolean boolean32 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray30);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.Object obj37 = base64_16.encode((java.lang.Object) byteArray34);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger41);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray42);
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        byte[] byteArray45 = base64_16.decode(byteArray43);
        byte[] byteArray48 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger49 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray50);
        java.lang.String str52 = base64_16.encodeToString(byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray51);
        byte[] byteArray54 = base64_15.encode(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray51);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hg" + "'", str31, "hg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        boolean boolean11 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64(0, byteArray9, true);
        byte[] byteArray14 = base64_3.decode(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        java.lang.Object obj24 = base64_3.encode((java.lang.Object) byteArray21);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, true, false);
        java.lang.Object obj32 = base64_3.encode((java.lang.Object) byteArray31);
        java.lang.Object obj33 = base64_2.encode(obj32);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((-1), byteArray37, true);
        byte[] byteArray42 = base64_40.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        java.lang.Object obj48 = base64_40.encode((java.lang.Object) byteArray45);
        byte[] byteArray50 = base64_40.decode("aGc=\r\n");
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        byte[] byteArray53 = base64_2.decode(byteArray52);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hg" + "'", str10, "hg");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        byte[] byteArray29 = base64_6.decode("hi!");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = base64_6.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((-1), byteArray42, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42);
        java.lang.Object obj47 = base64_6.encode((java.lang.Object) byteArray42);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((-1), byteArray51, true);
        byte[] byteArray56 = base64_54.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        boolean boolean61 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray59);
        java.math.BigInteger bigInteger62 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray59);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        boolean boolean64 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray63);
        byte[] byteArray65 = base64_54.decode(byteArray63);
        byte[] byteArray66 = base64_6.decode(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_67 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray69 = base64_67.decode("hi!");
        java.lang.String str70 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray69);
        boolean boolean71 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray69);
        java.math.BigInteger bigInteger72 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray69);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray69);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray73);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray73);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray76);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, false);
        java.lang.String str80 = base64_6.encodeToString(byteArray77);
        byte[] byteArray84 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger85 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray84);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger85);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger85);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger85);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray88, false);
        org.apache.commons.codec.binary.Base64 base64_91 = new org.apache.commons.codec.binary.Base64(1, byteArray90);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray90);
        byte[] byteArray93 = base64_6.decode(byteArray90);
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray90);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-122]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-122]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hg" + "'", str70, "hg");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(bigInteger72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[87, 86, 86, 107, 97, 108, 66, 82]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "WVVkalBR" + "'", str80, "WVVkalBR");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        boolean boolean2 = base64_1.isUrlSafe();
        byte[] byteArray4 = base64_1.decode("\ufffd");
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = base64_6.decode("hi!");
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray15 = base64_10.decode(byteArray13);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15);
        java.lang.Object obj17 = base64_1.encode((java.lang.Object) byteArray15);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(obj17);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("aGc=\r\n");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[97, 71, 99]");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((-1), byteArray11, true);
        byte[] byteArray16 = base64_14.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = base64_14.encode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(0, byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((-1), byteArray19);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger28);
        byte[] byteArray30 = base64_22.decode(byteArray29);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32);
        byte[] byteArray34 = base64_5.encode(byteArray32);
        byte[] byteArray36 = base64_5.decode("aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("aGcNCg");
        java.lang.String str2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[104, 103, 13, 10]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "aGcNCg" + "'", str2, "aGcNCg");
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        byte[] byteArray22 = base64_6.decode("hg==");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64(0, byteArray28, true);
        byte[] byteArray33 = base64_31.decode("aGc");
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, (int) '#');
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        java.lang.String str40 = base64_6.encodeToString(byteArray39);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[89, 85, 100, 106, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[87, 86, 86, 107, 97, 108, 66, 82]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "V1ZWa2FsQlI" + "'", str40, "V1ZWa2FsQlI");
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(10);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray17);
        byte[] byteArray19 = base64_8.decode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = base64_21.decode("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray25 = base64_20.decode(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.Object obj29 = base64_8.decode((java.lang.Object) byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.lang.Object obj31 = base64_1.encode((java.lang.Object) byteArray30);
        byte[] byteArray33 = base64_1.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40);
        java.lang.String str43 = base64_1.encodeToString(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray47 = base64_45.decode("hi!");
        java.lang.String str48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray47);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray47);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        boolean boolean56 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray54);
        java.math.BigInteger bigInteger57 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray58);
        java.lang.String str60 = base64_51.encodeToString(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray63 = base64_61.decode("hi!");
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray63);
        boolean boolean65 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray63);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray63);
        byte[] byteArray68 = base64_51.decode(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray71 = base64_69.decode("hi!");
        java.lang.String str72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray73);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false, false);
        java.lang.String str78 = base64_51.encodeToString(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_79 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray81 = base64_79.decode("hi!");
        java.lang.String str82 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray81);
        boolean boolean83 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray81);
        java.math.BigInteger bigInteger84 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray81);
        java.lang.String str85 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray81);
        byte[] byteArray86 = base64_51.decode(byteArray81);
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86, false, false);
        java.lang.Object obj90 = base64_49.encode((java.lang.Object) byteArray89);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray89);
        java.lang.String str92 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray89);
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray89, true);
        java.lang.String str95 = base64_1.encodeToString(byteArray94);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "aGc=\r\n" + "'", str43, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hg" + "'", str48, "hg");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hg" + "'", str55, "hg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "aGc=\r\n" + "'", str60, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hg" + "'", str64, "hg");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hg" + "'", str72, "hg");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-122]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "aGc=\r\n" + "'", str78, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-122]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hg" + "'", str82, "hg");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hg" + "'", str85, "hg");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = base64_0.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray33);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str37 = base64_0.encodeToString(byteArray33);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger43);
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray44);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, true, (int) (byte) 100);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray54 = base64_0.encode(byteArray44);
        boolean boolean55 = base64_0.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        java.math.BigInteger bigInteger61 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray59);
        java.lang.String str62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray59, false);
        byte[] byteArray66 = base64_64.decode("\ufffd");
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, false);
        java.lang.String str70 = base64_0.encodeToString(byteArray67);
        byte[] byteArray72 = base64_0.decode("\ufffd");
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_74 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray76 = base64_74.decode("hi!");
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray76);
        byte[] byteArray78 = base64_73.decode(byteArray77);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray77);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, false, false);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, false, false);
        java.lang.String str86 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray85);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray85);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray87);
        java.lang.String str89 = base64_0.encodeToString(byteArray87);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg==" + "'", str37, "hg==");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hg" + "'", str62, "hg");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "WVVkalBRMEs=" + "'", str70, "WVVkalBRMEs=");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-122]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-122]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "WVVkalBRPT0=\r\n" + "'", str86, "WVVkalBRPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[87, 86, 86, 107, 97, 108, 66, 82, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "V1ZWa2FsQlJQVDA9" + "'", str89, "V1ZWa2FsQlJQVDA9");
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        java.lang.Object obj15 = base64_7.encode((java.lang.Object) byteArray12);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.String str21 = base64_7.encodeToString(byteArray20);
        boolean boolean22 = base64_7.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((-1), byteArray26, true);
        byte[] byteArray31 = base64_29.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        java.lang.Object obj37 = base64_29.encode((java.lang.Object) byteArray34);
        byte[] byteArray39 = base64_29.decode("aGc=");
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = base64_41.decode("hi!");
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((-1), byteArray43, true);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43);
        java.lang.Object obj48 = base64_29.decode((java.lang.Object) byteArray43);
        java.lang.Object obj49 = base64_7.encode((java.lang.Object) byteArray43);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray43);
        byte[] byteArray52 = base64_50.decode("aGc9PQ0K\r\n");
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray58 = base64_56.decode("hi!");
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64((-1), byteArray58, true);
        byte[] byteArray63 = base64_61.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = base64_64.decode("hi!");
        byte[] byteArray67 = base64_61.encode(byteArray66);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64(0, byteArray66);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64((-1), byteArray66);
        org.apache.commons.codec.binary.Base64 base64_71 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray73 = base64_71.decode("hi!");
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray73);
        byte[] byteArray78 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger79 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray78);
        byte[] byteArray80 = base64_75.decode(byteArray78);
        byte[] byteArray81 = base64_69.decode(byteArray80);
        org.apache.commons.codec.binary.Base64 base64_82 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray84 = base64_82.decode("hi!");
        java.lang.String str85 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray84);
        boolean boolean86 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray84);
        java.math.BigInteger bigInteger87 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray84);
        java.lang.String str88 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray84);
        java.lang.String str89 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray84);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray84);
        byte[] byteArray91 = base64_69.decode(byteArray90);
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray90, false, false);
        byte[] byteArray95 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray94);
        byte[] byteArray96 = base64_50.decode(byteArray95);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc" + "'", str21, "aGc");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-122]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-122]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-122]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hg" + "'", str85, "hg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(bigInteger87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hg" + "'", str88, "hg");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hg" + "'", str89, "hg");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-122]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[-122]");
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64(0, byteArray3, true);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray3);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray4);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((-1), byteArray10, true);
        byte[] byteArray15 = base64_13.decode("hg==\r\n");
        byte[] byteArray16 = base64_6.encode(byteArray15);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false);
        byte[] byteArray24 = base64_6.encode(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray24, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [/wo=?]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/wo=\r\n" + "'", str21, "/wo=\r\n");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 61, -122]");
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, false, (int) ' ');
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray3);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103, 61, 61]");
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = base64_7.encode(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [hg]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        byte[] byteArray9 = base64_7.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = base64_7.encode(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray12);
        byte[] byteArray16 = base64_14.decode("aGc=");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray20);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        java.lang.Object obj24 = base64_14.decode((java.lang.Object) byteArray20);
        boolean boolean25 = base64_14.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray18);
        byte[] byteArray20 = base64_9.decode(byteArray18);
        boolean boolean21 = base64_9.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        java.lang.String str27 = base64_23.encodeToString(byteArray26);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, true, (int) (byte) 100);
        byte[] byteArray32 = base64_9.encode(byteArray31);
        byte[] byteArray33 = base64_2.encode(byteArray31);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64("aGc=\r\n");
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        java.lang.String str37 = base64_2.encodeToString(byteArray36);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg==" + "'", str37, "hg==");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg==\r\n" + "'", str38, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[104, 103]");
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray11 = base64_1.decode(byteArray10);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((-1), byteArray19, true);
        byte[] byteArray24 = base64_22.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        java.lang.Object obj30 = base64_22.encode((java.lang.Object) byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        java.lang.String str36 = base64_22.encodeToString(byteArray35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false);
        java.lang.String str39 = base64_5.encodeToString(byteArray35);
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray35);
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray35);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hg" + "'", str34, "hg");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "aGc" + "'", str36, "aGc");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ufffd" + "'", str39, "\ufffd");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "aGc" + "'", str40, "aGc");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "aGc" + "'", str41, "aGc");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[97, 71, 99]");
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray11);
        byte[] byteArray14 = base64_12.decode("YUdjPYY");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 71, 99, 61, -122]");
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = base64_9.decode(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray21 = base64_2.decode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64(0, byteArray28, true);
        byte[] byteArray33 = base64_22.decode(byteArray28);
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str35 = base64_2.encodeToString(byteArray33);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(false);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger8);
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray13 = base64_2.decode(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray11, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true, 100);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        byte[] byteArray16 = base64_6.decode("aGc=\r\n");
        byte[] byteArray18 = base64_6.decode("WVVkag0K");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[89, 85, 100, 106, 13, 10]");
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3, false);
        boolean boolean9 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = base64_16.decode("hi!");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        boolean boolean20 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray18);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray23);
        java.lang.Object obj25 = base64_15.decode((java.lang.Object) byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        byte[] byteArray27 = base64_8.decode(byteArray23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hg" + "'", str19, "hg");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "YUdjPQ0K\r\n" + "'", str24, "YUdjPQ0K\r\n");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = base64_9.decode(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray21 = base64_2.decode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64(0, byteArray28, true);
        byte[] byteArray33 = base64_22.decode(byteArray28);
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str35 = base64_2.encodeToString(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        boolean boolean42 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray40);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        java.lang.String str46 = base64_37.encodeToString(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray49 = base64_47.decode("hi!");
        java.lang.String str50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        boolean boolean51 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray49);
        java.math.BigInteger bigInteger52 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        byte[] byteArray54 = base64_37.decode(byteArray49);
        byte[] byteArray56 = base64_37.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray60 = base64_58.decode("\ufffd");
        java.lang.Object obj61 = base64_37.decode((java.lang.Object) byteArray60);
        byte[] byteArray62 = base64_2.encode(byteArray60);
        byte[] byteArray64 = null;
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray64, true);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray70 = base64_68.decode("hi!");
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray70);
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64((-1), byteArray70, true);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70);
        java.lang.Object obj75 = base64_66.decode((java.lang.Object) byteArray70);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70, true, false, (int) 'a');
        byte[] byteArray80 = base64_2.decode(byteArray70);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "aGc=\r\n" + "'", str46, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hg" + "'", str50, "hg");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-122]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = base64_9.decode(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray21 = base64_2.decode(byteArray18);
        boolean boolean22 = base64_2.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((-1), byteArray26, true);
        byte[] byteArray31 = base64_29.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        java.lang.Object obj37 = base64_29.encode((java.lang.Object) byteArray34);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        java.lang.String str43 = base64_29.encodeToString(byteArray42);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, false, (int) ' ');
        byte[] byteArray50 = base64_2.decode(byteArray49);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64((-1), byteArray54, true);
        byte[] byteArray59 = base64_57.decode("hg==\r\n");
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger63 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray62);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray62);
        java.math.BigInteger bigInteger65 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray62);
        byte[] byteArray66 = base64_57.decode(byteArray62);
        java.lang.String str67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray66);
        java.math.BigInteger bigInteger68 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray66);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray66);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66);
        byte[] byteArray71 = base64_2.decode(byteArray66);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "aGc" + "'", str43, "aGc");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[89, 85, 100, 106, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(bigInteger65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray11);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = base64_14.decode("hi!");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray16);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, true);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        java.lang.String str26 = base64_12.encodeToString(byteArray25);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "YUdjPQ==" + "'", str26, "YUdjPQ==");
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray1, true);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((-1), byteArray7, true);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        java.lang.Object obj12 = base64_3.decode((java.lang.Object) byteArray7);
        boolean boolean13 = base64_3.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray17);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray22 = base64_3.encode(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, 71, 99, 57, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[89, 85, 100, 106, 79, 86, 66, 82]");
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((-1));
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.decodeBase64("WVVkag0K\r\n");
        byte[] byteArray4 = base64_1.decode(byteArray3);
        boolean boolean5 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[89, 85, 100, 106, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[97, 71, 99]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        java.lang.Object obj17 = base64_9.encode((java.lang.Object) byteArray14);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        java.lang.String str23 = base64_9.encodeToString(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false);
        byte[] byteArray26 = base64_2.decode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray32, false);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.Object obj41 = base64_37.encode((java.lang.Object) byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray40, true);
        boolean boolean45 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64(100, byteArray40);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        java.lang.Object obj48 = base64_2.encode((java.lang.Object) byteArray47);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "aGc" + "'", str23, "aGc");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hg" + "'", str33, "hg");
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj48);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        byte[] byteArray29 = base64_6.decode("hi!");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = base64_6.decode(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        byte[] byteArray42 = base64_6.encode(byteArray40);
        byte[] byteArray44 = base64_6.decode("TDNkdlBRPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[76, 51, 100, 118, 80, 81, 61, 61]");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        byte[] byteArray7 = base64_5.decode("aGc9PQ");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13, true);
        byte[] byteArray18 = base64_16.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = base64_16.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64(0, byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((-1), byteArray21);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray28);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        byte[] byteArray35 = base64_30.decode(byteArray33);
        byte[] byteArray36 = base64_24.decode(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray39 = base64_37.decode("hi!");
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        boolean boolean41 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray39);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray39);
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray39);
        byte[] byteArray46 = base64_24.decode(byteArray45);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger50 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger50);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger50);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray53);
        byte[] byteArray55 = base64_24.decode(byteArray54);
        java.lang.Object obj56 = base64_5.encode((java.lang.Object) byteArray55);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hg" + "'", str40, "hg");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hg" + "'", str43, "hg");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hg" + "'", str44, "hg");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(obj56);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = base64_26.decode("hi!");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((-1), byteArray28, true);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = base64_32.decode("hi!");
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        java.lang.String str36 = base64_31.encodeToString(byteArray34);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray34);
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray34);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false);
        java.lang.Object obj42 = base64_16.decode((java.lang.Object) byteArray41);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg" + "'", str37, "hg");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hg==\r\n" + "'", str39, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[97, 71, 99, 57, 80, 81, 61, 61]");
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        boolean boolean2 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = base64_5.decode("hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((-1), byteArray7, true);
        byte[] byteArray12 = base64_10.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = base64_13.decode("hi!");
        byte[] byteArray16 = base64_10.encode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64(0, byteArray15);
        boolean boolean18 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        java.lang.String str21 = base64_1.encodeToString(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "aGc9PQ0K" + "'", str21, "aGc9PQ0K");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103, 61, 61]");
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        byte[] byteArray17 = base64_6.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray23 = base64_18.decode(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        java.lang.Object obj27 = base64_6.decode((java.lang.Object) byteArray26);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((-1), byteArray32, true);
        byte[] byteArray37 = base64_35.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        byte[] byteArray41 = base64_35.encode(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64(0, byteArray40);
        boolean boolean43 = base64_42.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray47 = base64_45.decode("hi!");
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray47);
        byte[] byteArray49 = base64_44.decode(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        byte[] byteArray53 = base64_42.encode(byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = base64_6.encode((java.lang.Object) base64_42);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[89, 85, 100, 106, 80, 81, 48, 75]");
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray2);
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray2);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg==\r\n" + "'", str4, "hg==\r\n");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg==\r\n" + "'", str5, "hg==\r\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc" + "'", str10, "aGc");
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        boolean boolean28 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        byte[] byteArray37 = base64_6.encode(byteArray36);
        java.lang.Class<?> wildcardClass38 = byteArray36.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        byte[] byteArray3 = base64_1.decode("hg");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray9 = base64_1.encode(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[97, 71, 99, 61, 13, 10]");
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        java.lang.String str13 = base64_8.encodeToString(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray11);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true, (int) (short) 10);
        byte[] byteArray23 = base64_1.encode(byteArray11);
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hg" + "'", str13, "hg");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hg==\r\n" + "'", str16, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray1, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        byte[] byteArray18 = base64_12.encode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64(0, byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((-1), byteArray17);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        byte[] byteArray28 = base64_20.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((-1), byteArray32, true);
        byte[] byteArray37 = base64_35.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.lang.Object obj43 = base64_35.encode((java.lang.Object) byteArray40);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = base64_44.decode("hi!");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        java.lang.String str49 = base64_35.encodeToString(byteArray48);
        boolean boolean50 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray48);
        java.lang.String str51 = base64_20.encodeToString(byteArray48);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, true, false);
        byte[] byteArray55 = base64_3.decode(byteArray48);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hg" + "'", str47, "hg");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "aGc" + "'", str49, "aGc");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "aGc=" + "'", str51, "aGc=");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[97, 71, 99, 61, 13, 10]");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray24);
        byte[] byteArray27 = base64_6.decode(byteArray24);
        byte[] byteArray29 = base64_6.decode("hi!");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        byte[] byteArray38 = base64_6.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = base64_40.decode("hi!");
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((-1), byteArray42, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42);
        java.lang.Object obj47 = base64_6.encode((java.lang.Object) byteArray42);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = base64_49.decode("hi!");
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((-1), byteArray51, true);
        byte[] byteArray56 = base64_54.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        boolean boolean61 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray59);
        java.math.BigInteger bigInteger62 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray59);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        boolean boolean64 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray63);
        byte[] byteArray65 = base64_54.decode(byteArray63);
        byte[] byteArray66 = base64_6.decode(byteArray63);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, true);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray68);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-122]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-122]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 78, 67, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.lang.String str19 = base64_10.encodeToString(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray22);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray27 = base64_10.decode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray31);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray38 = base64_33.decode(byteArray36);
        java.lang.Object obj39 = base64_10.decode((java.lang.Object) byteArray36);
        java.lang.Object obj40 = base64_8.encode((java.lang.Object) byteArray36);
        boolean boolean41 = base64_8.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.lang.String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray45);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray49);
        byte[] byteArray51 = base64_42.encode(byteArray49);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        byte[] byteArray53 = base64_8.encode(byteArray49);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, true, true);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray57);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "aGc=\r\n" + "'", str19, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hg" + "'", str46, "hg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[97, 71, 99, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[89, 85, 100, 106, 68, 81, 111]");
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        byte[] byteArray17 = base64_6.decode(byteArray15);
        boolean boolean18 = base64_6.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        java.lang.String str24 = base64_20.encodeToString(byteArray23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, true, (int) (byte) 100);
        byte[] byteArray29 = base64_6.encode(byteArray28);
        byte[] byteArray31 = null;
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64(10, byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = base64_34.decode("hi!");
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((-1), byteArray36, true);
        byte[] byteArray41 = base64_39.decode("hg==\r\n");
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger45 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        java.math.BigInteger bigInteger46 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        byte[] byteArray48 = base64_39.decode(byteArray44);
        java.lang.String str49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray48);
        java.math.BigInteger bigInteger50 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray48);
        byte[] byteArray51 = base64_32.decode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = base64_52.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray58 = base64_56.decode("hi!");
        java.lang.String str59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray58);
        boolean boolean60 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64(0, byteArray58, true);
        byte[] byteArray63 = base64_52.decode(byteArray58);
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray63);
        java.lang.String str65 = base64_32.encodeToString(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_67 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray70 = base64_68.decode("hi!");
        java.lang.String str71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray70);
        boolean boolean72 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray70);
        java.math.BigInteger bigInteger73 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray70);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray74);
        java.lang.String str76 = base64_67.encodeToString(byteArray74);
        org.apache.commons.codec.binary.Base64 base64_77 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray79 = base64_77.decode("hi!");
        java.lang.String str80 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray79);
        boolean boolean81 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray79);
        java.math.BigInteger bigInteger82 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray79);
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray79);
        byte[] byteArray84 = base64_67.decode(byteArray79);
        byte[] byteArray86 = base64_67.decode("aGc");
        org.apache.commons.codec.binary.Base64 base64_88 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray90 = base64_88.decode("\ufffd");
        java.lang.Object obj91 = base64_67.decode((java.lang.Object) byteArray90);
        byte[] byteArray92 = base64_32.encode(byteArray90);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray92);
        java.lang.Object obj94 = base64_6.decode((java.lang.Object) byteArray93);
        byte[] byteArray96 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray93, true);
        java.lang.String str97 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray96);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-122]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hg" + "'", str59, "hg");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-122]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hg" + "'", str71, "hg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(bigInteger73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "aGc=\r\n" + "'", str76, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-122]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hg" + "'", str80, "hg");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(bigInteger82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj94);
        org.junit.Assert.assertNotNull(byteArray96);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str97 + "' != '" + "WVVkalBRMEsNCg" + "'", str97, "WVVkalBRMEsNCg");
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = base64_5.decode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14, true);
        byte[] byteArray19 = base64_17.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        java.lang.Object obj25 = base64_17.encode((java.lang.Object) byteArray22);
        java.lang.String str26 = base64_5.encodeToString(byteArray22);
        boolean boolean27 = base64_5.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray31);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((-1), byteArray37, true);
        byte[] byteArray42 = base64_40.decode("hg==\r\n");
        byte[] byteArray43 = base64_33.encode(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray47 = base64_45.decode("hi!");
        java.lang.String str48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray47);
        boolean boolean49 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray47);
        java.math.BigInteger bigInteger50 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray47);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray47);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray51);
        byte[] byteArray53 = base64_44.encode(byteArray51);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray51);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray56 = base64_33.encode(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false);
        java.lang.String str66 = base64_33.encodeToString(byteArray65);
        byte[] byteArray67 = base64_5.encode(byteArray65);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ufffd" + "'", str26, "\ufffd");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hg" + "'", str48, "hg");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[104, 103, 61, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ufffd" + "'", str66, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[97, 71, 99, 57, 80, 81, 61, 61, -122]");
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        byte[] byteArray22 = base64_6.decode("hg==");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger26);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103, 61, 61]");
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        byte[] byteArray3 = base64_1.decode("\ufffd");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.lang.Object obj19 = base64_1.decode((java.lang.Object) byteArray17);
        boolean boolean20 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = base64_22.decode("hi!");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray24);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray31);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray31, true);
        boolean boolean36 = base64_35.isUrlSafe();
        byte[] byteArray38 = base64_35.decode("aGc9PQ0K");
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray38);
        byte[] byteArray40 = base64_26.decode(byteArray38);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, true);
        java.lang.Object obj43 = base64_1.decode((java.lang.Object) byteArray38);
        boolean boolean44 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "aGc=\r\n" + "'", str9, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hg" + "'", str25, "hg");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64("\ufffd");
        byte[] byteArray17 = base64_6.decode(byteArray16);
        byte[] byteArray19 = base64_6.decode("hg==\r\n");
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(1, byteArray29);
        java.lang.Object obj31 = base64_6.decode((java.lang.Object) byteArray29);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64(0, byteArray35, true);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray40 = base64_38.decode("hi!");
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        byte[] byteArray42 = base64_37.decode(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray40, false);
        java.lang.Object obj45 = base64_6.decode((java.lang.Object) byteArray40);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(obj45);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray18);
        byte[] byteArray20 = base64_9.decode(byteArray18);
        boolean boolean21 = base64_9.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        java.lang.String str27 = base64_23.encodeToString(byteArray26);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, true, (int) (byte) 100);
        byte[] byteArray32 = base64_9.encode(byteArray31);
        byte[] byteArray33 = base64_2.encode(byteArray31);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64("aGc=\r\n");
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        java.lang.String str37 = base64_2.encodeToString(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = base64_39.decode("hi!");
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((-1), byteArray41, true);
        byte[] byteArray46 = base64_44.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray49 = base64_47.decode("hi!");
        java.lang.String str50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        java.math.BigInteger bigInteger51 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        java.lang.Object obj52 = base64_44.encode((java.lang.Object) byteArray49);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        java.lang.String str56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        java.lang.String str58 = base64_44.encodeToString(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray62);
        byte[] byteArray65 = base64_44.decode(byteArray62);
        byte[] byteArray67 = base64_44.decode("hi!");
        byte[] byteArray70 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger71 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        java.math.BigInteger bigInteger72 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        java.math.BigInteger bigInteger73 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger73);
        java.lang.String str75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray74);
        byte[] byteArray76 = base64_44.decode(byteArray74);
        org.apache.commons.codec.binary.Base64 base64_78 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_79 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray81 = base64_79.decode("hi!");
        java.lang.String str82 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray81);
        boolean boolean83 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray81);
        java.math.BigInteger bigInteger84 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray81);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray81);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray85);
        byte[] byteArray87 = base64_78.encode(byteArray85);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray85);
        org.apache.commons.codec.binary.Base64 base64_89 = new org.apache.commons.codec.binary.Base64(1, byteArray88);
        byte[] byteArray90 = base64_44.decode(byteArray88);
        byte[] byteArray91 = base64_2.decode(byteArray88);
        byte[] byteArray93 = base64_2.decode("YUdjPQ==\r\n");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-122]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg==" + "'", str37, "hg==");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hg" + "'", str50, "hg");
        org.junit.Assert.assertNotNull(bigInteger51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hg" + "'", str56, "hg");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "aGc" + "'", str58, "aGc");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger71);
        org.junit.Assert.assertNotNull(bigInteger72);
        org.junit.Assert.assertNotNull(bigInteger73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-122]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hg" + "'", str82, "hg");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-122]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[97, 71, 99, 61]");
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 0);
        byte[] byteArray3 = base64_1.decode("\ufffd");
        byte[] byteArray4 = null;
        byte[] byteArray5 = base64_1.decode(byteArray4);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNull(byteArray5);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3, false);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        byte[] byteArray12 = base64_7.decode(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        byte[] byteArray17 = base64_6.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((-1), byteArray21, true);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        java.lang.String str29 = base64_24.encodeToString(byteArray27);
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        boolean boolean32 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray27);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        java.lang.Object obj36 = base64_6.encode((java.lang.Object) byteArray27);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[89, 85, 100, 106, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hg" + "'", str29, "hg");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hg" + "'", str30, "hg");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hg==\r\n" + "'", str33, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103]");
        org.junit.Assert.assertNotNull(obj36);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray6, false);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13, true);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        java.lang.String str26 = base64_16.encodeToString(byteArray25);
        byte[] byteArray27 = base64_9.encode(byteArray25);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, (int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hg" + "'", str24, "hg");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "aGc9PQ0K" + "'", str26, "aGc9PQ0K");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[97, 71, 99, 57, 80, 81, 48, 75]");
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((-1), byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        java.lang.String str12 = base64_7.encodeToString(byteArray10);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = base64_8.decode("hi!");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.lang.String str16 = base64_7.encodeToString(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = base64_7.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = base64_25.decode("hi!");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false);
        java.lang.String str34 = base64_7.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = base64_35.decode("hi!");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray37);
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray42 = base64_7.decode(byteArray37);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false);
        java.lang.Object obj46 = base64_5.encode((java.lang.Object) byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "aGc=\r\n" + "'", str16, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hg" + "'", str28, "hg");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "aGc=\r\n" + "'", str34, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-122]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hg" + "'", str38, "hg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hg" + "'", str41, "hg");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, false);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, true, 1);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false, true);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        java.lang.Object obj14 = base64_6.encode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = base64_15.decode("hi!");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.lang.String str20 = base64_6.encodeToString(byteArray19);
        byte[] byteArray22 = base64_6.decode("hg==");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hg" + "'", str18, "hg");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "aGc" + "'", str20, "aGc");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        boolean boolean2 = base64_1.isUrlSafe();
        byte[] byteArray4 = base64_1.decode("\ufffd");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray5);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[89, 85, 100, 106, 80, 81, 48, 75]");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "WVVkalBRMEs" + "'", str6, "WVVkalBRMEs");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "WVVkalBRMEs=\r\n" + "'", str7, "WVVkalBRMEs=\r\n");
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 71, 99, 57, 80, 81, 61, 61]");
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 10);
        boolean boolean2 = base64_1.isUrlSafe();
        boolean boolean3 = base64_1.isUrlSafe();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray5);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray11 = base64_9.decode("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((-1), byteArray11, true);
        byte[] byteArray16 = base64_14.decode("hg==\r\n");
        byte[] byteArray17 = base64_7.encode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((-1), byteArray21, true);
        byte[] byteArray26 = base64_24.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = base64_27.decode("hi!");
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        java.lang.Object obj32 = base64_24.encode((java.lang.Object) byteArray29);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray35 = base64_33.decode("hi!");
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        java.lang.String str38 = base64_24.encodeToString(byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false);
        java.lang.String str41 = base64_7.encodeToString(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        byte[] byteArray47 = base64_42.decode(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        java.lang.String str49 = base64_7.encodeToString(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray48);
        java.lang.Object obj51 = base64_1.decode((java.lang.Object) byteArray48);
        boolean boolean52 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray56);
        java.lang.String str58 = base64_54.encodeToString(byteArray57);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, true, (int) (byte) 100);
        byte[] byteArray63 = base64_1.encode(byteArray57);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-122]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hg" + "'", str30, "hg");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "aGc" + "'", str38, "aGc");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, 71, 99, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ufffd" + "'", str41, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-122]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[97, 71, 99, 61, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ufffd" + "'", str49, "\ufffd");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-122]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = base64_5.decode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14, true);
        byte[] byteArray19 = base64_17.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = base64_20.decode("hi!");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        java.lang.Object obj25 = base64_17.encode((java.lang.Object) byteArray22);
        java.lang.String str26 = base64_5.encodeToString(byteArray22);
        boolean boolean27 = base64_5.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = base64_30.decode("hi!");
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        boolean boolean34 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray32);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray36);
        java.lang.String str38 = base64_29.encodeToString(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = base64_39.decode("hi!");
        java.lang.String str42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray41);
        boolean boolean43 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray41);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        byte[] byteArray46 = base64_29.decode(byteArray41);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray41);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray47);
        byte[] byteArray49 = base64_5.decode(byteArray47);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hg" + "'", str23, "hg");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ufffd" + "'", str26, "\ufffd");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hg" + "'", str33, "hg");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "aGc=\r\n" + "'", str38, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hg" + "'", str42, "hg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger5);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, false);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, true, 1);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray15);
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((-1), byteArray6, true);
        byte[] byteArray11 = base64_9.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = base64_9.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(0, byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray25 = base64_17.decode(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, false);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray24);
        byte[] byteArray31 = base64_29.decode("ZAA=\r\n");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 0]");
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray9);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray18);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg==\r\n" + "'", str15, "hg==\r\n");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 71, 99]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.String str11 = base64_6.encodeToString(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true, false, (int) (short) 10);
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hg" + "'", str11, "hg");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hg" + "'", str12, "hg");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[97, 71, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger18);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger4 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((-1), byteArray12, true);
        byte[] byteArray17 = base64_15.decode("hg==\r\n");
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray24 = base64_15.decode(byteArray20);
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger26);
        byte[] byteArray28 = base64_8.encode(byteArray27);
        boolean boolean29 = base64_8.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((-1), byteArray3, true);
        byte[] byteArray8 = base64_6.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray12 = base64_10.decode("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((-1), byteArray12, true);
        byte[] byteArray17 = base64_15.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("hi!");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        java.lang.Object obj23 = base64_15.encode((java.lang.Object) byteArray20);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = base64_24.decode("hi!");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray26);
        java.lang.String str29 = base64_15.encodeToString(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray33);
        byte[] byteArray36 = base64_15.decode(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = base64_39.decode("hi!");
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((-1), byteArray41, true);
        byte[] byteArray46 = base64_44.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray49 = base64_47.decode("hi!");
        java.lang.String str50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        java.math.BigInteger bigInteger51 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        java.lang.Object obj52 = base64_44.encode((java.lang.Object) byteArray49);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = base64_53.decode("hi!");
        java.lang.String str56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        java.lang.String str58 = base64_44.encodeToString(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = base64_60.decode("hi!");
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray62);
        byte[] byteArray65 = base64_44.decode(byteArray62);
        byte[] byteArray67 = base64_44.decode("hi!");
        byte[] byteArray70 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger71 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        java.math.BigInteger bigInteger72 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        java.math.BigInteger bigInteger73 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger73);
        java.lang.String str75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray74);
        byte[] byteArray76 = base64_44.decode(byteArray74);
        org.apache.commons.codec.binary.Base64 base64_78 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray74, false);
        byte[] byteArray79 = base64_15.decode(byteArray74);
        java.lang.Object obj80 = base64_6.encode((java.lang.Object) byteArray74);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, true, false, 10);
        boolean boolean85 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray84);
        java.lang.String str86 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray84);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray84, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-122]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hg" + "'", str21, "hg");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hg" + "'", str27, "hg");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "aGc" + "'", str29, "aGc");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-122]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-122]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-122]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hg" + "'", str50, "hg");
        org.junit.Assert.assertNotNull(bigInteger51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-122]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hg" + "'", str56, "hg");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "aGc" + "'", str58, "aGc");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-122]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-122]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger71);
        org.junit.Assert.assertNotNull(bigInteger72);
        org.junit.Assert.assertNotNull(bigInteger73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        byte[] byteArray14 = base64_8.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((-1), byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        byte[] byteArray24 = base64_16.decode(byteArray23);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray2);
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray2);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false, (int) '4');
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg==\r\n" + "'", str4, "hg==\r\n");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg==\r\n" + "'", str5, "hg==\r\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[89, 85, 100, 106, 80, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[87, 86, 86, 107, 97, 108, 66, 82, 80, 84, 48]");
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 0);
        byte[] byteArray3 = base64_1.decode("WVVkalBRPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[89, 85, 100, 106, 80, 81, 61, 61]");
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-122]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[104, 103, 61, 61]");
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = base64_7.decode("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((-1), byteArray9, true);
        byte[] byteArray14 = base64_12.decode("hg==\r\n");
        byte[] byteArray15 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = base64_17.decode("hi!");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray25 = base64_16.encode(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray28 = base64_5.encode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray39 = base64_5.encode(byteArray37);
        byte[] byteArray40 = null;
        byte[] byteArray41 = base64_5.decode(byteArray40);
        byte[] byteArray43 = base64_5.decode("V1ZWa2FrOVdRbEk9\r\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hg" + "'", str20, "hg");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 71, 99, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, 103, 61, 61, -122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 71, 99, 61, -122]");
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[87, 86, 86, 107, 97, 107, 57, 87, 81, 108, 73, 61]");
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.lang.String str10 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray13 = base64_11.decode("hi!");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray18 = base64_1.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray21 = base64_19.decode("hi!");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false);
        java.lang.String str28 = base64_1.encodeToString(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = base64_29.decode("hi!");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray31);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray36 = base64_1.decode(byteArray31);
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger38);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hg" + "'", str5, "hg");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "aGc=\r\n" + "'", str10, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-122]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hg" + "'", str14, "hg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hg" + "'", str22, "hg");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 71, 99, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "aGc=\r\n" + "'", str28, "aGc=\r\n");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hg" + "'", str32, "hg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hg" + "'", str35, "hg");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger3 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        byte[] byteArray0 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, true, true, (int) ' ');
        org.junit.Assert.assertNull(byteArray4);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = base64_3.decode("hi!");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1), byteArray5, true);
        byte[] byteArray10 = base64_8.decode("hg==\r\n");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray17 = base64_8.decode(byteArray13);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, true, true);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.lang.String str23 = base64_1.encodeToString(byteArray17);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = base64_1.decode("hi!");
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64(0, byteArray3, true);
        boolean boolean8 = base64_7.isUrlSafe();
        byte[] byteArray10 = base64_7.decode("aGc=\r\n");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14, true);
        byte[] byteArray19 = base64_17.decode("hg==\r\n");
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray26 = base64_17.decode(byteArray22);
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, true);
        java.lang.String str31 = base64_7.encodeToString(byteArray30);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger37);
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        byte[] byteArray40 = base64_7.decode(byteArray38);
        boolean boolean41 = base64_7.isUrlSafe();
        boolean boolean42 = base64_7.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = base64_43.decode("hi!");
        java.math.BigInteger bigInteger46 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray45);
        byte[] byteArray48 = base64_7.decode(byteArray47);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hg" + "'", str4, "hg");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-122]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-122]");
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = base64_4.decode("hi!");
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray6, true);
        byte[] byteArray11 = base64_0.decode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = base64_12.decode("hi!");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray18);
        java.lang.Object obj21 = base64_0.encode((java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray29 = base64_0.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = base64_31.decode("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray33);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str37 = base64_0.encodeToString(byteArray33);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10 };
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger43);
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray44);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, true, (int) (byte) 100);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray54 = base64_0.encode(byteArray44);
        boolean boolean55 = base64_0.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = base64_57.decode("hi!");
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        java.math.BigInteger bigInteger61 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray59);
        java.lang.String str62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray59, false);
        byte[] byteArray66 = base64_64.decode("\ufffd");
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, false);
        java.lang.String str70 = base64_0.encodeToString(byteArray67);
        byte[] byteArray72 = base64_0.decode("\ufffd");
        org.apache.commons.codec.binary.Base64 base64_74 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray76 = base64_74.decode("hi!");
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray76);
        org.apache.commons.codec.binary.Base64 base64_79 = new org.apache.commons.codec.binary.Base64((-1), byteArray76, true);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray76);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray76);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray81);
        java.math.BigInteger bigInteger83 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray82);
        java.math.BigInteger bigInteger84 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray82);
        byte[] byteArray85 = base64_0.decode(byteArray82);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray85);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hg" + "'", str15, "hg");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 71, 99]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-122]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hg" + "'", str36, "hg");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hg==" + "'", str37, "hg==");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-122]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hg" + "'", str60, "hg");
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hg" + "'", str62, "hg");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[89, 85, 100, 106, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[87, 86, 86, 107, 97, 108, 66, 82, 77, 69, 115, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "WVVkalBRMEs=" + "'", str70, "WVVkalBRMEs=");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[97, 71, 99, 57, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-122]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[97, 71, 99, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger83);
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[97, 71, 99]");
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = base64_2.decode("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 103]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = base64_0.decode("hi!");
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray2);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false, (int) (byte) 100);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hg" + "'", str3, "hg");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hg" + "'", str6, "hg");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hg" + "'", str7, "hg");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 71, 99, 57, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(1);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.decodeBase64("hg==\r\n");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        java.lang.String str5 = base64_1.encodeToString(byteArray4);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }
}
