diff --git a/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java b/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java
index 0190909..b9c02bf 100644
--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java
+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java
@@ -16,6 +16,8 @@
  */
 package org.apache.commons.jxpath.ri.model.beans;
 
+import org.apache.commons.jxpath.AbstractFactory;
+import org.apache.commons.jxpath.JXPathAbstractFactoryException;
 import org.apache.commons.jxpath.JXPathContext;
 import org.apache.commons.jxpath.JXPathInvalidAccessException;
 import org.apache.commons.jxpath.ri.QName;
@@ -106,12 +108,15 @@ public class NullPropertyPointer extends PropertyPointer {
             return newParent.createAttribute(context, getName());
         }
         else {
+            if (parent instanceof NullPointer && parent.equals(newParent)) {
+                throw createBadFactoryException(context.getFactory());
+            }
             // Consider these two use cases:
             // 1. The parent pointer of NullPropertyPointer is 
             //    a PropertyOwnerPointer other than NullPointer. When we call 
             //    createPath on it, it most likely returns itself. We then
             //    take a PropertyPointer from it and get the PropertyPointer
-            //    to expand the collection for the corresponsing property.
+            //    to expand the collection for the corresponding property.
             //
             // 2. The parent pointer of NullPropertyPointer is a NullPointer.
             //    When we call createPath, it may return a PropertyOwnerPointer
@@ -135,6 +140,9 @@ public class NullPropertyPointer extends PropertyPointer {
             return pointer;
         }
         else {
+            if (parent instanceof NullPointer && parent.equals(newParent)) {
+                throw createBadFactoryException(context.getFactory());
+            }
             if (newParent instanceof PropertyOwnerPointer) {
                 PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent;
                 newParent = pop.getPropertyPointer();
@@ -221,4 +229,10 @@ public class NullPropertyPointer extends PropertyPointer {
         }
         return string;
     }
+
+    private JXPathAbstractFactoryException createBadFactoryException(AbstractFactory factory) {
+        return new JXPathAbstractFactoryException("Factory " + factory
+                + " reported success creating object for path: " + asPath()
+                + " but object was null.  Terminating to avoid stack recursion.");
+    }
 }
\ No newline at end of file
diff --git a/src/test/org/apache/commons/jxpath/ri/model/beans/BadlyImplementedFactoryTest.java b/src/test/org/apache/commons/jxpath/ri/model/beans/BadlyImplementedFactoryTest.java
new file mode 100755
index 0000000..493b6fb
--- /dev/null
+++ b/src/test/org/apache/commons/jxpath/ri/model/beans/BadlyImplementedFactoryTest.java
@@ -0,0 +1,68 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.jxpath.ri.model.beans;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import junit.framework.TestCase;
+
+import org.apache.commons.jxpath.AbstractFactory;
+import org.apache.commons.jxpath.JXPathAbstractFactoryException;
+import org.apache.commons.jxpath.JXPathContext;
+import org.apache.commons.jxpath.JXPathException;
+import org.apache.commons.jxpath.Pointer;
+
+/**
+ * Badly-implemented Factory test.  From JIRA JXPATH-68.
+ *
+ * @author Matt Benson
+ * @version $Revision:$ $Date:$
+ */
+public class BadlyImplementedFactoryTest extends TestCase {
+
+    private JXPathContext context;
+
+    /**
+     * Construct a new instance of this test case.
+     *
+     * @param name Name of the test case
+     */
+    public BadlyImplementedFactoryTest(String name) {
+        super(name);
+    }
+
+    public void setUp() {
+        context = JXPathContext.newContext(new HashMap());
+        context.setFactory(new AbstractFactory() {
+            public boolean createObject(JXPathContext context, Pointer pointer, Object parent, String name, int index) {
+                ((Map) parent).put(name, null);
+                return true;
+            }
+        });
+    }
+
+    public void testBadFactoryImplementation() {
+        try {
+            context.createPath("foo/bar");
+            fail("should fail with JXPathException caused by JXPathAbstractFactoryException");
+        } catch (JXPathException e) {
+            assertTrue(e.getCause() instanceof JXPathAbstractFactoryException);
+        }
+    }
+
+}
