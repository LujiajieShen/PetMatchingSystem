/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 09 23:56:50 GMT 2024
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8StreamJsonParser_ESTest extends UTF8StreamJsonParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)47, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, (byte[]) null, (-679), (-679), false);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.readValueAs(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for the parser, can not deserialize JSON into Java objects
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1977), mockFileInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)0, 39, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      uTF8StreamJsonParser0.setCodec(objectCodec1);
      assertNull(uTF8StreamJsonParser0.getCurrentName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "", true);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 636, bufferedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-413), (-225), true);
      JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
      assertEquals((-1L), jsonLocation0.getCharOffset());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)14, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 12, (-2262), true);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xb1
         //  at [Source: java.lang.String@0000000001; line: 1, column: -2260]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 152, 2000);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, (-347), 224, true);
      ByteArrayInputStream byteArrayInputStream1 = (ByteArrayInputStream)uTF8StreamJsonParser0.getInputSource();
      assertEquals((-151), byteArrayInputStream1.available());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "", true);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 65536, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 3109, (-3057), true);
      try { 
        uTF8StreamJsonParser0.nextLongValue((byte) (-3));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: java.lang.String@0000000002; line: 1, column: -3054]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER;
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(bufferRecycler_ByteBufferType0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-77), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)47, (byte)0, false);
      int int0 = uTF8StreamJsonParser0.releaseBuffered((OutputStream) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER;
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(bufferRecycler_ByteBufferType0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-87), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)47, (byte)0, false);
      uTF8StreamJsonParser0.nextTextValue();
      assertTrue(uTF8StreamJsonParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 32, (-848));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 10, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 255, 92, true);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000003; line: 1, column: 348]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-57), pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2699, 48, true);
      try { 
        uTF8StreamJsonParser0.nextLongValue(48);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // InputStream.read() returned 0 characters when trying to read 0 bytes
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte) (-8));
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 5, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-1232), (-1470), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextLongValue((byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 3572, 66, true);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000004; line: 1, column: 3639]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1800), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 794, 2613, true);
      String string0 = uTF8StreamJsonParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 102, (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, 110, 2000, false);
      String string0 = uTF8StreamJsonParser0.getValueAsString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "C~+", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 3448, (byte) (-61), true);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)6, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 224, 66, false);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-4160), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 5, 1096, false);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(68);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 117, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2223, 45, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1257), pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-116), 5830, false);
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertEquals("}", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1257), pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-116), 5830, false);
      char[] charArray0 = uTF8StreamJsonParser0.getTextCharacters();
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)86, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte)86, (-69), false);
      int int0 = uTF8StreamJsonParser0.getTextLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER;
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(bufferRecycler_ByteBufferType0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-87), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)47, (byte)0, false);
      int int0 = uTF8StreamJsonParser0.getTextOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER;
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(bufferRecycler_ByteBufferType0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-77), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)47, (byte)0, false);
      try { 
        uTF8StreamJsonParser0.getBinaryValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000005; line: 1, column: 48]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)6, pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-3695), (byte)24, true);
      uTF8StreamJsonParser0._tokenIncomplete = true;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3695
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)43;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-62), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 5, 5, true);
      try { 
        uTF8StreamJsonParser0.nextLongValue(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000006; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)92, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 128, (byte) (-40), false);
      SerializedString serializedString0 = new SerializedString("");
      boolean boolean0 = uTF8StreamJsonParser0.nextFieldName(serializedString0);
      assertTrue(uTF8StreamJsonParser0.isClosed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)92, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 128, (byte) (-40), false);
      int int0 = uTF8StreamJsonParser0.nextIntValue((byte)92);
      assertTrue(uTF8StreamJsonParser0.isClosed());
      assertEquals(92, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER;
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(bufferRecycler_ByteBufferType0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-87), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)47, (byte)0, false);
      uTF8StreamJsonParser0.nextLongValue(0L);
      assertTrue(uTF8StreamJsonParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 93);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-8), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 93, (-2495), true);
      try { 
        uTF8StreamJsonParser0._parseNumber(1000);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000007; line: 1, column: -2492]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4017, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 0, 4017, true);
      try { 
        uTF8StreamJsonParser0._parseNumber((byte)81);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000008; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "1", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)6, pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)0, (byte)127, true);
      try { 
        uTF8StreamJsonParser0._parseNumber((-418));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00C3' (code 195)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000009; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)48, (byte)37);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 481, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte)0, (-1365), true);
      JsonToken jsonToken0 = uTF8StreamJsonParser0._parseNumber(56);
      assertTrue(jsonToken0.isScalarValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-8);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 93);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-8), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 93, (-2495), true);
      try { 
        uTF8StreamJsonParser0._parseNumber(1000);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00F8' (code 248)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000010; line: 1, column: -2492]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte)35, 2000, false);
      try { 
        uTF8StreamJsonParser0._parseName(160);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00A0' (code 160)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000011; line: 1, column: 36]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 200);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)4, pushbackInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 32, (-848), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName((byte) (-123));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -123
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "1", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 0, (byte)6, false);
      try { 
        uTF8StreamJsonParser0.parseLongName(69);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: java.lang.String@0000000012; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 32, (-848));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-123), 269, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -123
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, (byte)14);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 932, pushbackInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 110, (byte)14, true);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: java.lang.String@0000000013; line: 1, column: 19]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      File file0 = MockFile.createTempFile("TkJ;>N)+Q}y@n}qP", "Z_r-#<UJ9Wfrl");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-115), mockFileInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 3099, 0, true);
      try { 
        uTF8StreamJsonParser0._parseName(39);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (''' (code 39)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
         //  at [Source: java.lang.Object@0000000014; line: 1, column: 3100]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 45);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1742, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 145, (-11), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleOddName(45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1342, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, (byte[]) null, 58, 269, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleOddName((byte)86);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 45);
      byteArrayInputStream0.read(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1742, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 145, (-11), true);
      try { 
        uTF8StreamJsonParser0._handleOddName(45);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: java.io.ByteArrayInputStream@0000000015; line: 1, column: 135]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)43;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 35, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 372, (byte) (-67), true);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000016; line: 1, column: -32]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER;
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(bufferRecycler_ByteBufferType0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)122, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 98, 2000, true);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000017; line: 1, column: 4001]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.READ_IO_BUFFER;
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(bufferRecycler_ByteBufferType0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2138), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)47, 711, false);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000018; line: 1, column: 8712]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2014), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 240, 92, true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 1, column: 117]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)55;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 684, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2312, (-1105), true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000019; line: 1, column: -1100]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "", true);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-3), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-3), (byte) (-3), true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: java.lang.String@0000000020; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[12];
      byteArray0[1] = (byte) (-8);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2014), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 240, 92, true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xf8
         //  at [Source: UNKNOWN; line: 1, column: 95]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 45);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 45, (byte)0, true);
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: java.io.ByteArrayInputStream@0000000021; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte) (-8));
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 80, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte)0, 1119, false);
      try { 
        uTF8StreamJsonParser0.nextLongValue((-885L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('%' (code 37)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[17];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-67), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 117, (-3466), false);
      try { 
        uTF8StreamJsonParser0._handleUnexpectedValue((byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000022; line: 1, column: 118]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 31, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte)0, 22, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleUnexpectedValue(415);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(92);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)55;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 92, pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)1, 2041, true);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000023; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(92);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-38);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 92, pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)1, 2041, true);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000024; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "", true);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 65536, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 3109, (-3057), true);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: java.lang.String@0000000025; line: 1, column: -3054]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-456), (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 415, (-871), false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("", 705);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[12];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)48);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)35, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 153, 153, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("tdK?Q/>$1j$j", 153);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "1", false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-61), pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)0, (byte)6, true);
      try { 
        uTF8StreamJsonParser0.nextLongValue((byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: java.lang.String@0000000026; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "", true);
      byte[] byteArray0 = new byte[2];
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)0, 12, true);
      try { 
        uTF8StreamJsonParser0.nextLongValue((byte) (-79));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.lang.String@0000000027; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 12, 4028, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER;
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(bufferRecycler_ByteBufferType0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-77), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)47, (byte)0, false);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000028; line: 1, column: 48]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "1", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-61), pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)0, (byte)6, true);
      uTF8StreamJsonParser0._skipCR();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER;
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(bufferRecycler_ByteBufferType0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2000, 2000, false);
      uTF8StreamJsonParser0._skipCR();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "", true);
      byte[] byteArray0 = new byte[2];
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2613, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2613, 2613, true);
      uTF8StreamJsonParser0._skipCR();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)69, 45);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, Integer.MAX_VALUE, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 71, (byte)69, false);
      try { 
        uTF8StreamJsonParser0._handleUnexpectedValue(65536);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u0000': was expecting ('true', 'false' or 'null')
         //  at [Source: java.io.ByteArrayInputStream@0000000029; line: 1, column: 141]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 80, (byte)0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 80, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte)0, 415, true);
      try { 
        uTF8StreamJsonParser0._matchToken("cG8n)DjiBz", (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        UTF8StreamJsonParser.growArrayBy((int[]) null, (-1712));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }
}
