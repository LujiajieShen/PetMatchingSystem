/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 23:47:39 GMT 2024
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonPointer_ESTest extends JsonPointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("*+\"A-cJ9p+).e", 0);
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("*+\"A-cJ9p+).e", jsonPointer0.toString());
      assertEquals("~*+\"A-cJ9p+).e", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseQuotedTail("", 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("U0vE");
      assertEquals("U0vE", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("0vE", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      JsonPointer jsonPointer1 = JsonPointer._parseTail("RP{T%kV]qsX0(r3Wp");
      boolean boolean0 = jsonPointer1.equals(jsonPointer0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("P{T%kV]qsX0(r3Wp", jsonPointer1.getMatchingProperty());
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertFalse(jsonPointer0.equals((Object)jsonPointer1));
      assertEquals("RP{T%kV]qsX0(r3Wp", jsonPointer1.toString());
      assertFalse(jsonPointer1.matches());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = jsonPointer0.matchElement((-950));
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer.valueOf("\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"\"\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf("/$v-Bi-yV /Z");
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("$v-Bi-yV ", jsonPointer0.getMatchingProperty());
      assertEquals("/$v-Bi-yV /Z", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.toString();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("+\"-/3GJv");
      JsonPointer jsonPointer1 = jsonPointer0.tail();
      assertEquals("3GJv", jsonPointer1.getMatchingProperty());
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertEquals("+\"-/3GJv", jsonPointer0.toString());
      assertEquals("\"-", jsonPointer0.getMatchingProperty());
      assertNotNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      JsonPointer jsonPointer1 = new JsonPointer("6z9*6#`jVz*y#Tu{@eQ", "6z9*6#`jVz*y#Tu{@eQ", jsonPointer0);
      JsonPointer jsonPointer2 = jsonPointer1.tail();
      assertEquals((-1), jsonPointer2.getMatchingIndex());
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertSame(jsonPointer2, jsonPointer0);
      assertNotNull(jsonPointer2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("'^j>Z|Cd'QZJFHX3V@");
      JsonPointer jsonPointer1 = new JsonPointer("U0vE", "U0vE", jsonPointer0);
      JsonPointer jsonPointer2 = jsonPointer1.matchProperty("U0vE");
      assertEquals((-1), jsonPointer2.getMatchingIndex());
      assertEquals("^j>Z|Cd'QZJFHX3V@", jsonPointer2.getMatchingProperty());
      assertNotNull(jsonPointer2);
      assertEquals("'^j>Z|Cd'QZJFHX3V@", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.getMatchingProperty();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer.valueOf("*+\"A-cJ9p+).e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"*+\"A-cJ9p+).e\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseTail("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseTail("0&o'&AfMu`/4\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"4\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseTail((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseQuotedTail((String) null, (-713));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseQuotedTail("z5i", 48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 1, end 47, s.length() 3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      JsonPointer jsonPointer1 = null;
      try {
        jsonPointer1 = new JsonPointer("\"", (String) null, jsonPointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      JsonPointer jsonPointer1 = new JsonPointer("PN(fZHZFtcEMwiG", "vq#x2vh~$|T|", jsonPointer0);
      boolean boolean0 = jsonPointer1.mayMatchProperty();
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertEquals("PN(fZHZFtcEMwiG", jsonPointer1.toString());
      assertFalse(jsonPointer1.matches());
      assertTrue(boolean0);
      assertEquals("vq#x2vh~$|T|", jsonPointer1.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("21lUvC)U\"IvwJ$oSP", 1);
      assertEquals("/lUvC)U\"IvwJ$oSP", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("7>;OhV26WGz~.:[(i", 9);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("7>;OhV26WGz~.:[(i", jsonPointer0.toString());
      assertEquals(">;OhV26~Gz~.:[(i", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("AY+'r7$P[b|7i@i)~", 9);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("Y+'r7$P~b|7i@i)~", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("Invalid input: JSON Pointer expression must start wih '/': \"", 9);
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("nvalid ~nput: JSON Pointer expression must start wih '", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("AY+'r7$P[b|7i@i)~");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("AY+'r7$P[b|7i@i)~", jsonPointer0.toString());
      assertEquals("Y+'r7$P[b|7i@i)~", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("I24=Ci)<~0g#");
      assertFalse(jsonPointer0.matches());
      assertEquals("24=Ci)<~g#", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.mayMatchElement());
      assertEquals("I24=Ci)<~0g#", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      JsonPointer jsonPointer1 = new JsonPointer();
      boolean boolean0 = jsonPointer0.equals(jsonPointer1);
      assertTrue(boolean0);
      assertEquals((-1), jsonPointer1.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("'^j>Z|Cd'QZJFHX3V@");
      boolean boolean0 = jsonPointer0.equals("U0vE");
      assertFalse(boolean0);
      assertFalse(jsonPointer0.matches());
      assertEquals("'^j>Z|Cd'QZJFHX3V@", jsonPointer0.toString());
      assertEquals("^j>Z|Cd'QZJFHX3V@", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.equals(jsonPointer0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      boolean boolean0 = jsonPointer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("21lUvC)U\"IvwJ$oSP");
      JsonPointer jsonPointer1 = jsonPointer0.matchElement(1);
      assertNull(jsonPointer1);
      assertEquals("1lUvC)U\"IvwJ$oSP", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.mayMatchElement());
      assertFalse(jsonPointer0.matches());
      assertEquals("21lUvC)U\"IvwJ$oSP", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("~");
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("~");
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("~", jsonPointer0.toString());
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = new JsonPointer("", "", jsonPointer0);
      assertTrue(jsonPointer1.mayMatchProperty());
      
      JsonPointer jsonPointer2 = jsonPointer1.matchProperty("");
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertTrue(jsonPointer2.matches());
      assertNotNull(jsonPointer2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail(")4");
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertTrue(boolean0);
      assertEquals("4", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals(")4", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      boolean boolean0 = jsonPointer0.matches();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("z9*6#`jVz*y#Tu{@eQ");
      boolean boolean0 = jsonPointer0.matches();
      assertEquals("9*6#`jVz*y#Tu{@eQ", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertFalse(boolean0);
      assertEquals("z9*6#`jVz*y#Tu{@eQ", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("/$v-Bi-yV /Z");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
      assertEquals("$v-Bi-yV ", jsonPointer0.getMatchingProperty());
      assertEquals("/$v-Bi-yV /Z", jsonPointer0.toString());
      assertTrue(jsonPointer0.mayMatchProperty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      try { 
        JsonPointer.compile("MD\"]lAFXDCh\"m[RJLp5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"MD\"]lAFXDCh\"m[RJLp5\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      int int0 = jsonPointer0.getMatchingIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchElement((-1));
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf("");
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("");
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("'^j>Z|Cd'QZJFHX3V@");
      String string0 = jsonPointer0.toString();
      assertEquals("^j>Z|Cd'QZJFHX3V@", jsonPointer0.getMatchingProperty());
      assertEquals("'^j>Z|Cd'QZJFHX3V@", string0);
      assertFalse(jsonPointer0.matches());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = jsonPointer0.tail();
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("'^j>Z|Cd'QZJFHX3V@");
      String string0 = jsonPointer0.getMatchingProperty();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
      assertEquals("^j>Z|Cd'QZJFHX3V@", string0);
      assertEquals("'^j>Z|Cd'QZJFHX3V@", jsonPointer0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("'^j>Z|Cd'QZJFHX3V@");
      jsonPointer0.hashCode();
      assertEquals("^j>Z|Cd'QZJFHX3V@", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
      assertEquals("'^j>Z|Cd'QZJFHX3V@", jsonPointer0.toString());
      assertTrue(jsonPointer0.mayMatchProperty());
  }
}
