diff --git a/release-notes/VERSION b/release-notes/VERSION
index b4e877c9..f7dec236 100644
--- a/release-notes/VERSION
+++ b/release-notes/VERSION
@@ -24,6 +24,8 @@ New minor version.
  to let databind module detect level of support for binary data.
 #105: Parser parsers numbers eagerly; does not report error with missing space
 #106: Add `JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION` for preventing dup names
+#111: _currInputRowStart isn't initialized in UTF8StreamJsonParser() constructor
+ (reported by dreamershl@github)
 - Improve `DefaultPrettyPrinter`, `Lf2SpacesIndenter` (from databind #276)
 - Add `JsonGenerator.canOmitFields()` method to support discovery of
   positional formats, needed for handling of filtering for CSV
diff --git a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java
index 3da129ba..3d5127fa 100644
--- a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java
+++ b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java
@@ -7,8 +7,9 @@ import com.fasterxml.jackson.core.io.NumberInput;
  * <a href="http://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-03">JSON Pointer</a>
  * specification.
  * Pointer instances can be used to locate logical JSON nodes for things like
- * tree traversal (see {@link TreeNode#at}) and filtering of streaming JSON content
- * (see {@link JsonParser#filter}).
+ * tree traversal (see {@link TreeNode#at}).
+ * It may be used in future for filtering of streaming JSON content
+ * as well (not implemented yet for 2.3).
  *<p>
  * Instances are fully immutable and can be shared, cached.
  * 
diff --git a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java
index cd2be8f7..fba33c26 100644
--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java
+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java
@@ -122,6 +122,9 @@ public class UTF8StreamJsonParser
         _inputBuffer = inputBuffer;
         _inputPtr = start;
         _inputEnd = end;
+        _currInputRowStart = start;
+        // If we have offset, need to omit that from byte offset, so:
+        _currInputProcessed = -start;
         _bufferRecyclable = bufferRecyclable;
     }
 
diff --git a/src/test/java/com/fasterxml/jackson/core/json/TestLocation.java b/src/test/java/com/fasterxml/jackson/core/json/TestLocation.java
index a53aa2c0..4b8c9967 100644
--- a/src/test/java/com/fasterxml/jackson/core/json/TestLocation.java
+++ b/src/test/java/com/fasterxml/jackson/core/json/TestLocation.java
@@ -50,4 +50,32 @@ public class TestLocation extends com.fasterxml.jackson.test.BaseTest
 
         p.close();
     }
+
+    // for [Issue#111]
+    public void testOffsetWithInputOffset() throws Exception
+    {
+        final JsonFactory f = new JsonFactory();
+        JsonLocation loc;
+        JsonParser p;
+        // 3 spaces before, 2 after, just for padding
+        byte[] b = "   { }  ".getBytes("UTF-8");
+
+        // and then peel them off
+        p = f.createParser(b, 3, b.length-5);
+        assertToken(JsonToken.START_OBJECT, p.nextToken());
+
+        loc = p.getTokenLocation();
+        assertEquals(0L, loc.getByteOffset());
+        assertEquals(-1L, loc.getCharOffset());
+        assertEquals(1, loc.getLineNr());
+        assertEquals(1, loc.getColumnNr());
+        
+        loc = p.getCurrentLocation();
+        assertEquals(1L, loc.getByteOffset());
+        assertEquals(-1L, loc.getCharOffset());
+        assertEquals(1, loc.getLineNr());
+        assertEquals(2, loc.getColumnNr());
+
+        p.close();
+    }
 }
