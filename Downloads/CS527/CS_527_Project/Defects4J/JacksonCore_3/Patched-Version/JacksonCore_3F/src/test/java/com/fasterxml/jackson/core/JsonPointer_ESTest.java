/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 23:48:18 GMT 2024
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonPointer_ESTest extends JsonPointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("\"VFUS~?N8*JWpgV", 0);
      assertEquals("~\"VFUS~?N8*JWpgV", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("!zC)");
      assertFalse(jsonPointer0.matches());
      assertEquals("zC)", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("!zC)", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("Z~<NwFLzeN{F{r");
      JsonPointer jsonPointer1 = new JsonPointer();
      boolean boolean0 = jsonPointer0.equals(jsonPointer1);
      assertEquals("~<NwFLzeN{F{r", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer1.equals((Object)jsonPointer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = jsonPointer0.matchElement((-1192));
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("/T");
      boolean boolean0 = jsonPointer0.mayMatchProperty();
      assertTrue(boolean0);
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("T", jsonPointer0.getMatchingProperty());
      assertEquals("/T", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer.valueOf("\"VFUS~?N8*JWpgV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"\"VFUS~?N8*JWpgV\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf("/T");
      assertEquals("T", jsonPointer0.getMatchingProperty());
      assertEquals("/T", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("_RlG,]A|*9!Ur:Xj!e");
      JsonPointer jsonPointer1 = new JsonPointer((String) null, "_RlG,]A|*9!Ur:Xj!e", jsonPointer0);
      String string0 = jsonPointer1.toString();
      assertEquals("RlG,]A|*9!Ur:Xj!e", jsonPointer0.getMatchingProperty());
      assertNull(string0);
      assertFalse(jsonPointer1.matches());
      assertEquals((-1), jsonPointer1.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("\"");
      String string0 = jsonPointer0.toString();
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("ae+;m5x3@9#U*/x");
      JsonPointer jsonPointer1 = jsonPointer0.tail();
      assertEquals("/x", jsonPointer1.toString());
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertNotSame(jsonPointer1, jsonPointer0);
      assertNotNull(jsonPointer1);
      assertEquals("x", jsonPointer1.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("1~*");
      JsonPointer jsonPointer1 = new JsonPointer("1~*", "1~*", jsonPointer0);
      JsonPointer jsonPointer2 = jsonPointer1.matchProperty("1~*");
      assertNotNull(jsonPointer2);
      assertEquals((-1), jsonPointer2.getMatchingIndex());
      assertEquals("~*", jsonPointer2.getMatchingProperty());
      assertEquals("1~*", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("/H");
      String string0 = jsonPointer0.getMatchingProperty();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("/H", jsonPointer0.toString());
      assertEquals("H", string0);
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("z0");
      int int0 = jsonPointer0.getMatchingIndex();
      assertFalse(jsonPointer0.matches());
      assertEquals("0", jsonPointer0.getMatchingProperty());
      assertEquals("z0", jsonPointer0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("72");
      assertEquals("72", jsonPointer0.toString());
      assertTrue(jsonPointer0.mayMatchElement());
      assertEquals("2", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      try { 
        JsonPointer.compile("/8H");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8H\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseTail("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseTail("I9&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseTail((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseQuotedTail("", (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseQuotedTail((String) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = null;
      try {
        jsonPointer1 = new JsonPointer("1~", "1~", jsonPointer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = null;
      try {
        jsonPointer1 = new JsonPointer("", (String) null, jsonPointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      try { 
        JsonPointer.compile("c+7Rw0?.wX?Q*o|N(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"c+7Rw0?.wX?Q*o|N(\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      JsonPointer jsonPointer1 = jsonPointer0.tail();
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("1~", 0);
      assertEquals("1~", jsonPointer0.toString());
      assertEquals("/~", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("0-", 0);
      jsonPointer0.hashCode();
      assertEquals("0-", jsonPointer0.toString());
      assertEquals("~-", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("a/stzZru", 0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("a/stzZru", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
      assertEquals("~a", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseQuotedTail("k'9n2", 105);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 1, end 104, s.length() 5
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("1~");
      assertEquals("~", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("1~", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      JsonPointer jsonPointer1 = JsonPointer.compile("");
      boolean boolean0 = jsonPointer0.equals(jsonPointer1);
      assertTrue(boolean0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.equals((Object) null);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.equals(jsonPointer0);
      assertTrue(boolean0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      boolean boolean0 = jsonPointer0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      JsonPointer jsonPointer1 = jsonPointer0.matchElement((-1));
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = new JsonPointer("1~*", "1~*", jsonPointer0);
      assertTrue(jsonPointer1.mayMatchProperty());
      
      JsonPointer jsonPointer2 = jsonPointer1.matchProperty("1~*");
      assertNotNull(jsonPointer2);
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertEquals("", jsonPointer2.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("1~*");
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("1~*");
      assertEquals("~*", jsonPointer0.getMatchingProperty());
      assertEquals("1~*", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
      assertFalse(jsonPointer0.mayMatchElement());
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("");
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("z0");
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertFalse(jsonPointer0.matches());
      assertTrue(boolean0);
      assertEquals("0", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchProperty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      boolean boolean0 = jsonPointer0.matches();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("/T");
      boolean boolean0 = jsonPointer0.matches();
      assertEquals("T", jsonPointer0.getMatchingProperty());
      assertFalse(boolean0);
      assertEquals("/T", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(jsonPointer0.mayMatchProperty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf((String) null);
      JsonPointer jsonPointer1 = jsonPointer0.matchElement(72);
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      int int0 = jsonPointer0.getMatchingIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertFalse(boolean0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      String string0 = jsonPointer0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("z0");
      JsonPointer jsonPointer1 = jsonPointer0.tail();
      assertTrue(jsonPointer0.mayMatchProperty());
      assertNotNull(jsonPointer1);
      assertEquals("0", jsonPointer0.getMatchingProperty());
      assertEquals("z0", jsonPointer0.toString());
      assertEquals("", jsonPointer1.getMatchingProperty());
      assertEquals(0, jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      String string0 = jsonPointer0.getMatchingProperty();
      assertEquals("", string0);
  }
}
