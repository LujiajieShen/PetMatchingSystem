/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 10 00:00:21 GMT 2024
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.common.base.Predicate;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.Property;
import com.google.javascript.rhino.jstype.SimpleSlot;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.VoidType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamedType_ESTest extends NamedType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "&c!7cp:1T5;SQw;", "", 0, 0);
      boolean boolean0 = namedType0.isNamedType();
      assertTrue(boolean0);
      assertEquals("&c!7cp:1T5;SQw;", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "~JISd3maV", "~JISd3maV", 211, 211);
      String string0 = namedType0.toAnnotationString();
      assertEquals("~JISd3maV", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "&c!7cp:1T5;SQw;", "", 0, 0);
      boolean boolean0 = namedType0.isNominalType();
      assertTrue(boolean0);
      assertEquals("&c!7cp:1T5;SQw;", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo", "", (-1442), (-1442));
      namedType0.hashCode();
      assertEquals("com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "~JISd3maV", "~JISd3maV", 211, 211);
      namedType0.resolveInternal(simpleErrorReporter0, namedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 0, 0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      namedType0.resolveInternal(simpleErrorReporter0, noObjectType0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(namedType0, noObjectType0);
      namedType0.defineDeclaredProperty("Named type with empty name component", parameterizedType0, (Node) null);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, ":tP\"`{d$f;lv$8D&eu", ":tP\"`{d$f;lv$8D&eu", 52, 3780);
      JSType jSType0 = namedType0.getReferencedType();
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[4] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      namedType0.defineProperty("Named type with empty name component", jSType0, true, node0);
      boolean boolean0 = namedType0.defineProperty("Unknown class name", jSType0, true, node0);
      assertEquals(":tP\"`{d$f;lv$8D&eu", namedType0.getReferenceName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      jSTypeRegistry0.declareType("Not declared as a constructor", voidType0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "o8cso*nyA[}i", 209, 1779);
      JSType jSType0 = namedType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertFalse(jSType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Object", "Object", 211, 211);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, namedType0, namedType0);
      namedType0.resolveInternal(simpleErrorReporter0, parameterizedType0);
      assertTrue(namedType0.isNativeObjectType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "B,Q+yzWof[oo Iwh[", 2759, (-902));
      JSType[] jSTypeArray0 = new JSType[6];
      Node node0 = new Node(3006);
      Property property0 = new Property("J>{AXTqb=BGDo", jSTypeArray0[0], false, node0);
      namedType0.getTypedefType(simpleErrorReporter0, property0, "OBJECT_NUMBER_STRING");
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 0, 0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      SimpleSlot simpleSlot0 = new SimpleSlot("YAC3H", noObjectType0, false);
      JSType jSType0 = namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, "Not declared as a type name");
      assertNotNull(jSType0);
      assertEquals("", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", (-1), (-1));
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = namedType0.setValidator(predicate0);
      assertTrue(boolean0);
      assertEquals("", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 0, 0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      namedType0.resolveInternal(simpleErrorReporter0, noObjectType0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      namedType0.setValidator(predicate0);
      assertTrue(namedType0.isResolved());
  }
}
