diff --git a/release-notes/VERSION b/release-notes/VERSION
index 5b2d576..4165bdb 100644
--- a/release-notes/VERSION
+++ b/release-notes/VERSION
@@ -9,6 +9,7 @@ Project: jackson-dataformat-xml
 #156: Add `XmlMapper.setDefaultUseWrapper()` for convenience.
 #167: Exception on deserializing empty element with an xsi attribute
 #169: Fail to deserialize "empty" polymorphic classes
+#180: Problem with deserialization of nested non-wrapped lists, with empty inner list
 
 2.6.5 (not yet released)
 
diff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java
index 4e0023b..58618b4 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java
@@ -321,7 +321,7 @@ public class FromXmlParser
     @Override
     public String getCurrentName() throws IOException
     {
-        // [JACKSON-395]: start markers require information from parent
+        // start markers require information from parent
         String name;
         if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {
             XmlReadContext parent = _parsingContext.getParent();
@@ -420,7 +420,7 @@ public class FromXmlParser
     }
 
     // DEBUGGING
-    /*
+/*
     @Override
     public JsonToken nextToken() throws IOException
     {
@@ -438,8 +438,8 @@ public class FromXmlParser
             }
         }
         return t;
-    } 
-    */
+    }
+*/
 
     @Override
     public JsonToken nextToken() throws IOException
@@ -509,6 +509,13 @@ public class FromXmlParser
             // Simple, except that if this is a leaf, need to suppress end:
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
+                if (_parsingContext.inArray()) {
+                    // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to
+                    //    expose as empty Object, not null
+                    _nextToken = JsonToken.END_OBJECT;
+                    _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
+                    return (_currToken = JsonToken.START_OBJECT);
+                }
                 return (_currToken = JsonToken.VALUE_NULL);
             }
             _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;
@@ -534,19 +541,20 @@ public class FromXmlParser
             _currText = _xmlTokens.getText();
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
-                // Also: must skip following END_ELEMENT
-                _xmlTokens.skipEndElement();
                 /* One more refinement (pronunced like "hack") is that if
                  * we had an empty String (or all white space), and we are
-                 * deserializing an array, we better just hide the text
-                 * altogether.
+                 * deserializing an array, we better hide the empty text.
                  */
+                // Also: must skip following END_ELEMENT
+                _xmlTokens.skipEndElement();
                 if (_parsingContext.inArray()) {
                     if (_isEmpty(_currText)) {
-                        _currToken = JsonToken.END_ARRAY;
-                        _parsingContext = _parsingContext.getParent();
-                        _namesToWrap = _parsingContext.getNamesToWrap();
-                        return _currToken;
+                        // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to
+                        //    expose as empty Object, not null (or, worse, as used to
+                        //    be done, by swallowing the token)
+                        _nextToken = JsonToken.END_OBJECT;
+                        _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
+                        return (_currToken = JsonToken.START_OBJECT);
                     }
                 }
                 return (_currToken = JsonToken.VALUE_STRING);
diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/RoundtripContentTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/RoundtripContentTest.java
index 6ab3a4b..e3fa0b9 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/RoundtripContentTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/RoundtripContentTest.java
@@ -5,10 +5,10 @@ import com.fasterxml.jackson.databind.ObjectWriter;
 
 public class RoundtripContentTest extends XmlTestBase
 {
+    private final XmlMapper MAPPER = new XmlMapper();
+
     public void testRoundtrip() throws Exception
     {
-        final XmlMapper MAPPER = new XmlMapper();
-        
         MediaItem.Content content = new MediaItem.Content();
         content.setTitle("content");
         content.addPerson("William");
@@ -20,22 +20,19 @@ public class RoundtripContentTest extends XmlTestBase
 
         ObjectWriter w = MAPPER.writerFor(MediaItem.class);
 
-        /*
-        StringWriter sw = new StringWriter();
-        try {
-        w.writeValue(sw, input);
-        } finally {
-            System.err.println("So far -> ["+sw+"]");
-        }
-        */
-        
-        String xml = w.writeValueAsString(input);
+        // two variants; first without indentation
+        _verifyRoundtrip(w.writeValueAsString(input), input);
 
-//System.err.println("DEBUG: Xml == "+xml);
+        // and then with indentation
+        _verifyRoundtrip(w.withDefaultPrettyPrinter()
+                .writeValueAsString(input), input);
+    }
 
+    private void _verifyRoundtrip(String xml, MediaItem exp) throws Exception
+    {
         ObjectReader r = MAPPER.readerFor(MediaItem.class);
         MediaItem result = r.readValue(xml);
         assertNotNull(result);
-        assertEquals(content.getTitle(), result.getContent().getTitle());
+        assertEquals(exp.getContent().getTitle(), result.getContent().getTitle());
     }
 }
diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/JAXBObjectId170Test.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/JAXBObjectId170Test.java
similarity index 98%
rename from src/test/java/com/fasterxml/jackson/dataformat/xml/failing/JAXBObjectId170Test.java
rename to src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/JAXBObjectId170Test.java
index af78cce..42e766f 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/JAXBObjectId170Test.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/JAXBObjectId170Test.java
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.dataformat.xml.failing;
+package com.fasterxml.jackson.dataformat.xml.jaxb;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/ListRoundtripTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/ListRoundtripTest.java
index 6b125b0..4137626 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/ListRoundtripTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/ListRoundtripTest.java
@@ -65,7 +65,7 @@ public class ListRoundtripTest extends XmlTestBase
         public List<Point> points;
     }
 
-    // For [Issue#64]
+    // For [dataformat-xml#64]
     static class Optional {
         @JacksonXmlText
         public String number = "NOT SET";
diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/NestedUnwrappedLists180Test.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/NestedUnwrappedLists180Test.java
similarity index 89%
rename from src/test/java/com/fasterxml/jackson/dataformat/xml/failing/NestedUnwrappedLists180Test.java
rename to src/test/java/com/fasterxml/jackson/dataformat/xml/lists/NestedUnwrappedLists180Test.java
index 6eb0f84..8990a20 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/NestedUnwrappedLists180Test.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/NestedUnwrappedLists180Test.java
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.dataformat.xml.failing;
+package com.fasterxml.jackson.dataformat.xml.lists;
 
 import java.util.*;
 
@@ -52,7 +52,7 @@ public class NestedUnwrappedLists180Test  extends XmlTestBase
 "<Records>\n"
 // Important: it's the empty CDATA here that causes breakage -- empty element alone would be fine
 //+"<records>\n</records>\n"
-+"<records> </records>\n"
++"<records></records>\n"
 +"  <records>\n"
 +"   <fields name='b'/>\n"
 +"  </records>\n"
@@ -64,7 +64,11 @@ public class NestedUnwrappedLists180Test  extends XmlTestBase
         Records result = MAPPER.readValue(xml, Records.class);
         assertNotNull(result.records);
         assertEquals(2, result.records.size());
+        assertNotNull(result.records.get(1));
         assertEquals(1, result.records.get(1).fields.size());
         assertEquals("b", result.records.get(1).fields.get(0).name);
+
+        // also, first one ought not be null should it? Ideally not...
+        assertNotNull(result.records.get(0));
     }
 }
diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/NestedUnwrappedListsTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/NestedUnwrappedListsTest.java
index 5ccdf8a..c697bbf 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/NestedUnwrappedListsTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/NestedUnwrappedListsTest.java
@@ -96,7 +96,8 @@ public class NestedUnwrappedListsTest  extends XmlTestBase
         ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);
         assertNotNull(svc);
         assertNotNull(svc.vehicleMonitoringDelivery);
-        assertEquals(0, svc.vehicleMonitoringDelivery.size());
+        // 06-Jan-2015, tatu: Really should have one empty entry, not 0
+        assertEquals(1, svc.vehicleMonitoringDelivery.size());
     }
 
     public void testNestedWithEmpty2() throws Exception
@@ -117,7 +118,8 @@ public class NestedUnwrappedListsTest  extends XmlTestBase
         assertEquals(1, svc.vehicleMonitoringDelivery.size());
         VehicleMonitoringDelivery del = svc.vehicleMonitoringDelivery.get(0);
         assertNotNull(del.vehicleActivity);
-        assertEquals(0, del.vehicleActivity.size());
+        // 06-Jan-2015, tatu: Really should have one empty entry, not 0
+        assertEquals(1, del.vehicleActivity.size());
     }
     
     public void testNested1_2b() throws Exception
@@ -152,7 +154,7 @@ public class NestedUnwrappedListsTest  extends XmlTestBase
         assertNotNull(act);
         assertEquals("2013-09-12T09:29:07.536-04:00", act.recordedAtTime);
     }
-    
+
     public void testNested2_1() throws Exception
     {
         final String XML =
diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/EmptyPolymorphicTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/EmptyPolymorphicTest.java
index e410e75..86df342 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/EmptyPolymorphicTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/EmptyPolymorphicTest.java
@@ -38,7 +38,7 @@ public class EmptyPolymorphicTest extends XmlTestBase
     public void testEmpty() throws Exception
     {
         String xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(new Data("Foobar"));
-        System.out.println("XML:\n"+xml);
+//System.out.println("XML:\n"+xml);
         final Data data = MAPPER.readValue(xml, Data.class);
 //                "<data><name>Foobar</name><proxy><empty></empty></proxy></data>"
         assertNotNull(data);
diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java
index 2d29295..cd0f310 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java
@@ -46,6 +46,8 @@ public class XmlParserTest extends XmlTestBase
 
     public void testSimpleWithEmpty() throws Exception
     {
+        // 06-Jan-2015, tatu: Not superbly simple, actually; whether we'll have `null`
+        //    or `{}` depends on context; if in array context, latter; otherwise former
         assertEquals("{\"leaf\":null}",
                 _readXmlWriteJson("<root><leaf /></root>"));
     }
