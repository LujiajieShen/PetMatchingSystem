/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 09 23:53:48 GMT 2024
 */

package com.fasterxml.jackson.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.TextBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TextBuffer_ESTest extends TextBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
      char[] charArray0 = bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0, 4047);
      textBuffer0.append(charArray0, 2000, 2000);
      textBuffer0.append(charArray0, 2000, 1459);
      textBuffer0.toString();
      assertEquals(1459, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.toString();
      String string0 = textBuffer0.contentsAsString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append('`');
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
      char[] charArray0 = bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0, 4060);
      textBuffer0.append(charArray0, 2000, 2000);
      textBuffer0.resetWithString("qhOT!");
      assertFalse(textBuffer0.hasTextAsCharacters());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      int int0 = textBuffer0.getCurrentSegmentSize();
      assertEquals(0, int0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      textBuffer0.releaseBuffers();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      assertNotNull(textBuffer0);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      textBuffer0.releaseBuffers();
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      textBuffer0.append('p');
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(1, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      
      char[] charArray0 = textBuffer0.finishCurrentSegment();
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(300, charArray0.length);
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(200, textBuffer0.size());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      textBuffer0.releaseBuffers();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
      char[] charArray0 = bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0, 4060);
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4060, charArray0.length);
      
      textBuffer0.resetWithShared(charArray0, 0, 2);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4060, charArray0.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(2, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      
      char[] charArray1 = textBuffer0.contentsAsArray();
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(2, charArray1.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(2, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      textBuffer0.append('E');
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      
      char[] charArray0 = textBuffer0.finishCurrentSegment();
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(300, charArray0.length);
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(200, textBuffer0.size());
      
      textBuffer0.resetWithShared(charArray0, 3862, 508);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(300, charArray0.length);
      assertEquals(3862, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(508, textBuffer0.size());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
      char[] charArray0 = bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0, 4035);
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4035, charArray0.length);
      
      textBuffer0.resetWithCopy(charArray0, 2000, 1);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4035, charArray0.length);
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(1, textBuffer0.size());
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      textBuffer0.append('E');
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(1, textBuffer0.size());
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray0 = textBuffer0.finishCurrentSegment();
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(300, charArray0.length);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(200, textBuffer0.size());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray1 = textBuffer0.expandCurrentSegment();
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(450, charArray1.length);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(200, textBuffer0.size());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      // Undeclared exception!
      try { 
        textBuffer0.resetWithCopy(charArray1, 2000, (-182));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(200, charArray0.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      // Undeclared exception!
      try { 
        textBuffer0.resetWithCopy((char[]) null, 0, 1433);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      textBuffer0.resetWithString("");
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertFalse(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      
      char[] charArray0 = textBuffer0.getCurrentSegment();
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(200, charArray0.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertFalse(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      int int0 = textBuffer0.size();
      assertEquals(0, int0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      
      textBuffer0.resetWithEmpty();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      
      char[] charArray0 = textBuffer0.contentsAsArray();
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, charArray0.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      
      int int0 = textBuffer0.size();
      assertEquals(0, int0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(200, charArray0.length);
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      String string0 = textBuffer0.contentsAsString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertFalse(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      int int0 = textBuffer0.size();
      assertEquals(0, int0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertFalse(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      textBuffer0.append('E');
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(1, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      int int0 = textBuffer0.getTextOffset();
      assertEquals(0, int0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(1, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
      
      int int0 = textBuffer0.getTextOffset();
      assertEquals(0, int0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      boolean boolean0 = textBuffer0.hasTextAsCharacters();
      assertTrue(boolean0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      
      textBuffer0.append('p');
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(1, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      
      boolean boolean0 = textBuffer0.hasTextAsCharacters();
      assertTrue(boolean0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(1, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      textBuffer0.append('p');
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(1, textBuffer0.size());
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      
      char[] charArray0 = textBuffer0.contentsAsArray();
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, charArray0.length);
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(1, textBuffer0.size());
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      
      boolean boolean0 = textBuffer0.hasTextAsCharacters();
      assertTrue(boolean0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(1, textBuffer0.size());
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      textBuffer0.resetWithString("[BKlyZ_8k~OA8fIRcz:");
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertFalse(textBuffer0.hasTextAsCharacters());
      assertEquals(19, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      
      boolean boolean0 = textBuffer0.hasTextAsCharacters();
      assertFalse(boolean0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertFalse(textBuffer0.hasTextAsCharacters());
      assertEquals(19, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      textBuffer0.append('p');
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(1, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      
      char[] charArray0 = textBuffer0.getTextBuffer();
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(200, charArray0.length);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(1, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray0 = textBuffer0.getTextBuffer();
      assertNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      textBuffer0.ensureNotShared();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      char[] charArray0 = textBuffer0.contentsAsArray();
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, charArray0.length);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      char[] charArray1 = textBuffer0.getTextBuffer();
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, charArray1.length);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(200, charArray0.length);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      String string0 = textBuffer0.contentsAsString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertFalse(textBuffer0.hasTextAsCharacters());
      
      char[] charArray1 = textBuffer0.getTextBuffer();
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, charArray1.length);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      textBuffer0.append('p');
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      
      char[] charArray0 = textBuffer0.finishCurrentSegment();
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(300, charArray0.length);
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(200, textBuffer0.size());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      char[] charArray1 = textBuffer0.getTextBuffer();
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(200, charArray1.length);
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(200, textBuffer0.size());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      try { 
        textBuffer0.contentsAsDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      
      textBuffer0.resetWithShared((char[]) null, 2000, 422);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(422, textBuffer0.size());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(2000, textBuffer0.getTextOffset());
      
      // Undeclared exception!
      try { 
        textBuffer0.contentsAsString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      
      char[] charArray0 = textBuffer0.contentsAsArray();
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, charArray0.length);
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      
      char[] charArray1 = textBuffer0.contentsAsArray();
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, charArray1.length);
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      // Undeclared exception!
      try { 
        textBuffer0.contentsAsDecimal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      
      char[] charArray0 = textBuffer0.contentsAsArray();
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, charArray0.length);
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      
      try { 
        textBuffer0.contentsAsDecimal();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      textBuffer0.ensureNotShared();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      try { 
        textBuffer0.contentsAsDecimal();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      assertNotNull(textBuffer0);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
      assertNotNull(charArray0);
      assertEquals(1000, charArray0.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray1 = textBuffer0.finishCurrentSegment();
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(1500, charArray1.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(1000, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      try { 
        textBuffer0.contentsAsDecimal();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      
      textBuffer0.append('s');
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(1, textBuffer0.size());
      
      textBuffer0.ensureNotShared();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(1, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
      
      textBuffer0.append('s');
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(1, textBuffer0.size());
      
      textBuffer0.setCurrentLength(4047);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4047, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(4047, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      textBuffer0.append('s');
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      assertEquals(201, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      
      textBuffer0.ensureNotShared();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      
      textBuffer0.setCurrentLength(5192);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(5192, textBuffer0.size());
      assertEquals(5192, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      
      // Undeclared exception!
      try { 
        textBuffer0.append("Zj", 2000, 2000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
      
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
      char[] charArray0 = bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0, 4047);
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4047, charArray0.length);
      
      textBuffer0.append(charArray0, 2000, 2000);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4047, charArray0.length);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(2000, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(2000, textBuffer0.size());
      
      TextBuffer textBuffer1 = new TextBuffer((BufferRecycler) null);
      assertFalse(textBuffer1.equals((Object)textBuffer0));
      assertNotNull(textBuffer1);
      assertTrue(textBuffer1.hasTextAsCharacters());
      assertEquals(0, textBuffer1.size());
      assertEquals(0, textBuffer1.getTextOffset());
      assertEquals(0, textBuffer1.getCurrentSegmentSize());
      
      textBuffer1.append(charArray0, 13, 13);
      assertNotSame(textBuffer1, textBuffer0);
      assertFalse(textBuffer1.equals((Object)textBuffer0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4047, charArray0.length);
      assertTrue(textBuffer1.hasTextAsCharacters());
      assertEquals(0, textBuffer1.getTextOffset());
      assertEquals(13, textBuffer1.size());
      assertEquals(13, textBuffer1.getCurrentSegmentSize());
      
      String string0 = textBuffer0.toString();
      assertNotSame(textBuffer0, textBuffer1);
      assertFalse(textBuffer0.equals((Object)textBuffer1));
      assertNotNull(string0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(2000, textBuffer0.getCurrentSegmentSize());
      assertFalse(textBuffer0.hasTextAsCharacters());
      assertEquals(2000, textBuffer0.size());
      
      textBuffer1.append(string0, 13, 1717);
      assertNotSame(textBuffer0, textBuffer1);
      assertNotSame(textBuffer1, textBuffer0);
      assertFalse(textBuffer0.equals((Object)textBuffer1));
      assertFalse(textBuffer1.equals((Object)textBuffer0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(2000, textBuffer0.getCurrentSegmentSize());
      assertFalse(textBuffer0.hasTextAsCharacters());
      assertEquals(2000, textBuffer0.size());
      assertEquals(1730, textBuffer1.size());
      assertEquals(730, textBuffer1.getCurrentSegmentSize());
      assertTrue(textBuffer1.hasTextAsCharacters());
      assertEquals(0, textBuffer1.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      textBuffer0.append('s');
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(1, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray0 = textBuffer0.getCurrentSegment();
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(200, charArray0.length);
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(1, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      
      char[] charArray0 = textBuffer0.getCurrentSegment();
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(200, charArray0.length);
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
      char[] charArray0 = bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0, 4047);
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4047, charArray0.length);
      
      textBuffer0.append(charArray0, 2000, 1459);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4047, charArray0.length);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(1459, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(1459, textBuffer0.size());
      
      char[] charArray1 = textBuffer0.getCurrentSegment();
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(2188, charArray1.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(1459, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      textBuffer0.append('n');
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(1, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      
      char[] charArray0 = textBuffer0.finishCurrentSegment();
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(300, charArray0.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(200, textBuffer0.size());
      
      char[] charArray1 = textBuffer0.emptyAndGetCurrentSegment();
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(300, charArray1.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
      
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
      char[] charArray0 = bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0, 4047);
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4047, charArray0.length);
      
      textBuffer0.append(charArray0, 2000, 2000);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4047, charArray0.length);
      assertEquals(2000, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(2000, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      textBuffer0.append(charArray0, 2000, 1459);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4047, charArray0.length);
      assertEquals(1459, textBuffer0.getCurrentSegmentSize());
      assertEquals(3459, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray1 = textBuffer0.expandCurrentSegment();
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(5188, charArray1.length);
      assertEquals(1459, textBuffer0.getCurrentSegmentSize());
      assertEquals(3459, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray2 = textBuffer0.finishCurrentSegment();
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7782, charArray2.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(7188, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray3 = textBuffer0.expandCurrentSegment();
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertNotNull(charArray3);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(11673, charArray3.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(7188, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray4 = textBuffer0.expandCurrentSegment();
      assertNotSame(charArray4, charArray0);
      assertNotSame(charArray4, charArray1);
      assertNotSame(charArray4, charArray2);
      assertNotSame(charArray4, charArray3);
      assertFalse(charArray4.equals((Object)charArray0));
      assertFalse(charArray4.equals((Object)charArray1));
      assertFalse(charArray4.equals((Object)charArray2));
      assertFalse(charArray4.equals((Object)charArray3));
      assertNotNull(charArray4);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(17509, charArray4.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(7188, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray5 = textBuffer0.expandCurrentSegment();
      assertNotSame(charArray5, charArray4);
      assertNotSame(charArray5, charArray1);
      assertNotSame(charArray5, charArray2);
      assertNotSame(charArray5, charArray3);
      assertNotSame(charArray5, charArray0);
      assertFalse(charArray5.equals((Object)charArray4));
      assertFalse(charArray5.equals((Object)charArray1));
      assertFalse(charArray5.equals((Object)charArray2));
      assertFalse(charArray5.equals((Object)charArray3));
      assertFalse(charArray5.equals((Object)charArray0));
      assertNotNull(charArray5);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(26263, charArray5.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(7188, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray6 = textBuffer0.expandCurrentSegment();
      assertNotSame(charArray6, charArray5);
      assertNotSame(charArray6, charArray1);
      assertNotSame(charArray6, charArray2);
      assertNotSame(charArray6, charArray3);
      assertNotSame(charArray6, charArray4);
      assertNotSame(charArray6, charArray0);
      assertFalse(charArray6.equals((Object)charArray5));
      assertFalse(charArray6.equals((Object)charArray1));
      assertFalse(charArray6.equals((Object)charArray2));
      assertFalse(charArray6.equals((Object)charArray3));
      assertFalse(charArray6.equals((Object)charArray4));
      assertFalse(charArray6.equals((Object)charArray0));
      assertNotNull(charArray6);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(39394, charArray6.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(7188, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray7 = textBuffer0.expandCurrentSegment();
      assertNotSame(charArray7, charArray3);
      assertNotSame(charArray7, charArray4);
      assertNotSame(charArray7, charArray1);
      assertNotSame(charArray7, charArray5);
      assertNotSame(charArray7, charArray6);
      assertNotSame(charArray7, charArray0);
      assertNotSame(charArray7, charArray2);
      assertFalse(charArray7.equals((Object)charArray3));
      assertFalse(charArray7.equals((Object)charArray4));
      assertFalse(charArray7.equals((Object)charArray1));
      assertFalse(charArray7.equals((Object)charArray5));
      assertFalse(charArray7.equals((Object)charArray6));
      assertFalse(charArray7.equals((Object)charArray0));
      assertFalse(charArray7.equals((Object)charArray2));
      assertNotNull(charArray7);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(59091, charArray7.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(7188, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray8 = textBuffer0.expandCurrentSegment();
      assertNotSame(charArray8, charArray3);
      assertNotSame(charArray8, charArray4);
      assertNotSame(charArray8, charArray0);
      assertNotSame(charArray8, charArray1);
      assertNotSame(charArray8, charArray2);
      assertNotSame(charArray8, charArray6);
      assertNotSame(charArray8, charArray7);
      assertNotSame(charArray8, charArray5);
      assertFalse(charArray8.equals((Object)charArray3));
      assertFalse(charArray8.equals((Object)charArray4));
      assertFalse(charArray8.equals((Object)charArray0));
      assertFalse(charArray8.equals((Object)charArray1));
      assertFalse(charArray8.equals((Object)charArray2));
      assertFalse(charArray8.equals((Object)charArray6));
      assertFalse(charArray8.equals((Object)charArray7));
      assertFalse(charArray8.equals((Object)charArray5));
      assertNotNull(charArray8);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(88636, charArray8.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(7188, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray9 = textBuffer0.expandCurrentSegment();
      assertNotSame(charArray9, charArray5);
      assertNotSame(charArray9, charArray0);
      assertNotSame(charArray9, charArray4);
      assertNotSame(charArray9, charArray8);
      assertNotSame(charArray9, charArray7);
      assertNotSame(charArray9, charArray2);
      assertNotSame(charArray9, charArray3);
      assertNotSame(charArray9, charArray1);
      assertNotSame(charArray9, charArray6);
      assertFalse(charArray9.equals((Object)charArray5));
      assertFalse(charArray9.equals((Object)charArray0));
      assertFalse(charArray9.equals((Object)charArray4));
      assertFalse(charArray9.equals((Object)charArray8));
      assertFalse(charArray9.equals((Object)charArray7));
      assertFalse(charArray9.equals((Object)charArray2));
      assertFalse(charArray9.equals((Object)charArray3));
      assertFalse(charArray9.equals((Object)charArray1));
      assertFalse(charArray9.equals((Object)charArray6));
      assertNotNull(charArray9);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(132954, charArray9.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(7188, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray10 = textBuffer0.expandCurrentSegment();
      assertNotSame(charArray10, charArray5);
      assertNotSame(charArray10, charArray8);
      assertNotSame(charArray10, charArray0);
      assertNotSame(charArray10, charArray3);
      assertNotSame(charArray10, charArray9);
      assertNotSame(charArray10, charArray7);
      assertNotSame(charArray10, charArray4);
      assertNotSame(charArray10, charArray2);
      assertNotSame(charArray10, charArray1);
      assertNotSame(charArray10, charArray6);
      assertFalse(charArray10.equals((Object)charArray5));
      assertFalse(charArray10.equals((Object)charArray8));
      assertFalse(charArray10.equals((Object)charArray0));
      assertFalse(charArray10.equals((Object)charArray3));
      assertFalse(charArray10.equals((Object)charArray9));
      assertFalse(charArray10.equals((Object)charArray7));
      assertFalse(charArray10.equals((Object)charArray4));
      assertFalse(charArray10.equals((Object)charArray2));
      assertFalse(charArray10.equals((Object)charArray1));
      assertFalse(charArray10.equals((Object)charArray6));
      assertNotNull(charArray10);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(199431, charArray10.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(7188, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray11 = textBuffer0.expandCurrentSegment();
      assertNotSame(charArray11, charArray5);
      assertNotSame(charArray11, charArray10);
      assertNotSame(charArray11, charArray9);
      assertNotSame(charArray11, charArray6);
      assertNotSame(charArray11, charArray8);
      assertNotSame(charArray11, charArray0);
      assertNotSame(charArray11, charArray2);
      assertNotSame(charArray11, charArray7);
      assertNotSame(charArray11, charArray3);
      assertNotSame(charArray11, charArray4);
      assertNotSame(charArray11, charArray1);
      assertFalse(charArray11.equals((Object)charArray5));
      assertFalse(charArray11.equals((Object)charArray10));
      assertFalse(charArray11.equals((Object)charArray9));
      assertFalse(charArray11.equals((Object)charArray6));
      assertFalse(charArray11.equals((Object)charArray8));
      assertFalse(charArray11.equals((Object)charArray0));
      assertFalse(charArray11.equals((Object)charArray2));
      assertFalse(charArray11.equals((Object)charArray7));
      assertFalse(charArray11.equals((Object)charArray3));
      assertFalse(charArray11.equals((Object)charArray4));
      assertFalse(charArray11.equals((Object)charArray1));
      assertNotNull(charArray11);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(262144, charArray11.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(7188, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray12 = textBuffer0.expandCurrentSegment();
      assertNotSame(charArray12, charArray5);
      assertNotSame(charArray12, charArray10);
      assertNotSame(charArray12, charArray9);
      assertNotSame(charArray12, charArray1);
      assertNotSame(charArray12, charArray6);
      assertNotSame(charArray12, charArray7);
      assertNotSame(charArray12, charArray3);
      assertNotSame(charArray12, charArray11);
      assertNotSame(charArray12, charArray2);
      assertNotSame(charArray12, charArray0);
      assertNotSame(charArray12, charArray4);
      assertNotSame(charArray12, charArray8);
      assertFalse(charArray12.equals((Object)charArray5));
      assertFalse(charArray12.equals((Object)charArray10));
      assertFalse(charArray12.equals((Object)charArray9));
      assertFalse(charArray12.equals((Object)charArray1));
      assertFalse(charArray12.equals((Object)charArray6));
      assertFalse(charArray12.equals((Object)charArray7));
      assertFalse(charArray12.equals((Object)charArray3));
      assertFalse(charArray12.equals((Object)charArray11));
      assertFalse(charArray12.equals((Object)charArray2));
      assertFalse(charArray12.equals((Object)charArray0));
      assertFalse(charArray12.equals((Object)charArray4));
      assertFalse(charArray12.equals((Object)charArray8));
      assertNotNull(charArray12);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(262145, charArray12.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(7188, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      
      textBuffer0.append('`');
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      assertEquals(1, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
      char[] charArray0 = bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0, 4060);
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4060, charArray0.length);
      
      textBuffer0.resetWithShared(charArray0, 0, 2);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4060, charArray0.length);
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(2, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      
      // Undeclared exception!
      try { 
        textBuffer0.append("", 4060, 247);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      
      char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(200, charArray0.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      
      textBuffer0.resetWithShared((char[]) null, 2000, 422);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(2000, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(422, textBuffer0.size());
      
      // Undeclared exception!
      try { 
        textBuffer0.append((char[]) null, 422, (-1190));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.size());
      
      textBuffer0.append('s');
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(1, textBuffer0.size());
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
      char[] charArray0 = bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0, 4047);
      assertNotNull(charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4047, charArray0.length);
      
      textBuffer0.append(charArray0, 2000, 2000);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4047, charArray0.length);
      assertEquals(2001, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(1801, textBuffer0.getCurrentSegmentSize());
      
      textBuffer0.append(charArray0, 2000, 1459);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4047, charArray0.length);
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(3460, textBuffer0.size());
      assertEquals(1259, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
      
      String string0 = textBuffer0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
      
      char[] charArray0 = textBuffer0.contentsAsArray();
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, charArray0.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      assertNotNull(textBuffer0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.size());
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      
      char[] charArray0 = new char[0];
      textBuffer0.resetWithShared(charArray0, 2000, 2000);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, charArray0.length);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(2000, textBuffer0.getTextOffset());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(2000, textBuffer0.size());
      
      // Undeclared exception!
      try { 
        textBuffer0.contentsAsArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }
}
