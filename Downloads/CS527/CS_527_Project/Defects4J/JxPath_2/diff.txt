diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java b/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java
index 8a69c33..355c8e3 100644
--- a/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java
+++ b/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java
@@ -16,6 +16,7 @@
  */
 package org.apache.commons.jxpath.ri.compiler;
 
+import org.apache.commons.jxpath.NodeSet;
 import org.apache.commons.jxpath.Pointer;
 import org.apache.commons.jxpath.ri.EvalContext;
 import org.apache.commons.jxpath.ri.model.NodePointer;
@@ -74,6 +75,9 @@ public abstract class Expression {
         if (result instanceof EvalContext) {
             return new ValueIterator((EvalContext) result);
         }
+        if (result instanceof NodeSet) {
+            return new ValueIterator(((NodeSet) result).getPointers().iterator());
+        }
         return ValueUtils.iterate(result);
     }
 
@@ -85,6 +89,11 @@ public abstract class Expression {
         if (result instanceof EvalContext) {
             return (EvalContext) result;
         }
+        if (result instanceof NodeSet) {
+            return new PointerIterator(((NodeSet) result).getPointers().iterator(),
+                    new QName(null, "value"),
+                    context.getRootContext().getCurrentNodePointer().getLocale());
+        }
         return new PointerIterator(ValueUtils.iterate(result),
                 new QName(null, "value"),
                 context.getRootContext().getCurrentNodePointer().getLocale());
@@ -95,6 +104,7 @@ public abstract class Expression {
         private QName qname;
         private Locale locale;
 
+        //to what method does the following comment refer?
         /**
          * @deprecated Use the method that takes a NamespaceManager
          */
@@ -110,7 +120,7 @@ public abstract class Expression {
 
         public Object next() {
             Object o = iterator.next();
-            return NodePointer.newNodePointer(qname, o, locale);
+            return o instanceof Pointer ? o : NodePointer.newNodePointer(qname, o, locale);
         }
 
         public void remove() {
diff --git a/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java b/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java
index 12d5873..4181487 100644
--- a/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java
+++ b/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java
@@ -46,6 +46,7 @@ import org.apache.commons.jxpath.ri.model.NodePointer;
 public class ExtensionFunctionTest extends JXPathTestCase {
     private Functions functions;
     private JXPathContext context;
+    private TestBean testBean;
 
     public static void main(String[] args) {
         TestRunner.run(ExtensionFunctionTest.class);
@@ -62,7 +63,8 @@ public class ExtensionFunctionTest extends JXPathTestCase {
 
     public void setUp() {
         if (context == null) {
-            context = JXPathContext.newContext(new TestBean());
+            testBean = new TestBean();
+            context = JXPathContext.newContext(testBean);
             Variables vars = context.getVariables();
             vars.declareVariable("test", new TestFunctions(4, "test"));
 
@@ -337,6 +339,11 @@ public class ExtensionFunctionTest extends JXPathTestCase {
             "test:nodeSet()/name",
             list("Name 1", "Name 2"));
 
+        assertXPathValueIterator(
+            context,
+            "test:nodeSet()",
+            list(testBean.getBeans()[0], testBean.getBeans()[1]));
+
         assertXPathPointerIterator(
             context,
             "test:nodeSet()/name",
@@ -379,4 +386,4 @@ public class ExtensionFunctionTest extends JXPathTestCase {
             return 0;
         }
     }
-}
\ No newline at end of file
+}
