diff --git a/release-notes/CREDITS b/release-notes/CREDITS
index 3569d4614..2ff30713d 100644
--- a/release-notes/CREDITS
+++ b/release-notes/CREDITS
@@ -317,3 +317,8 @@ Daniel Walker (dsw2127@github)
   * Reported, contributed fix for #913: `ObjectMapper.copy()` does not preserve
    `MappingJsonFactory` features
    (2.6.2)
+
+Sadayuki Furuhashi (frsyuki@github)
+  * Reported #941: Deserialization from "{}" to ObjectNode field causes
+    "out of END_OBJECT token" error
+   (2.6.3)
diff --git a/release-notes/VERSION b/release-notes/VERSION
index a1ec43540..067002d88 100644
--- a/release-notes/VERSION
+++ b/release-notes/VERSION
@@ -8,6 +8,8 @@ Project: jackson-databind
 
 #938: Regression: `StackOverflowError` with recursive types that contain `Map.Entry`
  (reported by jloisel@github)
+#941: Deserialization from "{}" to ObjectNode field causes "out of END_OBJECT token" error
+ (reported by Sadayuki F)
 
 2.6.2 (14-Sep-2015)
 
diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
index 23d989e83..1886b3dd3 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
@@ -124,6 +124,8 @@ public class BeanDeserializer
             if (_vanillaProcessing) {
                 return vanillaDeserialize(p, ctxt, p.nextToken());
             }
+            // 23-Sep-2015, tatu: This is wrong at some many levels, but for now... it is
+            //    what it is, including "expected behavior".
             p.nextToken();
             if (_objectIdReader != null) {
                 return deserializeWithObjectId(p, ctxt);
diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
index 506271528..d5eb01709 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
@@ -92,14 +92,15 @@ public class JsonNodeDeserializer
         public static ObjectDeserializer getInstance() { return _instance; }
         
         @Override
-        public ObjectNode deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
+        public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
-            if (jp.getCurrentToken() == JsonToken.START_OBJECT) {
-                jp.nextToken();
-                return deserializeObject(jp, ctxt, ctxt.getNodeFactory());
+            if (p.isExpectedStartObjectToken() || p.hasToken(JsonToken.FIELD_NAME)) {
+                return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
-            if (jp.getCurrentToken() == JsonToken.FIELD_NAME) {
-                return deserializeObject(jp, ctxt, ctxt.getNodeFactory());
+            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
+            //    if caller has advanced to the first token of Object, but for empty Object
+            if (p.hasToken(JsonToken.END_OBJECT)) {
+                return ctxt.getNodeFactory().objectNode();
             }
             throw ctxt.mappingException(ObjectNode.class);
          }
@@ -117,11 +118,10 @@ public class JsonNodeDeserializer
         public static ArrayDeserializer getInstance() { return _instance; }
         
         @Override
-        public ArrayNode deserialize(JsonParser jp, DeserializationContext ctxt)
-            throws IOException, JsonProcessingException
+        public ArrayNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
-            if (jp.isExpectedStartArrayToken()) {
-                return deserializeArray(jp, ctxt, ctxt.getNodeFactory());
+            if (p.isExpectedStartArrayToken()) {
+                return deserializeArray(p, ctxt, ctxt.getNodeFactory());
             }
             throw ctxt.mappingException(ArrayNode.class);
         }
diff --git a/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java b/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java
index 6ea4b9589..6229f2c11 100644
--- a/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java
+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java
@@ -47,7 +47,19 @@ public class TestObjectNode
             node = n;
         }
     }
-    
+
+    // [databind#941]
+    static class MyValue
+    {
+        private final ObjectNode object;
+
+        @JsonCreator
+        public MyValue(ObjectNode object) { this.object = object; }
+
+        @JsonValue
+        public ObjectNode getObject() { return object; }
+    }
+
     /*
     /**********************************************************
     /* Test methods
@@ -385,4 +397,18 @@ public class TestObjectNode
         w = new ObNodeWrapper(MAPPER.createObjectNode());
         assertEquals("{}", MAPPER.writeValueAsString(w));
     }
+
+    public void testIssue941() throws Exception
+    {
+        ObjectNode object = MAPPER.createObjectNode();
+
+        String json = MAPPER.writeValueAsString(object);
+        System.out.println("json: "+json);
+
+        ObjectNode de1 = MAPPER.readValue(json, ObjectNode.class);  // this works
+        System.out.println("Deserialized to ObjectNode: "+de1);
+
+        MyValue de2 = MAPPER.readValue(json, MyValue.class);  // but this throws exception
+        System.out.println("Deserialized to MyValue: "+de2);
+    }
 }
