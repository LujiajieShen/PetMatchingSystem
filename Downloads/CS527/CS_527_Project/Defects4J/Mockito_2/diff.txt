diff --git a/src/org/mockito/exceptions/Reporter.java b/src/org/mockito/exceptions/Reporter.java
index e0b1105da..6e0b3bd15 100644
--- a/src/org/mockito/exceptions/Reporter.java
+++ b/src/org/mockito/exceptions/Reporter.java
@@ -816,6 +816,15 @@ public class Reporter {
         throw new MockitoException("Mocks instantiated with constructor cannot be combined with " + mode + " serialization mode.");
     }
 
+    public void cannotCreateTimerWithNegativeDurationTime(long durationMillis) {
+        throw new FriendlyReminderException(join("",
+                "Don't panic! I'm just a friendly reminder!",
+                "It is impossible for time to go backward, therefore...",
+                "You cannot put negative value of duration: (" +  durationMillis +  ")",
+                "as argument of timer methods (after(), timeout())",
+                ""));
+    }
+
     private MockName safelyGetMockName(Object mock) {
         return new MockUtil().getMockName(mock);
     }
diff --git a/src/org/mockito/internal/util/Timer.java b/src/org/mockito/internal/util/Timer.java
index b71e4fdd8..907e5459b 100644
--- a/src/org/mockito/internal/util/Timer.java
+++ b/src/org/mockito/internal/util/Timer.java
@@ -1,11 +1,14 @@
 package org.mockito.internal.util;
 
+import org.mockito.exceptions.Reporter;
+
 public class Timer {
 
     private final long durationMillis;
     private long startTime = -1;
 
     public Timer(long durationMillis) {
+        validateInput(durationMillis);
         this.durationMillis = durationMillis;
     }
 
@@ -23,4 +26,10 @@ public class Timer {
     public void start() {
         startTime = System.currentTimeMillis();
     }
+
+    private void validateInput(long durationMillis) {
+        if (durationMillis < 0) {
+            new Reporter().cannotCreateTimerWithNegativeDurationTime(durationMillis);
+        }
+    }
 }
diff --git a/test/org/mockito/internal/util/TimerTest.java b/test/org/mockito/internal/util/TimerTest.java
index 5e5f0f784..e1156688c 100644
--- a/test/org/mockito/internal/util/TimerTest.java
+++ b/test/org/mockito/internal/util/TimerTest.java
@@ -1,6 +1,8 @@
 package org.mockito.internal.util;
 
+import org.junit.Assert;
 import org.junit.Test;
+import org.mockito.exceptions.misusing.FriendlyReminderException;
 import org.mockitoutil.TestBase;
 
 import static org.hamcrest.CoreMatchers.is;
@@ -15,22 +17,35 @@ public class TimerTest extends TestBase {
 
         //when
         timer.start();
-        boolean stillCounting = timer.isCounting();
 
         //then
-        assertThat(stillCounting, is(true));
+        assertThat(timer.isCounting(), is(true));
     }
 
     @Test
-    public void should_return_false_if_task_is_outside_the_acceptable_time_bounds() {
+    public void should_return_false_when_time_run_out() throws Exception {
         //given
-        Timer timer = new Timer(-1);
+        Timer timer = new Timer(0);
         timer.start();
 
         //when
-        boolean stillCounting = timer.isCounting();
+        oneMillisecondPasses();
 
         //then
         assertThat(timer.isCounting(), is(false));
     }
+
+    @Test
+    public void should_throw_friendly_reminder_exception_when_duration_is_negative() {
+        try {
+            new Timer(-1);
+            Assert.fail("It is forbidden to create timer with negative value of timer's duration.");
+        } catch (FriendlyReminderException e) {
+            Assert.assertTrue(true);
+        }
+    }
+
+    private void oneMillisecondPasses() throws InterruptedException {
+        Thread.sleep(1);
+    }
 }
diff --git a/test/org/mockito/verification/NegativeDurationTest.java b/test/org/mockito/verification/NegativeDurationTest.java
new file mode 100644
index 000000000..fbb248034
--- /dev/null
+++ b/test/org/mockito/verification/NegativeDurationTest.java
@@ -0,0 +1,29 @@
+package org.mockito.verification;
+
+import org.junit.Assert;
+import org.junit.Test;
+import org.mockito.Mockito;
+import org.mockito.exceptions.misusing.FriendlyReminderException;
+
+public class NegativeDurationTest {
+
+    @Test
+    public void should_throw_exception_when_duration_is_negative_for_timeout_method() {
+        try {
+            Mockito.timeout(-1);
+            Assert.fail("It is forbidden to invoke Mockito.timeout() with negative value.");
+        } catch (FriendlyReminderException e) {
+            Assert.assertTrue(true);
+        }
+    }
+
+    @Test
+    public void should_throw_exception_when_duration_is_negative_for_after_method() {
+        try {
+            Mockito.after(-1);
+            Assert.fail("It is forbidden to invoke Mockito.after() with negative value.");
+        } catch (FriendlyReminderException e) {
+            Assert.assertTrue(true);
+        }
+    }
+}
