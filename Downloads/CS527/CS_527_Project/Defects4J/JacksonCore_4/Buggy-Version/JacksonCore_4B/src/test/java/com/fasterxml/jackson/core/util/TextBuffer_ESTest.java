/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 09 01:26:23 GMT 2024
 */

package com.fasterxml.jackson.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.TextBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextBuffer_ESTest extends TextBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler(1103, 1103);
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
      textBuffer0.resetWithShared(charArray0, 0, (-1895));
      // Undeclared exception!
      try { 
        textBuffer0.append('F');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1895
         //
         verifyException("com.fasterxml.jackson.core.util.TextBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = textBuffer0.getCurrentSegment();
      char[] charArray1 = textBuffer0.expandCurrentSegment(200);
      assertEquals(200, charArray1.length);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      // Undeclared exception!
      try { 
        textBuffer0.append("", 4657, 4657);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append("2.2250738585072012e-308", 0, 3);
      // Undeclared exception!
      try { 
        textBuffer0.append("2.2", 4641, 200);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      char[] charArray0 = textBuffer0.getCurrentSegment();
      textBuffer0.setCurrentLength(786);
      // Undeclared exception!
      try { 
        textBuffer0.append(charArray0, 0, 1958);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = new char[2];
      textBuffer0.resetWithShared(charArray0, 2, 1);
      // Undeclared exception!
      try { 
        textBuffer0.append(charArray0, 45, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = textBuffer0.getCurrentSegment();
      textBuffer0.resetWithShared(charArray0, 748, 998);
      // Undeclared exception!
      try { 
        textBuffer0.ensureNotShared();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithShared((char[]) null, 3, 262144);
      // Undeclared exception!
      try { 
        textBuffer0.contentsAsDecimal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = new char[20];
      textBuffer0.resetWithShared(charArray0, 176, 3);
      textBuffer0.getTextBuffer();
      assertEquals(176, textBuffer0.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = new char[2];
      textBuffer0.resetWithShared(charArray0, 3, (-1516));
      boolean boolean0 = textBuffer0.hasTextAsCharacters();
      assertEquals(3, textBuffer0.getTextOffset());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = new char[7];
      textBuffer0.resetWithShared(charArray0, 449, 1418);
      int int0 = textBuffer0.size();
      assertEquals(449, textBuffer0.getTextOffset());
      assertEquals(1418, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      char[] charArray0 = new char[1];
      textBuffer0.resetWithShared(charArray0, 946, 946);
      int int0 = textBuffer0.getTextOffset();
      assertEquals(946, textBuffer0.size());
      assertEquals(946, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append("2.2250738585072012e-308", 0, 3);
      int int0 = textBuffer0.getCurrentSegmentSize();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append('0');
      double double0 = textBuffer0.contentsAsDouble();
      assertEquals(1, textBuffer0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = new char[4];
      charArray0[2] = '2';
      textBuffer0.resetWithCopy(charArray0, 2, 1);
      textBuffer0.contentsAsDouble();
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append("2.2250738585072012e-308", 0, 3);
      textBuffer0.contentsAsDecimal();
      assertEquals(3, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler(2800, 2800);
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = new char[1];
      textBuffer0.resetWithShared(charArray0, 176, 2365);
      // Undeclared exception!
      try { 
        textBuffer0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithEmpty();
      textBuffer0.setCurrentLength(1);
      // Undeclared exception!
      try { 
        textBuffer0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      textBuffer0.emptyAndGetCurrentSegment();
      textBuffer0.finishCurrentSegment();
      textBuffer0.setCurrentLength((-2343));
      // Undeclared exception!
      try { 
        textBuffer0.toString();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      // Undeclared exception!
      try { 
        textBuffer0.resetWithCopy((char[]) null, (-1972), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler(176, 707);
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.getCurrentSegment();
      textBuffer0.finishCurrentSegment();
      textBuffer0.setCurrentLength((-143));
      // Undeclared exception!
      try { 
        textBuffer0.getTextBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithShared((char[]) null, 1000, 4191);
      // Undeclared exception!
      try { 
        textBuffer0.getCurrentSegment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler(0, 0);
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      // Undeclared exception!
      try { 
        textBuffer0.getCurrentSegment();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.util.BufferRecycler", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      // Undeclared exception!
      try { 
        textBuffer0.finishCurrentSegment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.TextBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      // Undeclared exception!
      try { 
        textBuffer0.expandCurrentSegment(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.TextBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      // Undeclared exception!
      try { 
        textBuffer0.expandCurrentSegment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.TextBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler(1000, 0);
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      // Undeclared exception!
      try { 
        textBuffer0.emptyAndGetCurrentSegment();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.util.BufferRecycler", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.getCurrentSegment();
      textBuffer0.setCurrentLength(3097);
      // Undeclared exception!
      try { 
        textBuffer0.contentsAsString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = new char[6];
      textBuffer0.append(charArray0, 3, 2);
      textBuffer0.setCurrentLength(1559);
      // Undeclared exception!
      try { 
        textBuffer0.contentsAsDouble();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      char[] charArray0 = new char[2];
      textBuffer0.resetWithShared(charArray0, 0, 944);
      // Undeclared exception!
      try { 
        textBuffer0.contentsAsDecimal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler(1073, 554);
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithEmpty();
      textBuffer0.setCurrentLength(554);
      // Undeclared exception!
      try { 
        textBuffer0.contentsAsDecimal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler(1797, 554);
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithEmpty();
      textBuffer0.setCurrentLength(554);
      // Undeclared exception!
      try { 
        textBuffer0.contentsAsArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      // Undeclared exception!
      try { 
        textBuffer0.append((char[]) null, 1, 1000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithEmpty();
      // Undeclared exception!
      try { 
        textBuffer0.append('e');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.TextBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = new char[7];
      textBuffer0.resetWithShared(charArray0, 449, 1418);
      // Undeclared exception!
      try { 
        textBuffer0.append('7');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append("7*8bqcngt,@BT", 0, 0);
      textBuffer0.contentsAsString();
      assertFalse(textBuffer0.hasTextAsCharacters());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithString("{-y");
      textBuffer0.contentsAsString();
      assertFalse(textBuffer0.hasTextAsCharacters());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = textBuffer0.getCurrentSegment();
      assertEquals(200, charArray0.length);
      
      int int0 = textBuffer0.size();
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = new char[6];
      textBuffer0.append(charArray0, 1, 3);
      textBuffer0.contentsAsArray();
      assertEquals(3, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler(2800, 2800);
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = new char[1];
      textBuffer0.resetWithShared(charArray0, 0, 'W');
      textBuffer0.contentsAsArray();
      assertEquals(87, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler(2800, 2800);
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = new char[1];
      textBuffer0.resetWithShared(charArray0, 176, 1);
      // Undeclared exception!
      try { 
        textBuffer0.contentsAsArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      char[] charArray0 = textBuffer0.getCurrentSegment();
      textBuffer0.finishCurrentSegment();
      textBuffer0.setCurrentLength(262135);
      textBuffer0.append(charArray0, 0, 2);
      assertEquals(2502, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler(2800, 2800);
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = new char[1];
      textBuffer0.append('W');
      textBuffer0.resetWithShared(charArray0, 0, 'W');
      // Undeclared exception!
      try { 
        textBuffer0.ensureNotShared();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      char[] charArray0 = new char[2];
      textBuffer0.getCurrentSegment();
      textBuffer0.resetWithShared(charArray0, 4654, 4654);
      // Undeclared exception!
      try { 
        textBuffer0.append("", 4654, 4654);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.ensureNotShared();
      char[] charArray0 = textBuffer0.expandCurrentSegment(2);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(200, charArray0.length);
      assertEquals(0, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append('C');
      textBuffer0.expandCurrentSegment(2775);
      assertEquals(1, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.ensureNotShared();
      char[] charArray0 = textBuffer0.expandCurrentSegment();
      assertEquals(0, textBuffer0.size());
      assertEquals(300, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.ensureNotShared();
      textBuffer0.finishCurrentSegment();
      textBuffer0.finishCurrentSegment();
      assertEquals(1200, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.ensureNotShared();
      char[] charArray0 = textBuffer0.getCurrentSegment();
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertEquals(200, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithEmpty();
      assertEquals(0, textBuffer0.getTextOffset());
      
      char[] charArray0 = textBuffer0.getCurrentSegment();
      assertEquals(200, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append("2.2250738585072012e-308", 2, 0);
      // Undeclared exception!
      try { 
        textBuffer0.append((String) null, 0, 262145);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.TextBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithEmpty();
      textBuffer0.ensureNotShared();
      assertTrue(textBuffer0.hasTextAsCharacters());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler(1073, 554);
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.getCurrentSegment();
      textBuffer0.setCurrentLength(554);
      textBuffer0.getCurrentSegment();
      try { 
        textBuffer0.contentsAsDecimal();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Value \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\" can not be represented as BigDecimal
         //
         verifyException("com.fasterxml.jackson.core.io.NumberInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.emptyAndGetCurrentSegment();
      textBuffer0.toString();
      textBuffer0.getTextBuffer();
      try { 
        textBuffer0.contentsAsDecimal();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Value \"\" can not be represented as BigDecimal
         //
         verifyException("com.fasterxml.jackson.core.io.NumberInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      try { 
        textBuffer0.contentsAsDecimal();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Value \"\" can not be represented as BigDecimal
         //
         verifyException("com.fasterxml.jackson.core.io.NumberInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append('C');
      textBuffer0.finishCurrentSegment();
      textBuffer0.contentsAsString();
      assertFalse(textBuffer0.hasTextAsCharacters());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.contentsAsArray();
      String string0 = textBuffer0.contentsAsString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.contentsAsString();
      String string0 = textBuffer0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append('C');
      textBuffer0.finishCurrentSegment();
      textBuffer0.getTextBuffer();
      textBuffer0.contentsAsArray();
      assertEquals(200, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.ensureNotShared();
      textBuffer0.contentsAsArray();
      char[] charArray0 = textBuffer0.getTextBuffer();
      assertNotNull(charArray0);
      assertEquals(0, textBuffer0.size());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler(2800, 2800);
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = textBuffer0.getTextBuffer();
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithEmpty();
      char[] charArray0 = textBuffer0.getTextBuffer();
      assertEquals(0, textBuffer0.getTextOffset());
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append('C');
      textBuffer0.contentsAsString();
      boolean boolean0 = textBuffer0.hasTextAsCharacters();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithEmpty();
      assertEquals(0, textBuffer0.size());
      
      char[] charArray0 = textBuffer0.contentsAsArray();
      assertNotNull(charArray0);
      
      boolean boolean0 = textBuffer0.hasTextAsCharacters();
      assertEquals(0, textBuffer0.getTextOffset());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithEmpty();
      boolean boolean0 = textBuffer0.hasTextAsCharacters();
      assertTrue(boolean0);
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      boolean boolean0 = textBuffer0.hasTextAsCharacters();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      int int0 = textBuffer0.getTextOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      textBuffer0.releaseBuffers();
      int int0 = textBuffer0.getTextOffset();
      assertEquals(0, int0);
      assertEquals(0, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = new char[5];
      textBuffer0.resetWithCopy(charArray0, 2, 1);
      textBuffer0.toString();
      int int0 = textBuffer0.size();
      assertEquals(1, textBuffer0.getCurrentSegmentSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler(4, 4);
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = textBuffer0.contentsAsArray();
      assertNotNull(charArray0);
      
      char[] charArray1 = textBuffer0.getCurrentSegment();
      assertEquals(200, charArray1.length);
      
      textBuffer0.size();
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      int int0 = textBuffer0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      textBuffer0.ensureNotShared();
      textBuffer0.finishCurrentSegment();
      textBuffer0.resetWithString("");
      assertFalse(textBuffer0.hasTextAsCharacters());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        textBuffer0.resetWithCopy(charArray0, '\'', 4000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler(1073, 554);
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = textBuffer0.getCurrentSegment();
      textBuffer0.finishCurrentSegment();
      // Undeclared exception!
      try { 
        textBuffer0.resetWithCopy(charArray0, (-1), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      char[] charArray0 = textBuffer0.getCurrentSegment();
      textBuffer0.resetWithCopy(charArray0, 200, 786);
      assertEquals(786, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append('C');
      char[] charArray0 = textBuffer0.finishCurrentSegment();
      textBuffer0.resetWithShared(charArray0, 0, 1);
      textBuffer0.contentsAsString();
      assertEquals(1, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append('C');
      textBuffer0.finishCurrentSegment();
      assertEquals(200, textBuffer0.size());
      
      textBuffer0.resetWithEmpty();
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = new char[6];
      textBuffer0.append(charArray0, 1, 3);
      assertEquals(3, textBuffer0.getCurrentSegmentSize());
      
      textBuffer0.releaseBuffers();
      assertEquals(0, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.releaseBuffers();
      assertEquals(0, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      int int0 = textBuffer0.getCurrentSegmentSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append('C');
      textBuffer0.finishCurrentSegment();
      assertEquals(200, textBuffer0.size());
      
      textBuffer0.emptyAndGetCurrentSegment();
      assertEquals(0, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      try { 
        textBuffer0.contentsAsDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.toString();
      char[] charArray0 = textBuffer0.contentsAsArray();
      assertArrayEquals(new char[] {}, charArray0);
  }
}
