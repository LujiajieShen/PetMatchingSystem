/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 04 21:21:32 GMT 2024
 */

package java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java_programs.POSSIBLE_CHANGE;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class POSSIBLE_CHANGE_ESTest extends POSSIBLE_CHANGE_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
      int[] intArray0 = null;
      int int0 = 1090;
      // Undeclared exception!
      try { 
        POSSIBLE_CHANGE.possible_change((int[]) null, 1090);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java_programs.POSSIBLE_CHANGE", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = null;
      int int0 = (-302);
      int int1 = POSSIBLE_CHANGE.possible_change((int[]) null, (-302));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = POSSIBLE_CHANGE.possible_change((int[]) null, 0);
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = POSSIBLE_CHANGE.possible_change((int[]) null, (-636));
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      POSSIBLE_CHANGE pOSSIBLE_CHANGE0 = new POSSIBLE_CHANGE();
      assertNotNull(pOSSIBLE_CHANGE0);
      
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      // Undeclared exception!
      try { 
        POSSIBLE_CHANGE.possible_change(intArray1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java_programs.POSSIBLE_CHANGE", e);
      }
  }
}
