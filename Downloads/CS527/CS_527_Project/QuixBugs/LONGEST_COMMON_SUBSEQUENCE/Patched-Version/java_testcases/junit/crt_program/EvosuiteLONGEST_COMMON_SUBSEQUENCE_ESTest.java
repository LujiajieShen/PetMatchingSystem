/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 04 21:29:08 GMT 2024
 */

package correct_java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import correct_java_programs.LONGEST_COMMON_SUBSEQUENCE;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LONGEST_COMMON_SUBSEQUENCE_ESTest extends LONGEST_COMMON_SUBSEQUENCE_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      String string1 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      
      LONGEST_COMMON_SUBSEQUENCE lONGEST_COMMON_SUBSEQUENCE0 = new LONGEST_COMMON_SUBSEQUENCE();
      assertNotNull(lONGEST_COMMON_SUBSEQUENCE0);
      
      String string2 = "|^o`";
      String string3 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("|^o`", "");
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("correct_java_programs.LONGEST_COMMON_SUBSEQUENCE", "k![z^5utZr=_a");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "MH%+;f)Sd";
      String string1 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("MH%+;f)Sd", "MH%+;f)Sd");
      assertTrue(string1.equals((Object)string0));
      assertEquals("MH%+;f)Sd", string1);
      assertNotNull(string1);
      
      LONGEST_COMMON_SUBSEQUENCE lONGEST_COMMON_SUBSEQUENCE0 = new LONGEST_COMMON_SUBSEQUENCE();
      assertNotNull(lONGEST_COMMON_SUBSEQUENCE0);
      
      // Undeclared exception!
      try { 
        LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("(6?$Ob<R,&[l,(kpaQ", "correct_java_programs.LONGEST_COMMON_SUBSEQUENCE");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("-[i7LP/%AM=NK7L", "-[i7LP/%AM=NK7L");
      assertEquals("-[i7LP/%AM=NK7L", string0);
      assertNotNull(string0);
      
      String string1 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("-[i7LP/%AM=NK7L", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = "x37A^8Wll'n";
      String string4 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("", "x37A^8Wll'n");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      LONGEST_COMMON_SUBSEQUENCE lONGEST_COMMON_SUBSEQUENCE0 = new LONGEST_COMMON_SUBSEQUENCE();
      assertNotNull(lONGEST_COMMON_SUBSEQUENCE0);
      
      String string5 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("5", "correct_java_programs.LONGEST_COMMON_SUBSEQUENCE");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("-[i7LP/%AM=NK7L", "x37A^8Wll'n");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LONGEST_COMMON_SUBSEQUENCE lONGEST_COMMON_SUBSEQUENCE0 = new LONGEST_COMMON_SUBSEQUENCE();
      assertNotNull(lONGEST_COMMON_SUBSEQUENCE0);
      
      String string0 = "S=oe]Y8G~/qlT4~Dg";
      String string1 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("S=oe]Y8G~/qlT4~Dg", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      String string1 = "a\"b*?yAYy";
      String string2 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("", "a\"b*?yAYy");
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      LONGEST_COMMON_SUBSEQUENCE lONGEST_COMMON_SUBSEQUENCE0 = new LONGEST_COMMON_SUBSEQUENCE();
      assertNotNull(lONGEST_COMMON_SUBSEQUENCE0);
      
      String string3 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("(:N", "");
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = "kJkM 24W";
      // Undeclared exception!
      LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("kJkM 24W", "a\"b*?yAYy");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LONGEST_COMMON_SUBSEQUENCE lONGEST_COMMON_SUBSEQUENCE0 = new LONGEST_COMMON_SUBSEQUENCE();
      assertNotNull(lONGEST_COMMON_SUBSEQUENCE0);
      
      String string0 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("+}+%/;OJ!#", "+}+%/;OJ!#");
      assertEquals("+}+%/;OJ!#", string0);
      assertNotNull(string0);
      
      String string1 = "MI)Y?N-[|LI^k";
      String string2 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("MI)Y?N-[|LI^k", "MI)Y?N-[|LI^k");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("MI)Y?N-[|LI^k", string2);
      assertNotNull(string2);
      
      LONGEST_COMMON_SUBSEQUENCE lONGEST_COMMON_SUBSEQUENCE0 = new LONGEST_COMMON_SUBSEQUENCE();
      assertNotNull(lONGEST_COMMON_SUBSEQUENCE0);
      
      String string3 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("", "qGx,'9<[PXFLkXRl:f");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("HXab4m-|a#RMsy7e3i", "d)?xv6^\"a");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LONGEST_COMMON_SUBSEQUENCE lONGEST_COMMON_SUBSEQUENCE0 = new LONGEST_COMMON_SUBSEQUENCE();
      assertNotNull(lONGEST_COMMON_SUBSEQUENCE0);
      
      String string0 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("?fAn! %HUxC_w", "?fAn! %HUxC_w");
      assertEquals("?fAn! %HUxC_w", string0);
      assertNotNull(string0);
      
      String string1 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("correct_java_programs.LONGEST_COMMON_SUBSEQUENCE", "correct_java_programs.LONGEST_COMMON_SUBSEQUENCE");
      assertFalse(string1.equals((Object)string0));
      assertEquals("correct_java_programs.LONGEST_COMMON_SUBSEQUENCE", string1);
      assertNotNull(string1);
      
      String string2 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("PVwJu)fQc-{72.hWKt", "PVwJu)fQc-{72.hWKt");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("PVwJu)fQc-{72.hWKt", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "A";
      String string1 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("A", "M}RY&2PB8+E");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("M}RY&2PB8+E", "A");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("", "");
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("", "QU3=<{iw+hrH");
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      LONGEST_COMMON_SUBSEQUENCE lONGEST_COMMON_SUBSEQUENCE0 = new LONGEST_COMMON_SUBSEQUENCE();
      assertNotNull(lONGEST_COMMON_SUBSEQUENCE0);
      
      String string5 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("", "");
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("", "correct_java_programs.LONGEST_COMMON_SUBSEQUENCE");
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("", "");
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("", "");
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = "";
      String string10 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("", "");
      assertFalse(string10.equals((Object)string0));
      assertEquals("", string10);
      assertNotNull(string10);
      
      String string11 = LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("", "");
      assertFalse(string11.equals((Object)string0));
      assertEquals("", string11);
      assertNotNull(string11);
      
      // Undeclared exception!
      try { 
        LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("A", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LONGEST_COMMON_SUBSEQUENCE lONGEST_COMMON_SUBSEQUENCE0 = new LONGEST_COMMON_SUBSEQUENCE();
      // Undeclared exception!
      LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence("C@cmb2m Bxd9u ", "FgC*o]MCJZiyB(");
  }
}
