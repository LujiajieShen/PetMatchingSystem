/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 04 21:13:56 GMT 2024
 */

package correct_java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import correct_java_programs.BREADTH_FIRST_SEARCH;
import correct_java_programs.Node;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BREADTH_FIRST_SEARCH_ESTest extends BREADTH_FIRST_SEARCH_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Node node0 = new Node("d\"2n5#bG");
      ArrayList<Node> arrayList0 = node0.getSuccessors();
      Node node1 = new Node("d\"2n5#bG", node0);
      arrayList0.add(node1);
      Node node2 = new Node("d\"2n5#bG", arrayList0, arrayList0);
      // Undeclared exception!
      try { 
        BREADTH_FIRST_SEARCH.breadth_first_search(node0, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("correct_java_programs.BREADTH_FIRST_SEARCH", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Node node0 = new Node();
      ArrayList<Node> arrayList0 = node0.getSuccessors();
      Node node1 = new Node("", arrayList0);
      arrayList0.add(node0);
      boolean boolean0 = BREADTH_FIRST_SEARCH.breadth_first_search(node0, node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Node node0 = new Node();
      ArrayList<Node> arrayList0 = node0.getSuccessors();
      Node node1 = new Node("", arrayList0);
      arrayList0.add(node0);
      boolean boolean0 = BREADTH_FIRST_SEARCH.breadth_first_search(node1, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BREADTH_FIRST_SEARCH bREADTH_FIRST_SEARCH0 = new BREADTH_FIRST_SEARCH();
  }
}
