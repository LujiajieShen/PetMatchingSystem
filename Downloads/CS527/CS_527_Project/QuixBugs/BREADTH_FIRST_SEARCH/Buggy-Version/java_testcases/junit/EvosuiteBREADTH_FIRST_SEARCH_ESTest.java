/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 04 21:16:04 GMT 2024
 */

package java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import java_programs.BREADTH_FIRST_SEARCH;
import java_programs.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BREADTH_FIRST_SEARCH_ESTest extends BREADTH_FIRST_SEARCH_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Node node0 = new Node();
      ArrayList<Node> arrayList0 = node0.getSuccessors();
      arrayList0.add(node0);
      Node node1 = new Node("I]Td>QPp[/G<_&1|LE4", arrayList0, arrayList0);
      Node node2 = new Node("I]Td>QPp[/G<_&1|LE4", arrayList0);
      // Undeclared exception!
      try { 
        BREADTH_FIRST_SEARCH.breadth_first_search(node2, node1);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        BREADTH_FIRST_SEARCH.breadth_first_search((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Node node0 = new Node("(O[8p<");
      ArrayList<Node> arrayList0 = node0.getPredecessors();
      arrayList0.add(node0);
      Node node1 = new Node("(O[8p<", arrayList0);
      boolean boolean0 = BREADTH_FIRST_SEARCH.breadth_first_search(node1, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BREADTH_FIRST_SEARCH bREADTH_FIRST_SEARCH0 = new BREADTH_FIRST_SEARCH();
  }
}
