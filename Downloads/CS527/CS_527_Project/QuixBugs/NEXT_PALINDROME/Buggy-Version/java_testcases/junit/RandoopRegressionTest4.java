import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RandoopRegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2001");
        int[] intArray4 = new int[] { (byte) 0, ' ', (byte) 100, (byte) 1 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass17 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 44, 112, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 33, 101, 1]" + "'", str5, "[0, 33, 101, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 34, 102, 1]" + "'", str6, "[0, 34, 102, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 103, 1]" + "'", str7, "[0, 35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 36, 104, 1]" + "'", str8, "[0, 36, 104, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 37, 105, 1]" + "'", str9, "[0, 37, 105, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 38, 106, 1]" + "'", str10, "[0, 38, 106, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 39, 107, 1]" + "'", str11, "[0, 39, 107, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 40, 108, 1]" + "'", str12, "[0, 40, 108, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 41, 109, 1]" + "'", str13, "[0, 41, 109, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 42, 110, 1]" + "'", str14, "[0, 42, 110, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 43, 111, 1]" + "'", str15, "[0, 43, 111, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 44, 112, 1]" + "'", str16, "[0, 44, 112, 1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2002");
        int[] intArray6 = new int[] { '#', (byte) 0, 10, (-1), '#', (byte) 1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass44 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 3, 6, 6, 38, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 0, 11, 0, 35, 1]" + "'", str7, "[35, 0, 11, 0, 35, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 0, 12, 1, 35, 1]" + "'", str8, "[35, 0, 12, 1, 35, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 0, 13, 2, 35, 1]" + "'", str9, "[35, 0, 13, 2, 35, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 0, 14, 3, 35, 1]" + "'", str10, "[35, 0, 14, 3, 35, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 0, 15, 4, 35, 1]" + "'", str11, "[35, 0, 15, 4, 35, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 0, 16, 5, 35, 1]" + "'", str12, "[35, 0, 16, 5, 35, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 0, 17, 6, 35, 1]" + "'", str13, "[35, 0, 17, 6, 35, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 0, 18, 7, 35, 1]" + "'", str14, "[35, 0, 18, 7, 35, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 0, 19, 8, 35, 1]" + "'", str15, "[35, 0, 19, 8, 35, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 0, 20, 9, 35, 1]" + "'", str16, "[35, 0, 20, 9, 35, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 1, 0, 0, 36, 1]" + "'", str17, "[35, 1, 0, 0, 36, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 1, 1, 1, 36, 1]" + "'", str18, "[35, 1, 1, 1, 36, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 1, 2, 2, 36, 1]" + "'", str19, "[35, 1, 2, 2, 36, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 1, 3, 3, 36, 1]" + "'", str20, "[35, 1, 3, 3, 36, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 1, 4, 4, 36, 1]" + "'", str21, "[35, 1, 4, 4, 36, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 1, 5, 5, 36, 1]" + "'", str22, "[35, 1, 5, 5, 36, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 1, 6, 6, 36, 1]" + "'", str23, "[35, 1, 6, 6, 36, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 1, 7, 7, 36, 1]" + "'", str24, "[35, 1, 7, 7, 36, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 1, 8, 8, 36, 1]" + "'", str25, "[35, 1, 8, 8, 36, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 1, 9, 9, 36, 1]" + "'", str26, "[35, 1, 9, 9, 36, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 2, 0, 0, 37, 1]" + "'", str27, "[35, 2, 0, 0, 37, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 2, 1, 1, 37, 1]" + "'", str28, "[35, 2, 1, 1, 37, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 2, 2, 2, 37, 1]" + "'", str29, "[35, 2, 2, 2, 37, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 2, 3, 3, 37, 1]" + "'", str30, "[35, 2, 3, 3, 37, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 2, 4, 4, 37, 1]" + "'", str31, "[35, 2, 4, 4, 37, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 2, 5, 5, 37, 1]" + "'", str32, "[35, 2, 5, 5, 37, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 2, 6, 6, 37, 1]" + "'", str33, "[35, 2, 6, 6, 37, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 2, 7, 7, 37, 1]" + "'", str34, "[35, 2, 7, 7, 37, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 2, 8, 8, 37, 1]" + "'", str35, "[35, 2, 8, 8, 37, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 2, 9, 9, 37, 1]" + "'", str36, "[35, 2, 9, 9, 37, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 3, 0, 0, 38, 1]" + "'", str37, "[35, 3, 0, 0, 38, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 3, 1, 1, 38, 1]" + "'", str38, "[35, 3, 1, 1, 38, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 3, 2, 2, 38, 1]" + "'", str39, "[35, 3, 2, 2, 38, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 3, 3, 3, 38, 1]" + "'", str40, "[35, 3, 3, 3, 38, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 3, 4, 4, 38, 1]" + "'", str41, "[35, 3, 4, 4, 38, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[35, 3, 5, 5, 38, 1]" + "'", str42, "[35, 3, 5, 5, 38, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[35, 3, 6, 6, 38, 1]" + "'", str43, "[35, 3, 6, 6, 38, 1]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2003");
        int[] intArray1 = new int[] { (byte) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.Class<?> wildcardClass38 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[6]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5]" + "'", str36, "[5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6]" + "'", str37, "[6]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2004");
        int[] intArray5 = new int[] { (byte) 100, 10, '4', 1, (byte) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 68, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 53, 1, 100]" + "'", str6, "[100, 10, 53, 1, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 54, 1, 100]" + "'", str7, "[100, 10, 54, 1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 55, 1, 100]" + "'", str8, "[100, 10, 55, 1, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 56, 1, 100]" + "'", str9, "[100, 10, 56, 1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 10, 57, 1, 100]" + "'", str10, "[100, 10, 57, 1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 10, 58, 1, 100]" + "'", str11, "[100, 10, 58, 1, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 10, 59, 1, 100]" + "'", str12, "[100, 10, 59, 1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 10, 60, 1, 100]" + "'", str13, "[100, 10, 60, 1, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 61, 1, 100]" + "'", str14, "[100, 10, 61, 1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 10, 62, 1, 100]" + "'", str15, "[100, 10, 62, 1, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 10, 63, 1, 100]" + "'", str16, "[100, 10, 63, 1, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 10, 64, 1, 100]" + "'", str17, "[100, 10, 64, 1, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 10, 65, 1, 100]" + "'", str18, "[100, 10, 65, 1, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 10, 66, 1, 100]" + "'", str19, "[100, 10, 66, 1, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 10, 67, 1, 100]" + "'", str20, "[100, 10, 67, 1, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 10, 68, 1, 100]" + "'", str21, "[100, 10, 68, 1, 100]");
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2005");
        int[] intArray6 = new int[] { (short) -1, (byte) -1, '4', '4', (short) -1, (byte) 0 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str57 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str58 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str59 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str60 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str61 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str62 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str63 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1, 109, 109, -1, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, -1, 53, 53, -1, 0]" + "'", str7, "[-1, -1, 53, 53, -1, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, -1, 54, 54, -1, 0]" + "'", str8, "[-1, -1, 54, 54, -1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, -1, 55, 55, -1, 0]" + "'", str9, "[-1, -1, 55, 55, -1, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, -1, 56, 56, -1, 0]" + "'", str10, "[-1, -1, 56, 56, -1, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, -1, 57, 57, -1, 0]" + "'", str11, "[-1, -1, 57, 57, -1, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, -1, 58, 58, -1, 0]" + "'", str12, "[-1, -1, 58, 58, -1, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, -1, 59, 59, -1, 0]" + "'", str13, "[-1, -1, 59, 59, -1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, -1, 60, 60, -1, 0]" + "'", str14, "[-1, -1, 60, 60, -1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, -1, 61, 61, -1, 0]" + "'", str15, "[-1, -1, 61, 61, -1, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, -1, 62, 62, -1, 0]" + "'", str16, "[-1, -1, 62, 62, -1, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, -1, 63, 63, -1, 0]" + "'", str17, "[-1, -1, 63, 63, -1, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, -1, 64, 64, -1, 0]" + "'", str18, "[-1, -1, 64, 64, -1, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, -1, 65, 65, -1, 0]" + "'", str19, "[-1, -1, 65, 65, -1, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, -1, 66, 66, -1, 0]" + "'", str20, "[-1, -1, 66, 66, -1, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, -1, 67, 67, -1, 0]" + "'", str21, "[-1, -1, 67, 67, -1, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, -1, 68, 68, -1, 0]" + "'", str22, "[-1, -1, 68, 68, -1, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, -1, 69, 69, -1, 0]" + "'", str23, "[-1, -1, 69, 69, -1, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, -1, 70, 70, -1, 0]" + "'", str24, "[-1, -1, 70, 70, -1, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, -1, 71, 71, -1, 0]" + "'", str25, "[-1, -1, 71, 71, -1, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, -1, 72, 72, -1, 0]" + "'", str26, "[-1, -1, 72, 72, -1, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, -1, 73, 73, -1, 0]" + "'", str27, "[-1, -1, 73, 73, -1, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, -1, 74, 74, -1, 0]" + "'", str28, "[-1, -1, 74, 74, -1, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, -1, 75, 75, -1, 0]" + "'", str29, "[-1, -1, 75, 75, -1, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, -1, 76, 76, -1, 0]" + "'", str30, "[-1, -1, 76, 76, -1, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, -1, 77, 77, -1, 0]" + "'", str31, "[-1, -1, 77, 77, -1, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, -1, 78, 78, -1, 0]" + "'", str32, "[-1, -1, 78, 78, -1, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, -1, 79, 79, -1, 0]" + "'", str33, "[-1, -1, 79, 79, -1, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, -1, 80, 80, -1, 0]" + "'", str34, "[-1, -1, 80, 80, -1, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, -1, 81, 81, -1, 0]" + "'", str35, "[-1, -1, 81, 81, -1, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, -1, 82, 82, -1, 0]" + "'", str36, "[-1, -1, 82, 82, -1, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, -1, 83, 83, -1, 0]" + "'", str37, "[-1, -1, 83, 83, -1, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, -1, 84, 84, -1, 0]" + "'", str38, "[-1, -1, 84, 84, -1, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, -1, 85, 85, -1, 0]" + "'", str39, "[-1, -1, 85, 85, -1, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, -1, 86, 86, -1, 0]" + "'", str40, "[-1, -1, 86, 86, -1, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, -1, 87, 87, -1, 0]" + "'", str41, "[-1, -1, 87, 87, -1, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, -1, 88, 88, -1, 0]" + "'", str42, "[-1, -1, 88, 88, -1, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, -1, 89, 89, -1, 0]" + "'", str43, "[-1, -1, 89, 89, -1, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, -1, 90, 90, -1, 0]" + "'", str44, "[-1, -1, 90, 90, -1, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, -1, 91, 91, -1, 0]" + "'", str45, "[-1, -1, 91, 91, -1, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, -1, 92, 92, -1, 0]" + "'", str46, "[-1, -1, 92, 92, -1, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, -1, 93, 93, -1, 0]" + "'", str47, "[-1, -1, 93, 93, -1, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, -1, 94, 94, -1, 0]" + "'", str48, "[-1, -1, 94, 94, -1, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, -1, 95, 95, -1, 0]" + "'", str49, "[-1, -1, 95, 95, -1, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, -1, 96, 96, -1, 0]" + "'", str50, "[-1, -1, 96, 96, -1, 0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, -1, 97, 97, -1, 0]" + "'", str51, "[-1, -1, 97, 97, -1, 0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, -1, 98, 98, -1, 0]" + "'", str52, "[-1, -1, 98, 98, -1, 0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, -1, 99, 99, -1, 0]" + "'", str53, "[-1, -1, 99, 99, -1, 0]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[-1, -1, 100, 100, -1, 0]" + "'", str54, "[-1, -1, 100, 100, -1, 0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[-1, -1, 101, 101, -1, 0]" + "'", str55, "[-1, -1, 101, 101, -1, 0]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[-1, -1, 102, 102, -1, 0]" + "'", str56, "[-1, -1, 102, 102, -1, 0]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[-1, -1, 103, 103, -1, 0]" + "'", str57, "[-1, -1, 103, 103, -1, 0]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[-1, -1, 104, 104, -1, 0]" + "'", str58, "[-1, -1, 104, 104, -1, 0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[-1, -1, 105, 105, -1, 0]" + "'", str59, "[-1, -1, 105, 105, -1, 0]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[-1, -1, 106, 106, -1, 0]" + "'", str60, "[-1, -1, 106, 106, -1, 0]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[-1, -1, 107, 107, -1, 0]" + "'", str61, "[-1, -1, 107, 107, -1, 0]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[-1, -1, 108, 108, -1, 0]" + "'", str62, "[-1, -1, 108, 108, -1, 0]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[-1, -1, 109, 109, -1, 0]" + "'", str63, "[-1, -1, 109, 109, -1, 0]");
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2006");
        int[] intArray3 = new int[] { 100, 1, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass35 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[103, 2, 3]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100, 2, 0]" + "'", str4, "[100, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 3, 0]" + "'", str5, "[100, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 4, 0]" + "'", str6, "[100, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 5, 0]" + "'", str7, "[100, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 6, 0]" + "'", str8, "[100, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 7, 0]" + "'", str9, "[100, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 8, 0]" + "'", str10, "[100, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 9, 0]" + "'", str11, "[100, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[101, 0, 1]" + "'", str12, "[101, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[101, 1, 1]" + "'", str13, "[101, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[101, 2, 1]" + "'", str14, "[101, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[101, 3, 1]" + "'", str15, "[101, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[101, 4, 1]" + "'", str16, "[101, 4, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[101, 5, 1]" + "'", str17, "[101, 5, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[101, 6, 1]" + "'", str18, "[101, 6, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[101, 7, 1]" + "'", str19, "[101, 7, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[101, 8, 1]" + "'", str20, "[101, 8, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[101, 9, 1]" + "'", str21, "[101, 9, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[102, 0, 2]" + "'", str22, "[102, 0, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[102, 1, 2]" + "'", str23, "[102, 1, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[102, 2, 2]" + "'", str24, "[102, 2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[102, 3, 2]" + "'", str25, "[102, 3, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[102, 4, 2]" + "'", str26, "[102, 4, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[102, 5, 2]" + "'", str27, "[102, 5, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[102, 6, 2]" + "'", str28, "[102, 6, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[102, 7, 2]" + "'", str29, "[102, 7, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[102, 8, 2]" + "'", str30, "[102, 8, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[102, 9, 2]" + "'", str31, "[102, 9, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[103, 0, 3]" + "'", str32, "[103, 0, 3]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[103, 1, 3]" + "'", str33, "[103, 1, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[103, 2, 3]" + "'", str34, "[103, 2, 3]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2007");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.Class<?> wildcardClass36 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[3, 3]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 7]" + "'", str9, "[8, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 8]" + "'", str10, "[9, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 9]" + "'", str11, "[10, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2008");
        int[] intArray3 = new int[] { (short) 100, (byte) 0, (short) 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 7, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100, 1, 1]" + "'", str4, "[100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 2, 1]" + "'", str5, "[100, 2, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 3, 1]" + "'", str6, "[100, 3, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 4, 1]" + "'", str7, "[100, 4, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 5, 1]" + "'", str8, "[100, 5, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 6, 1]" + "'", str9, "[100, 6, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 7, 1]" + "'", str10, "[100, 7, 1]");
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2009");
        int[] intArray5 = new int[] { (short) 10, ' ', (short) 10, 10, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass31 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, 32, 35, 10, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[10, 32, 11, 10, -1]" + "'", str6, "[10, 32, 11, 10, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[10, 32, 12, 10, -1]" + "'", str7, "[10, 32, 12, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[10, 32, 13, 10, -1]" + "'", str8, "[10, 32, 13, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10, 32, 14, 10, -1]" + "'", str9, "[10, 32, 14, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 32, 15, 10, -1]" + "'", str10, "[10, 32, 15, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 32, 16, 10, -1]" + "'", str11, "[10, 32, 16, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 32, 17, 10, -1]" + "'", str12, "[10, 32, 17, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[10, 32, 18, 10, -1]" + "'", str13, "[10, 32, 18, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[10, 32, 19, 10, -1]" + "'", str14, "[10, 32, 19, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[10, 32, 20, 10, -1]" + "'", str15, "[10, 32, 20, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[10, 32, 21, 10, -1]" + "'", str16, "[10, 32, 21, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[10, 32, 22, 10, -1]" + "'", str17, "[10, 32, 22, 10, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[10, 32, 23, 10, -1]" + "'", str18, "[10, 32, 23, 10, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[10, 32, 24, 10, -1]" + "'", str19, "[10, 32, 24, 10, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[10, 32, 25, 10, -1]" + "'", str20, "[10, 32, 25, 10, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[10, 32, 26, 10, -1]" + "'", str21, "[10, 32, 26, 10, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[10, 32, 27, 10, -1]" + "'", str22, "[10, 32, 27, 10, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[10, 32, 28, 10, -1]" + "'", str23, "[10, 32, 28, 10, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[10, 32, 29, 10, -1]" + "'", str24, "[10, 32, 29, 10, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[10, 32, 30, 10, -1]" + "'", str25, "[10, 32, 30, 10, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[10, 32, 31, 10, -1]" + "'", str26, "[10, 32, 31, 10, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[10, 32, 32, 10, -1]" + "'", str27, "[10, 32, 32, 10, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[10, 32, 33, 10, -1]" + "'", str28, "[10, 32, 33, 10, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[10, 32, 34, 10, -1]" + "'", str29, "[10, 32, 34, 10, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[10, 32, 35, 10, -1]" + "'", str30, "[10, 32, 35, 10, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2010");
        int[] intArray4 = new int[] { (short) 1, (byte) -1, 10, (short) 10 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str57 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str58 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str59 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str60 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str61 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str62 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str63 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str64 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str65 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass66 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 60, 71, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 0, 11, 10]" + "'", str5, "[1, 0, 11, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 1, 12, 10]" + "'", str6, "[1, 1, 12, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 2, 13, 10]" + "'", str7, "[1, 2, 13, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 3, 14, 10]" + "'", str8, "[1, 3, 14, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 4, 15, 10]" + "'", str9, "[1, 4, 15, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 5, 16, 10]" + "'", str10, "[1, 5, 16, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 6, 17, 10]" + "'", str11, "[1, 6, 17, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 7, 18, 10]" + "'", str12, "[1, 7, 18, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 8, 19, 10]" + "'", str13, "[1, 8, 19, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 9, 20, 10]" + "'", str14, "[1, 9, 20, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 10, 21, 10]" + "'", str15, "[1, 10, 21, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 11, 22, 10]" + "'", str16, "[1, 11, 22, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 12, 23, 10]" + "'", str17, "[1, 12, 23, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 13, 24, 10]" + "'", str18, "[1, 13, 24, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 14, 25, 10]" + "'", str19, "[1, 14, 25, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 15, 26, 10]" + "'", str20, "[1, 15, 26, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 16, 27, 10]" + "'", str21, "[1, 16, 27, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 17, 28, 10]" + "'", str22, "[1, 17, 28, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 18, 29, 10]" + "'", str23, "[1, 18, 29, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 19, 30, 10]" + "'", str24, "[1, 19, 30, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 20, 31, 10]" + "'", str25, "[1, 20, 31, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 21, 32, 10]" + "'", str26, "[1, 21, 32, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 22, 33, 10]" + "'", str27, "[1, 22, 33, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 23, 34, 10]" + "'", str28, "[1, 23, 34, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 24, 35, 10]" + "'", str29, "[1, 24, 35, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 25, 36, 10]" + "'", str30, "[1, 25, 36, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 26, 37, 10]" + "'", str31, "[1, 26, 37, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 27, 38, 10]" + "'", str32, "[1, 27, 38, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 28, 39, 10]" + "'", str33, "[1, 28, 39, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[1, 29, 40, 10]" + "'", str34, "[1, 29, 40, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[1, 30, 41, 10]" + "'", str35, "[1, 30, 41, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[1, 31, 42, 10]" + "'", str36, "[1, 31, 42, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[1, 32, 43, 10]" + "'", str37, "[1, 32, 43, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[1, 33, 44, 10]" + "'", str38, "[1, 33, 44, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[1, 34, 45, 10]" + "'", str39, "[1, 34, 45, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[1, 35, 46, 10]" + "'", str40, "[1, 35, 46, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 36, 47, 10]" + "'", str41, "[1, 36, 47, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 37, 48, 10]" + "'", str42, "[1, 37, 48, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1, 38, 49, 10]" + "'", str43, "[1, 38, 49, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[1, 39, 50, 10]" + "'", str44, "[1, 39, 50, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[1, 40, 51, 10]" + "'", str45, "[1, 40, 51, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[1, 41, 52, 10]" + "'", str46, "[1, 41, 52, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[1, 42, 53, 10]" + "'", str47, "[1, 42, 53, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[1, 43, 54, 10]" + "'", str48, "[1, 43, 54, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[1, 44, 55, 10]" + "'", str49, "[1, 44, 55, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[1, 45, 56, 10]" + "'", str50, "[1, 45, 56, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[1, 46, 57, 10]" + "'", str51, "[1, 46, 57, 10]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[1, 47, 58, 10]" + "'", str52, "[1, 47, 58, 10]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[1, 48, 59, 10]" + "'", str53, "[1, 48, 59, 10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[1, 49, 60, 10]" + "'", str54, "[1, 49, 60, 10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[1, 50, 61, 10]" + "'", str55, "[1, 50, 61, 10]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[1, 51, 62, 10]" + "'", str56, "[1, 51, 62, 10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[1, 52, 63, 10]" + "'", str57, "[1, 52, 63, 10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[1, 53, 64, 10]" + "'", str58, "[1, 53, 64, 10]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[1, 54, 65, 10]" + "'", str59, "[1, 54, 65, 10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[1, 55, 66, 10]" + "'", str60, "[1, 55, 66, 10]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[1, 56, 67, 10]" + "'", str61, "[1, 56, 67, 10]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[1, 57, 68, 10]" + "'", str62, "[1, 57, 68, 10]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[1, 58, 69, 10]" + "'", str63, "[1, 58, 69, 10]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[1, 59, 70, 10]" + "'", str64, "[1, 59, 70, 10]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[1, 60, 71, 10]" + "'", str65, "[1, 60, 71, 10]");
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2011");
        int[] intArray1 = new int[] { (byte) 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[7]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5]" + "'", str36, "[5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6]" + "'", str37, "[6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7]" + "'", str38, "[7]");
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2012");
        int[] intArray5 = new int[] { (short) 1, ' ', (byte) -1, (short) 100, (short) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass32 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 34, 5, 102, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 32, 0, 100, 100]" + "'", str6, "[1, 32, 0, 100, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 32, 1, 100, 100]" + "'", str7, "[1, 32, 1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 32, 2, 100, 100]" + "'", str8, "[1, 32, 2, 100, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 32, 3, 100, 100]" + "'", str9, "[1, 32, 3, 100, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 32, 4, 100, 100]" + "'", str10, "[1, 32, 4, 100, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 32, 5, 100, 100]" + "'", str11, "[1, 32, 5, 100, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 32, 6, 100, 100]" + "'", str12, "[1, 32, 6, 100, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 32, 7, 100, 100]" + "'", str13, "[1, 32, 7, 100, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 32, 8, 100, 100]" + "'", str14, "[1, 32, 8, 100, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 32, 9, 100, 100]" + "'", str15, "[1, 32, 9, 100, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 33, 0, 101, 100]" + "'", str16, "[1, 33, 0, 101, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 33, 1, 101, 100]" + "'", str17, "[1, 33, 1, 101, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 33, 2, 101, 100]" + "'", str18, "[1, 33, 2, 101, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 33, 3, 101, 100]" + "'", str19, "[1, 33, 3, 101, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 33, 4, 101, 100]" + "'", str20, "[1, 33, 4, 101, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 33, 5, 101, 100]" + "'", str21, "[1, 33, 5, 101, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 33, 6, 101, 100]" + "'", str22, "[1, 33, 6, 101, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 33, 7, 101, 100]" + "'", str23, "[1, 33, 7, 101, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 33, 8, 101, 100]" + "'", str24, "[1, 33, 8, 101, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[1, 33, 9, 101, 100]" + "'", str25, "[1, 33, 9, 101, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[1, 34, 0, 102, 100]" + "'", str26, "[1, 34, 0, 102, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[1, 34, 1, 102, 100]" + "'", str27, "[1, 34, 1, 102, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[1, 34, 2, 102, 100]" + "'", str28, "[1, 34, 2, 102, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[1, 34, 3, 102, 100]" + "'", str29, "[1, 34, 3, 102, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[1, 34, 4, 102, 100]" + "'", str30, "[1, 34, 4, 102, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 34, 5, 102, 100]" + "'", str31, "[1, 34, 5, 102, 100]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2013");
        int[] intArray3 = new int[] { (short) 100, (byte) 0, (short) 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass8 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 4, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100, 1, 1]" + "'", str4, "[100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 2, 1]" + "'", str5, "[100, 2, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 3, 1]" + "'", str6, "[100, 3, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 4, 1]" + "'", str7, "[100, 4, 1]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2014");
        int[] intArray2 = new int[] { (byte) 10, (byte) 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[4, 4]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[11, 1]" + "'", str3, "[11, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[12, 2]" + "'", str4, "[12, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[13, 3]" + "'", str5, "[13, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[14, 4]" + "'", str6, "[14, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[15, 5]" + "'", str7, "[15, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[16, 6]" + "'", str8, "[16, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[17, 7]" + "'", str9, "[17, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[18, 8]" + "'", str10, "[18, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[19, 9]" + "'", str11, "[19, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2015");
        int[] intArray4 = new int[] { (byte) 0, ' ', (byte) 100, (byte) 1 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass16 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 43, 111, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 33, 101, 1]" + "'", str5, "[0, 33, 101, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 34, 102, 1]" + "'", str6, "[0, 34, 102, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 103, 1]" + "'", str7, "[0, 35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 36, 104, 1]" + "'", str8, "[0, 36, 104, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 37, 105, 1]" + "'", str9, "[0, 37, 105, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 38, 106, 1]" + "'", str10, "[0, 38, 106, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 39, 107, 1]" + "'", str11, "[0, 39, 107, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 40, 108, 1]" + "'", str12, "[0, 40, 108, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 41, 109, 1]" + "'", str13, "[0, 41, 109, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 42, 110, 1]" + "'", str14, "[0, 42, 110, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 43, 111, 1]" + "'", str15, "[0, 43, 111, 1]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2016");
        int[] intArray4 = new int[] { (-1), '4', (byte) 100, 100 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str57 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str58 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str59 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str60 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str61 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str62 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str63 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass64 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 111, 159, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 53, 101, 100]" + "'", str5, "[-1, 53, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 54, 102, 100]" + "'", str6, "[-1, 54, 102, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 55, 103, 100]" + "'", str7, "[-1, 55, 103, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 56, 104, 100]" + "'", str8, "[-1, 56, 104, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 57, 105, 100]" + "'", str9, "[-1, 57, 105, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 58, 106, 100]" + "'", str10, "[-1, 58, 106, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 59, 107, 100]" + "'", str11, "[-1, 59, 107, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 60, 108, 100]" + "'", str12, "[-1, 60, 108, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 61, 109, 100]" + "'", str13, "[-1, 61, 109, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 62, 110, 100]" + "'", str14, "[-1, 62, 110, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 63, 111, 100]" + "'", str15, "[-1, 63, 111, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 64, 112, 100]" + "'", str16, "[-1, 64, 112, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 65, 113, 100]" + "'", str17, "[-1, 65, 113, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 66, 114, 100]" + "'", str18, "[-1, 66, 114, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 67, 115, 100]" + "'", str19, "[-1, 67, 115, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 68, 116, 100]" + "'", str20, "[-1, 68, 116, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 69, 117, 100]" + "'", str21, "[-1, 69, 117, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 70, 118, 100]" + "'", str22, "[-1, 70, 118, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 71, 119, 100]" + "'", str23, "[-1, 71, 119, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 72, 120, 100]" + "'", str24, "[-1, 72, 120, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 73, 121, 100]" + "'", str25, "[-1, 73, 121, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 74, 122, 100]" + "'", str26, "[-1, 74, 122, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 75, 123, 100]" + "'", str27, "[-1, 75, 123, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 76, 124, 100]" + "'", str28, "[-1, 76, 124, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 77, 125, 100]" + "'", str29, "[-1, 77, 125, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 78, 126, 100]" + "'", str30, "[-1, 78, 126, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 79, 127, 100]" + "'", str31, "[-1, 79, 127, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 80, 128, 100]" + "'", str32, "[-1, 80, 128, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 81, 129, 100]" + "'", str33, "[-1, 81, 129, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 82, 130, 100]" + "'", str34, "[-1, 82, 130, 100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 83, 131, 100]" + "'", str35, "[-1, 83, 131, 100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 84, 132, 100]" + "'", str36, "[-1, 84, 132, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 85, 133, 100]" + "'", str37, "[-1, 85, 133, 100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 86, 134, 100]" + "'", str38, "[-1, 86, 134, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 87, 135, 100]" + "'", str39, "[-1, 87, 135, 100]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 88, 136, 100]" + "'", str40, "[-1, 88, 136, 100]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 89, 137, 100]" + "'", str41, "[-1, 89, 137, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 90, 138, 100]" + "'", str42, "[-1, 90, 138, 100]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 91, 139, 100]" + "'", str43, "[-1, 91, 139, 100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 92, 140, 100]" + "'", str44, "[-1, 92, 140, 100]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 93, 141, 100]" + "'", str45, "[-1, 93, 141, 100]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 94, 142, 100]" + "'", str46, "[-1, 94, 142, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 95, 143, 100]" + "'", str47, "[-1, 95, 143, 100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 96, 144, 100]" + "'", str48, "[-1, 96, 144, 100]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 97, 145, 100]" + "'", str49, "[-1, 97, 145, 100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 98, 146, 100]" + "'", str50, "[-1, 98, 146, 100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 99, 147, 100]" + "'", str51, "[-1, 99, 147, 100]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, 100, 148, 100]" + "'", str52, "[-1, 100, 148, 100]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, 101, 149, 100]" + "'", str53, "[-1, 101, 149, 100]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[-1, 102, 150, 100]" + "'", str54, "[-1, 102, 150, 100]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[-1, 103, 151, 100]" + "'", str55, "[-1, 103, 151, 100]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[-1, 104, 152, 100]" + "'", str56, "[-1, 104, 152, 100]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[-1, 105, 153, 100]" + "'", str57, "[-1, 105, 153, 100]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[-1, 106, 154, 100]" + "'", str58, "[-1, 106, 154, 100]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[-1, 107, 155, 100]" + "'", str59, "[-1, 107, 155, 100]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[-1, 108, 156, 100]" + "'", str60, "[-1, 108, 156, 100]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[-1, 109, 157, 100]" + "'", str61, "[-1, 109, 157, 100]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[-1, 110, 158, 100]" + "'", str62, "[-1, 110, 158, 100]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[-1, 111, 159, 100]" + "'", str63, "[-1, 111, 159, 100]");
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2017");
        int[] intArray3 = new int[] { 0, 1, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass28 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 5, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 2, 0]" + "'", str4, "[0, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 3, 0]" + "'", str5, "[0, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 4, 0]" + "'", str6, "[0, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 5, 0]" + "'", str7, "[0, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 6, 0]" + "'", str8, "[0, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 7, 0]" + "'", str9, "[0, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 8, 0]" + "'", str10, "[0, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 9, 0]" + "'", str11, "[0, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 1]" + "'", str12, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 1]" + "'", str13, "[1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 2, 1]" + "'", str14, "[1, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 3, 1]" + "'", str15, "[1, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 4, 1]" + "'", str16, "[1, 4, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 5, 1]" + "'", str17, "[1, 5, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 6, 1]" + "'", str18, "[1, 6, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 7, 1]" + "'", str19, "[1, 7, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 8, 1]" + "'", str20, "[1, 8, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 9, 1]" + "'", str21, "[1, 9, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 0, 2]" + "'", str22, "[2, 0, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 1, 2]" + "'", str23, "[2, 1, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2, 2]" + "'", str24, "[2, 2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 3, 2]" + "'", str25, "[2, 3, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 4, 2]" + "'", str26, "[2, 4, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 5, 2]" + "'", str27, "[2, 5, 2]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2018");
        int[] intArray3 = new int[] { 0, 1, (short) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass26 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2, 3, 2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 2, 0]" + "'", str4, "[0, 2, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 3, 0]" + "'", str5, "[0, 3, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 4, 0]" + "'", str6, "[0, 4, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 5, 0]" + "'", str7, "[0, 5, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 6, 0]" + "'", str8, "[0, 6, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 7, 0]" + "'", str9, "[0, 7, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 8, 0]" + "'", str10, "[0, 8, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 9, 0]" + "'", str11, "[0, 9, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 1]" + "'", str12, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1, 1]" + "'", str13, "[1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 2, 1]" + "'", str14, "[1, 2, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 3, 1]" + "'", str15, "[1, 3, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 4, 1]" + "'", str16, "[1, 4, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 5, 1]" + "'", str17, "[1, 5, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 6, 1]" + "'", str18, "[1, 6, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 7, 1]" + "'", str19, "[1, 7, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 8, 1]" + "'", str20, "[1, 8, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 9, 1]" + "'", str21, "[1, 9, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 0, 2]" + "'", str22, "[2, 0, 2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 1, 2]" + "'", str23, "[2, 1, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2, 2]" + "'", str24, "[2, 2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 3, 2]" + "'", str25, "[2, 3, 2]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2019");
        int[] intArray6 = new int[] { '#', (byte) -1, (byte) 1, (-1), (short) 100, 100 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass18 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 0, 0, 0, 101, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, -1, 2, 0, 100, 100]" + "'", str7, "[35, -1, 2, 0, 100, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, -1, 3, 1, 100, 100]" + "'", str8, "[35, -1, 3, 1, 100, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, -1, 4, 2, 100, 100]" + "'", str9, "[35, -1, 4, 2, 100, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, -1, 5, 3, 100, 100]" + "'", str10, "[35, -1, 5, 3, 100, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, -1, 6, 4, 100, 100]" + "'", str11, "[35, -1, 6, 4, 100, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, -1, 7, 5, 100, 100]" + "'", str12, "[35, -1, 7, 5, 100, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, -1, 8, 6, 100, 100]" + "'", str13, "[35, -1, 8, 6, 100, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, -1, 9, 7, 100, 100]" + "'", str14, "[35, -1, 9, 7, 100, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, -1, 10, 8, 100, 100]" + "'", str15, "[35, -1, 10, 8, 100, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, -1, 11, 9, 100, 100]" + "'", str16, "[35, -1, 11, 9, 100, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 0, 0, 0, 101, 100]" + "'", str17, "[35, 0, 0, 0, 101, 100]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2020");
        int[] intArray4 = new int[] { (byte) 0, 10, (short) 100, 'a' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass45 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 50, 140, 97]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 11, 101, 97]" + "'", str5, "[0, 11, 101, 97]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 12, 102, 97]" + "'", str6, "[0, 12, 102, 97]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 13, 103, 97]" + "'", str7, "[0, 13, 103, 97]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 14, 104, 97]" + "'", str8, "[0, 14, 104, 97]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 15, 105, 97]" + "'", str9, "[0, 15, 105, 97]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 16, 106, 97]" + "'", str10, "[0, 16, 106, 97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 17, 107, 97]" + "'", str11, "[0, 17, 107, 97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 18, 108, 97]" + "'", str12, "[0, 18, 108, 97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 19, 109, 97]" + "'", str13, "[0, 19, 109, 97]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 20, 110, 97]" + "'", str14, "[0, 20, 110, 97]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 21, 111, 97]" + "'", str15, "[0, 21, 111, 97]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 22, 112, 97]" + "'", str16, "[0, 22, 112, 97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 23, 113, 97]" + "'", str17, "[0, 23, 113, 97]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 24, 114, 97]" + "'", str18, "[0, 24, 114, 97]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 25, 115, 97]" + "'", str19, "[0, 25, 115, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[0, 26, 116, 97]" + "'", str20, "[0, 26, 116, 97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[0, 27, 117, 97]" + "'", str21, "[0, 27, 117, 97]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0, 28, 118, 97]" + "'", str22, "[0, 28, 118, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0, 29, 119, 97]" + "'", str23, "[0, 29, 119, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0, 30, 120, 97]" + "'", str24, "[0, 30, 120, 97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0, 31, 121, 97]" + "'", str25, "[0, 31, 121, 97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0, 32, 122, 97]" + "'", str26, "[0, 32, 122, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[0, 33, 123, 97]" + "'", str27, "[0, 33, 123, 97]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0, 34, 124, 97]" + "'", str28, "[0, 34, 124, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0, 35, 125, 97]" + "'", str29, "[0, 35, 125, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[0, 36, 126, 97]" + "'", str30, "[0, 36, 126, 97]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[0, 37, 127, 97]" + "'", str31, "[0, 37, 127, 97]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[0, 38, 128, 97]" + "'", str32, "[0, 38, 128, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[0, 39, 129, 97]" + "'", str33, "[0, 39, 129, 97]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[0, 40, 130, 97]" + "'", str34, "[0, 40, 130, 97]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[0, 41, 131, 97]" + "'", str35, "[0, 41, 131, 97]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[0, 42, 132, 97]" + "'", str36, "[0, 42, 132, 97]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[0, 43, 133, 97]" + "'", str37, "[0, 43, 133, 97]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[0, 44, 134, 97]" + "'", str38, "[0, 44, 134, 97]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[0, 45, 135, 97]" + "'", str39, "[0, 45, 135, 97]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[0, 46, 136, 97]" + "'", str40, "[0, 46, 136, 97]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[0, 47, 137, 97]" + "'", str41, "[0, 47, 137, 97]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[0, 48, 138, 97]" + "'", str42, "[0, 48, 138, 97]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[0, 49, 139, 97]" + "'", str43, "[0, 49, 139, 97]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[0, 50, 140, 97]" + "'", str44, "[0, 50, 140, 97]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2021");
        int[] intArray2 = new int[] { (byte) 1, 0 };
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[5, 5]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2, 1]" + "'", str3, "[2, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3, 2]" + "'", str4, "[3, 2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4, 3]" + "'", str5, "[4, 3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5, 4]" + "'", str6, "[5, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6, 5]" + "'", str7, "[6, 5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7, 6]" + "'", str8, "[7, 6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8, 7]" + "'", str9, "[8, 7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9, 8]" + "'", str10, "[9, 8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[10, 9]" + "'", str11, "[10, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 0, 1]" + "'", str12, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 1]" + "'", str13, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 2]" + "'", str14, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3, 3]" + "'", str15, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4, 4]" + "'", str16, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5, 5]" + "'", str17, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6, 6]" + "'", str18, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7, 7]" + "'", str19, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8, 8]" + "'", str20, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9, 9]" + "'", str21, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 0, 1]" + "'", str22, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 1]" + "'", str23, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 2]" + "'", str24, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 3]" + "'", str25, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4, 4]" + "'", str26, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5, 5]" + "'", str27, "[5, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6, 6]" + "'", str28, "[6, 6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7, 7]" + "'", str29, "[7, 7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8, 8]" + "'", str30, "[8, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9, 9]" + "'", str31, "[9, 9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 0, 1]" + "'", str32, "[1, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1, 1]" + "'", str33, "[1, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2, 2]" + "'", str34, "[2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 3]" + "'", str35, "[3, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 4]" + "'", str36, "[4, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5, 5]" + "'", str37, "[5, 5]");
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2022");
        int[] intArray4 = new int[] { (short) 0, (short) 100, 10, 1 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass20 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 115, 25, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 11, 1]" + "'", str5, "[0, 101, 11, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 12, 1]" + "'", str6, "[0, 102, 12, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 13, 1]" + "'", str7, "[0, 103, 13, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 14, 1]" + "'", str8, "[0, 104, 14, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 105, 15, 1]" + "'", str9, "[0, 105, 15, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 106, 16, 1]" + "'", str10, "[0, 106, 16, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 107, 17, 1]" + "'", str11, "[0, 107, 17, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 108, 18, 1]" + "'", str12, "[0, 108, 18, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 109, 19, 1]" + "'", str13, "[0, 109, 19, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 110, 20, 1]" + "'", str14, "[0, 110, 20, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 111, 21, 1]" + "'", str15, "[0, 111, 21, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 112, 22, 1]" + "'", str16, "[0, 112, 22, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 113, 23, 1]" + "'", str17, "[0, 113, 23, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 114, 24, 1]" + "'", str18, "[0, 114, 24, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0, 115, 25, 1]" + "'", str19, "[0, 115, 25, 1]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2023");
        int[] intArray4 = new int[] { (-1), '4', (byte) 100, 100 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str57 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str58 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str59 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str60 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str61 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str62 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str63 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str64 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str65 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str66 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str67 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass68 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 115, 163, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 53, 101, 100]" + "'", str5, "[-1, 53, 101, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 54, 102, 100]" + "'", str6, "[-1, 54, 102, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 55, 103, 100]" + "'", str7, "[-1, 55, 103, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 56, 104, 100]" + "'", str8, "[-1, 56, 104, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 57, 105, 100]" + "'", str9, "[-1, 57, 105, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 58, 106, 100]" + "'", str10, "[-1, 58, 106, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 59, 107, 100]" + "'", str11, "[-1, 59, 107, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 60, 108, 100]" + "'", str12, "[-1, 60, 108, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 61, 109, 100]" + "'", str13, "[-1, 61, 109, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 62, 110, 100]" + "'", str14, "[-1, 62, 110, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 63, 111, 100]" + "'", str15, "[-1, 63, 111, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 64, 112, 100]" + "'", str16, "[-1, 64, 112, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 65, 113, 100]" + "'", str17, "[-1, 65, 113, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 66, 114, 100]" + "'", str18, "[-1, 66, 114, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 67, 115, 100]" + "'", str19, "[-1, 67, 115, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 68, 116, 100]" + "'", str20, "[-1, 68, 116, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 69, 117, 100]" + "'", str21, "[-1, 69, 117, 100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 70, 118, 100]" + "'", str22, "[-1, 70, 118, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 71, 119, 100]" + "'", str23, "[-1, 71, 119, 100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 72, 120, 100]" + "'", str24, "[-1, 72, 120, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 73, 121, 100]" + "'", str25, "[-1, 73, 121, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 74, 122, 100]" + "'", str26, "[-1, 74, 122, 100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 75, 123, 100]" + "'", str27, "[-1, 75, 123, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 76, 124, 100]" + "'", str28, "[-1, 76, 124, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 77, 125, 100]" + "'", str29, "[-1, 77, 125, 100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 78, 126, 100]" + "'", str30, "[-1, 78, 126, 100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 79, 127, 100]" + "'", str31, "[-1, 79, 127, 100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 80, 128, 100]" + "'", str32, "[-1, 80, 128, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 81, 129, 100]" + "'", str33, "[-1, 81, 129, 100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 82, 130, 100]" + "'", str34, "[-1, 82, 130, 100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 83, 131, 100]" + "'", str35, "[-1, 83, 131, 100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 84, 132, 100]" + "'", str36, "[-1, 84, 132, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 85, 133, 100]" + "'", str37, "[-1, 85, 133, 100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 86, 134, 100]" + "'", str38, "[-1, 86, 134, 100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 87, 135, 100]" + "'", str39, "[-1, 87, 135, 100]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 88, 136, 100]" + "'", str40, "[-1, 88, 136, 100]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 89, 137, 100]" + "'", str41, "[-1, 89, 137, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 90, 138, 100]" + "'", str42, "[-1, 90, 138, 100]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 91, 139, 100]" + "'", str43, "[-1, 91, 139, 100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 92, 140, 100]" + "'", str44, "[-1, 92, 140, 100]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 93, 141, 100]" + "'", str45, "[-1, 93, 141, 100]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 94, 142, 100]" + "'", str46, "[-1, 94, 142, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 95, 143, 100]" + "'", str47, "[-1, 95, 143, 100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 96, 144, 100]" + "'", str48, "[-1, 96, 144, 100]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 97, 145, 100]" + "'", str49, "[-1, 97, 145, 100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 98, 146, 100]" + "'", str50, "[-1, 98, 146, 100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 99, 147, 100]" + "'", str51, "[-1, 99, 147, 100]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, 100, 148, 100]" + "'", str52, "[-1, 100, 148, 100]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, 101, 149, 100]" + "'", str53, "[-1, 101, 149, 100]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[-1, 102, 150, 100]" + "'", str54, "[-1, 102, 150, 100]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[-1, 103, 151, 100]" + "'", str55, "[-1, 103, 151, 100]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[-1, 104, 152, 100]" + "'", str56, "[-1, 104, 152, 100]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[-1, 105, 153, 100]" + "'", str57, "[-1, 105, 153, 100]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[-1, 106, 154, 100]" + "'", str58, "[-1, 106, 154, 100]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[-1, 107, 155, 100]" + "'", str59, "[-1, 107, 155, 100]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[-1, 108, 156, 100]" + "'", str60, "[-1, 108, 156, 100]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[-1, 109, 157, 100]" + "'", str61, "[-1, 109, 157, 100]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[-1, 110, 158, 100]" + "'", str62, "[-1, 110, 158, 100]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[-1, 111, 159, 100]" + "'", str63, "[-1, 111, 159, 100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[-1, 112, 160, 100]" + "'", str64, "[-1, 112, 160, 100]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[-1, 113, 161, 100]" + "'", str65, "[-1, 113, 161, 100]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[-1, 114, 162, 100]" + "'", str66, "[-1, 114, 162, 100]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[-1, 115, 163, 100]" + "'", str67, "[-1, 115, 163, 100]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2024");
        int[] intArray4 = new int[] { 100, (byte) 100, (byte) 100, (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass13 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 108, 108, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 101, 101, 0]" + "'", str5, "[100, 101, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 102, 102, 0]" + "'", str6, "[100, 102, 102, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 103, 103, 0]" + "'", str7, "[100, 103, 103, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 104, 104, 0]" + "'", str8, "[100, 104, 104, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 105, 105, 0]" + "'", str9, "[100, 105, 105, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 106, 106, 0]" + "'", str10, "[100, 106, 106, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 107, 107, 0]" + "'", str11, "[100, 107, 107, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 108, 108, 0]" + "'", str12, "[100, 108, 108, 0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2025");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass33 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[3, 9, 102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 100]" + "'", str6, "[1, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 100]" + "'", str7, "[1, 4, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 100]" + "'", str8, "[1, 5, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 100]" + "'", str9, "[1, 6, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 100]" + "'", str10, "[1, 7, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 100]" + "'", str11, "[1, 8, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 100]" + "'", str12, "[1, 9, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 101]" + "'", str13, "[2, 0, 101]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 101]" + "'", str14, "[2, 1, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 101]" + "'", str15, "[2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 101]" + "'", str16, "[2, 3, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 101]" + "'", str17, "[2, 4, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 101]" + "'", str18, "[2, 5, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 101]" + "'", str19, "[2, 6, 101]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 101]" + "'", str20, "[2, 7, 101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 101]" + "'", str21, "[2, 8, 101]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 101]" + "'", str22, "[2, 9, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 102]" + "'", str23, "[3, 0, 102]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 102]" + "'", str24, "[3, 1, 102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 102]" + "'", str25, "[3, 2, 102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 102]" + "'", str26, "[3, 3, 102]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 102]" + "'", str27, "[3, 4, 102]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 102]" + "'", str28, "[3, 5, 102]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 102]" + "'", str29, "[3, 6, 102]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 102]" + "'", str30, "[3, 7, 102]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 102]" + "'", str31, "[3, 8, 102]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 9, 102]" + "'", str32, "[3, 9, 102]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2026");
        int[] intArray1 = new int[] { 0 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str57 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str58 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str59 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str60 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str61 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str62 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str63 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[1]" + "'", str2, "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[2]" + "'", str3, "[2]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[3]" + "'", str4, "[3]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[4]" + "'", str5, "[4]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[5]" + "'", str6, "[5]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[6]" + "'", str7, "[6]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[7]" + "'", str8, "[7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[8]" + "'", str9, "[8]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[9]" + "'", str10, "[9]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 0, 1]" + "'", str11, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1]" + "'", str12, "[1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2]" + "'", str13, "[2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[3]" + "'", str14, "[3]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[5]" + "'", str16, "[5]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[6]" + "'", str17, "[6]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[7]" + "'", str18, "[7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[8]" + "'", str19, "[8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[9]" + "'", str20, "[9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 0, 1]" + "'", str21, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1]" + "'", str22, "[1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2]" + "'", str23, "[2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3]" + "'", str24, "[3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[5]" + "'", str26, "[5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[6]" + "'", str27, "[6]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[7]" + "'", str28, "[7]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[8]" + "'", str29, "[8]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[9]" + "'", str30, "[9]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[1, 0, 1]" + "'", str31, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1]" + "'", str32, "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[2]" + "'", str33, "[2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3]" + "'", str34, "[3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[5]" + "'", str36, "[5]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[6]" + "'", str37, "[6]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[7]" + "'", str38, "[7]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[8]" + "'", str39, "[8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[9]" + "'", str40, "[9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[1, 0, 1]" + "'", str41, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1]" + "'", str42, "[1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[2]" + "'", str43, "[2]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[3]" + "'", str44, "[3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4]" + "'", str45, "[4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5]" + "'", str46, "[5]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[6]" + "'", str47, "[6]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[7]" + "'", str48, "[7]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[8]" + "'", str49, "[8]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[9]" + "'", str50, "[9]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[1, 0, 1]" + "'", str51, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[1]" + "'", str52, "[1]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[2]" + "'", str53, "[2]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[3]" + "'", str54, "[3]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[4]" + "'", str55, "[4]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[5]" + "'", str56, "[5]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[6]" + "'", str57, "[6]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[7]" + "'", str58, "[7]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[8]" + "'", str59, "[8]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[9]" + "'", str60, "[9]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[1, 0, 1]" + "'", str61, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[1]" + "'", str62, "[1]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[2]" + "'", str63, "[2]");
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2027");
        int[] intArray4 = new int[] { (byte) 0, (short) 100, (short) 1, (short) 100 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 4, 4, 101]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 2, 100]" + "'", str5, "[0, 101, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 3, 100]" + "'", str6, "[0, 102, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 4, 100]" + "'", str7, "[0, 103, 4, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 5, 100]" + "'", str8, "[0, 104, 5, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 105, 6, 100]" + "'", str9, "[0, 105, 6, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 106, 7, 100]" + "'", str10, "[0, 106, 7, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 107, 8, 100]" + "'", str11, "[0, 107, 8, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 108, 9, 100]" + "'", str12, "[0, 108, 9, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 0, 101]" + "'", str13, "[1, 0, 0, 101]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 1, 101]" + "'", str14, "[1, 1, 1, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 2, 2, 101]" + "'", str15, "[1, 2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 3, 3, 101]" + "'", str16, "[1, 3, 3, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 4, 4, 101]" + "'", str17, "[1, 4, 4, 101]");
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2028");
        int[] intArray3 = new int[] { 1, (short) 0, (byte) 100 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass32 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[3, 8, 102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 100]" + "'", str4, "[1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 100]" + "'", str5, "[1, 2, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 100]" + "'", str6, "[1, 3, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 100]" + "'", str7, "[1, 4, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 100]" + "'", str8, "[1, 5, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 100]" + "'", str9, "[1, 6, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 100]" + "'", str10, "[1, 7, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 100]" + "'", str11, "[1, 8, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 100]" + "'", str12, "[1, 9, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 101]" + "'", str13, "[2, 0, 101]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 101]" + "'", str14, "[2, 1, 101]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 101]" + "'", str15, "[2, 2, 101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 101]" + "'", str16, "[2, 3, 101]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 101]" + "'", str17, "[2, 4, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 101]" + "'", str18, "[2, 5, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 101]" + "'", str19, "[2, 6, 101]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 101]" + "'", str20, "[2, 7, 101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 101]" + "'", str21, "[2, 8, 101]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 101]" + "'", str22, "[2, 9, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 102]" + "'", str23, "[3, 0, 102]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 102]" + "'", str24, "[3, 1, 102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 102]" + "'", str25, "[3, 2, 102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 102]" + "'", str26, "[3, 3, 102]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 102]" + "'", str27, "[3, 4, 102]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 102]" + "'", str28, "[3, 5, 102]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 102]" + "'", str29, "[3, 6, 102]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 102]" + "'", str30, "[3, 7, 102]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 102]" + "'", str31, "[3, 8, 102]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2029");
        int[] intArray5 = new int[] { (byte) 100, 10, '4', 1, (byte) 100 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.Class<?> wildcardClass20 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 66, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 53, 1, 100]" + "'", str6, "[100, 10, 53, 1, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 54, 1, 100]" + "'", str7, "[100, 10, 54, 1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 55, 1, 100]" + "'", str8, "[100, 10, 55, 1, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 56, 1, 100]" + "'", str9, "[100, 10, 56, 1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 10, 57, 1, 100]" + "'", str10, "[100, 10, 57, 1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 10, 58, 1, 100]" + "'", str11, "[100, 10, 58, 1, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 10, 59, 1, 100]" + "'", str12, "[100, 10, 59, 1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 10, 60, 1, 100]" + "'", str13, "[100, 10, 60, 1, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 61, 1, 100]" + "'", str14, "[100, 10, 61, 1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 10, 62, 1, 100]" + "'", str15, "[100, 10, 62, 1, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 10, 63, 1, 100]" + "'", str16, "[100, 10, 63, 1, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 10, 64, 1, 100]" + "'", str17, "[100, 10, 64, 1, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 10, 65, 1, 100]" + "'", str18, "[100, 10, 65, 1, 100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 10, 66, 1, 100]" + "'", str19, "[100, 10, 66, 1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2030");
        int[] intArray4 = new int[] { 0, (short) 100, (-1), (-1) };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2, 4, 4, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 0, -1]" + "'", str5, "[0, 101, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 1, -1]" + "'", str6, "[0, 102, 1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 2, -1]" + "'", str7, "[0, 103, 2, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 3, -1]" + "'", str8, "[0, 104, 3, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 105, 4, -1]" + "'", str9, "[0, 105, 4, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 106, 5, -1]" + "'", str10, "[0, 106, 5, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 107, 6, -1]" + "'", str11, "[0, 107, 6, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 108, 7, -1]" + "'", str12, "[0, 108, 7, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 109, 8, -1]" + "'", str13, "[0, 109, 8, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 110, 9, -1]" + "'", str14, "[0, 110, 9, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 0, 0, 0]" + "'", str15, "[1, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 1, 1, 0]" + "'", str16, "[1, 1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 2, 2, 0]" + "'", str17, "[1, 2, 2, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 3, 3, 0]" + "'", str18, "[1, 3, 3, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 4, 4, 0]" + "'", str19, "[1, 4, 4, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 5, 5, 0]" + "'", str20, "[1, 5, 5, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 6, 6, 0]" + "'", str21, "[1, 6, 6, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 7, 7, 0]" + "'", str22, "[1, 7, 7, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1, 8, 8, 0]" + "'", str23, "[1, 8, 8, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[1, 9, 9, 0]" + "'", str24, "[1, 9, 9, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 0, 0, 1]" + "'", str25, "[2, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 1, 1, 1]" + "'", str26, "[2, 1, 1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 2, 2, 1]" + "'", str27, "[2, 2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[2, 3, 3, 1]" + "'", str28, "[2, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[2, 4, 4, 1]" + "'", str29, "[2, 4, 4, 1]");
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2031");
        int[] intArray3 = new int[] { (short) 0, (short) 0, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass46 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[4, 2, 3]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0, 1, -1]" + "'", str4, "[0, 1, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 2, -1]" + "'", str5, "[0, 2, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 3, -1]" + "'", str6, "[0, 3, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 4, -1]" + "'", str7, "[0, 4, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 5, -1]" + "'", str8, "[0, 5, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 6, -1]" + "'", str9, "[0, 6, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 7, -1]" + "'", str10, "[0, 7, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 8, -1]" + "'", str11, "[0, 8, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 9, -1]" + "'", str12, "[0, 9, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1, 0, 0]" + "'", str13, "[1, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[1, 1, 0]" + "'", str14, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[1, 2, 0]" + "'", str15, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1, 3, 0]" + "'", str16, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1, 4, 0]" + "'", str17, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[1, 5, 0]" + "'", str18, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[1, 6, 0]" + "'", str19, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[1, 7, 0]" + "'", str20, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[1, 8, 0]" + "'", str21, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 9, 0]" + "'", str22, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[2, 0, 1]" + "'", str23, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2, 1, 1]" + "'", str24, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[2, 2, 1]" + "'", str25, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[2, 3, 1]" + "'", str26, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[2, 4, 1]" + "'", str27, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[2, 5, 1]" + "'", str28, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[2, 6, 1]" + "'", str29, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[2, 7, 1]" + "'", str30, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[2, 8, 1]" + "'", str31, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[2, 9, 1]" + "'", str32, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[3, 0, 2]" + "'", str33, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[3, 1, 2]" + "'", str34, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3, 2, 2]" + "'", str35, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[3, 3, 2]" + "'", str36, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[3, 4, 2]" + "'", str37, "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[3, 5, 2]" + "'", str38, "[3, 5, 2]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[3, 6, 2]" + "'", str39, "[3, 6, 2]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[3, 7, 2]" + "'", str40, "[3, 7, 2]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[3, 8, 2]" + "'", str41, "[3, 8, 2]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[3, 9, 2]" + "'", str42, "[3, 9, 2]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[4, 0, 3]" + "'", str43, "[4, 0, 3]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[4, 1, 3]" + "'", str44, "[4, 1, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4, 2, 3]" + "'", str45, "[4, 2, 3]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2032");
        int[] intArray5 = new int[] { (short) 100, (byte) 10, (byte) 100, 0, (byte) 10 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 145, 0, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 10, 101, 0, 10]" + "'", str6, "[100, 10, 101, 0, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 10, 102, 0, 10]" + "'", str7, "[100, 10, 102, 0, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 10, 103, 0, 10]" + "'", str8, "[100, 10, 103, 0, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 10, 104, 0, 10]" + "'", str9, "[100, 10, 104, 0, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 10, 105, 0, 10]" + "'", str10, "[100, 10, 105, 0, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 10, 106, 0, 10]" + "'", str11, "[100, 10, 106, 0, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 10, 107, 0, 10]" + "'", str12, "[100, 10, 107, 0, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 10, 108, 0, 10]" + "'", str13, "[100, 10, 108, 0, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 10, 109, 0, 10]" + "'", str14, "[100, 10, 109, 0, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, 10, 110, 0, 10]" + "'", str15, "[100, 10, 110, 0, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, 10, 111, 0, 10]" + "'", str16, "[100, 10, 111, 0, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, 10, 112, 0, 10]" + "'", str17, "[100, 10, 112, 0, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, 10, 113, 0, 10]" + "'", str18, "[100, 10, 113, 0, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, 10, 114, 0, 10]" + "'", str19, "[100, 10, 114, 0, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, 10, 115, 0, 10]" + "'", str20, "[100, 10, 115, 0, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, 10, 116, 0, 10]" + "'", str21, "[100, 10, 116, 0, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, 10, 117, 0, 10]" + "'", str22, "[100, 10, 117, 0, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, 10, 118, 0, 10]" + "'", str23, "[100, 10, 118, 0, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, 10, 119, 0, 10]" + "'", str24, "[100, 10, 119, 0, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, 10, 120, 0, 10]" + "'", str25, "[100, 10, 120, 0, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, 10, 121, 0, 10]" + "'", str26, "[100, 10, 121, 0, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, 10, 122, 0, 10]" + "'", str27, "[100, 10, 122, 0, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, 10, 123, 0, 10]" + "'", str28, "[100, 10, 123, 0, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, 10, 124, 0, 10]" + "'", str29, "[100, 10, 124, 0, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, 10, 125, 0, 10]" + "'", str30, "[100, 10, 125, 0, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, 10, 126, 0, 10]" + "'", str31, "[100, 10, 126, 0, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, 10, 127, 0, 10]" + "'", str32, "[100, 10, 127, 0, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, 10, 128, 0, 10]" + "'", str33, "[100, 10, 128, 0, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 10, 129, 0, 10]" + "'", str34, "[100, 10, 129, 0, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 10, 130, 0, 10]" + "'", str35, "[100, 10, 130, 0, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 10, 131, 0, 10]" + "'", str36, "[100, 10, 131, 0, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 10, 132, 0, 10]" + "'", str37, "[100, 10, 132, 0, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 10, 133, 0, 10]" + "'", str38, "[100, 10, 133, 0, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 10, 134, 0, 10]" + "'", str39, "[100, 10, 134, 0, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 10, 135, 0, 10]" + "'", str40, "[100, 10, 135, 0, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 10, 136, 0, 10]" + "'", str41, "[100, 10, 136, 0, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 10, 137, 0, 10]" + "'", str42, "[100, 10, 137, 0, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 10, 138, 0, 10]" + "'", str43, "[100, 10, 138, 0, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[100, 10, 139, 0, 10]" + "'", str44, "[100, 10, 139, 0, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[100, 10, 140, 0, 10]" + "'", str45, "[100, 10, 140, 0, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[100, 10, 141, 0, 10]" + "'", str46, "[100, 10, 141, 0, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[100, 10, 142, 0, 10]" + "'", str47, "[100, 10, 142, 0, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[100, 10, 143, 0, 10]" + "'", str48, "[100, 10, 143, 0, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[100, 10, 144, 0, 10]" + "'", str49, "[100, 10, 144, 0, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[100, 10, 145, 0, 10]" + "'", str50, "[100, 10, 145, 0, 10]");
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2033");
        int[] intArray3 = new int[] { (short) 100, (byte) 0, (short) 1 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass10 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 6, 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[100, 1, 1]" + "'", str4, "[100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 2, 1]" + "'", str5, "[100, 2, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 3, 1]" + "'", str6, "[100, 3, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 4, 1]" + "'", str7, "[100, 4, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 5, 1]" + "'", str8, "[100, 5, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 6, 1]" + "'", str9, "[100, 6, 1]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2034");
        int[] intArray6 = new int[] { '#', (byte) 0, 10, (-1), '#', (byte) 1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass40 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 3, 2, 2, 38, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[35, 0, 11, 0, 35, 1]" + "'", str7, "[35, 0, 11, 0, 35, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[35, 0, 12, 1, 35, 1]" + "'", str8, "[35, 0, 12, 1, 35, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[35, 0, 13, 2, 35, 1]" + "'", str9, "[35, 0, 13, 2, 35, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[35, 0, 14, 3, 35, 1]" + "'", str10, "[35, 0, 14, 3, 35, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[35, 0, 15, 4, 35, 1]" + "'", str11, "[35, 0, 15, 4, 35, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[35, 0, 16, 5, 35, 1]" + "'", str12, "[35, 0, 16, 5, 35, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[35, 0, 17, 6, 35, 1]" + "'", str13, "[35, 0, 17, 6, 35, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[35, 0, 18, 7, 35, 1]" + "'", str14, "[35, 0, 18, 7, 35, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[35, 0, 19, 8, 35, 1]" + "'", str15, "[35, 0, 19, 8, 35, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[35, 0, 20, 9, 35, 1]" + "'", str16, "[35, 0, 20, 9, 35, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[35, 1, 0, 0, 36, 1]" + "'", str17, "[35, 1, 0, 0, 36, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[35, 1, 1, 1, 36, 1]" + "'", str18, "[35, 1, 1, 1, 36, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[35, 1, 2, 2, 36, 1]" + "'", str19, "[35, 1, 2, 2, 36, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[35, 1, 3, 3, 36, 1]" + "'", str20, "[35, 1, 3, 3, 36, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[35, 1, 4, 4, 36, 1]" + "'", str21, "[35, 1, 4, 4, 36, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[35, 1, 5, 5, 36, 1]" + "'", str22, "[35, 1, 5, 5, 36, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[35, 1, 6, 6, 36, 1]" + "'", str23, "[35, 1, 6, 6, 36, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[35, 1, 7, 7, 36, 1]" + "'", str24, "[35, 1, 7, 7, 36, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[35, 1, 8, 8, 36, 1]" + "'", str25, "[35, 1, 8, 8, 36, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[35, 1, 9, 9, 36, 1]" + "'", str26, "[35, 1, 9, 9, 36, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[35, 2, 0, 0, 37, 1]" + "'", str27, "[35, 2, 0, 0, 37, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[35, 2, 1, 1, 37, 1]" + "'", str28, "[35, 2, 1, 1, 37, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[35, 2, 2, 2, 37, 1]" + "'", str29, "[35, 2, 2, 2, 37, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[35, 2, 3, 3, 37, 1]" + "'", str30, "[35, 2, 3, 3, 37, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[35, 2, 4, 4, 37, 1]" + "'", str31, "[35, 2, 4, 4, 37, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 2, 5, 5, 37, 1]" + "'", str32, "[35, 2, 5, 5, 37, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 2, 6, 6, 37, 1]" + "'", str33, "[35, 2, 6, 6, 37, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 2, 7, 7, 37, 1]" + "'", str34, "[35, 2, 7, 7, 37, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 2, 8, 8, 37, 1]" + "'", str35, "[35, 2, 8, 8, 37, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 2, 9, 9, 37, 1]" + "'", str36, "[35, 2, 9, 9, 37, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 3, 0, 0, 38, 1]" + "'", str37, "[35, 3, 0, 0, 38, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 3, 1, 1, 38, 1]" + "'", str38, "[35, 3, 1, 1, 38, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 3, 2, 2, 38, 1]" + "'", str39, "[35, 3, 2, 2, 38, 1]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2035");
        int[] intArray6 = new int[] { (-1), 10, (short) -1, (short) -1, (short) 10, (short) -1 };
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray6);
        java.lang.Class<?> wildcardClass48 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 14, 0, 0, 14, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 10, 0, 0, 10, -1]" + "'", str7, "[-1, 10, 0, 0, 10, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 10, 1, 1, 10, -1]" + "'", str8, "[-1, 10, 1, 1, 10, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 10, 2, 2, 10, -1]" + "'", str9, "[-1, 10, 2, 2, 10, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 10, 3, 3, 10, -1]" + "'", str10, "[-1, 10, 3, 3, 10, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 10, 4, 4, 10, -1]" + "'", str11, "[-1, 10, 4, 4, 10, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 10, 5, 5, 10, -1]" + "'", str12, "[-1, 10, 5, 5, 10, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 10, 6, 6, 10, -1]" + "'", str13, "[-1, 10, 6, 6, 10, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 10, 7, 7, 10, -1]" + "'", str14, "[-1, 10, 7, 7, 10, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 10, 8, 8, 10, -1]" + "'", str15, "[-1, 10, 8, 8, 10, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 10, 9, 9, 10, -1]" + "'", str16, "[-1, 10, 9, 9, 10, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 11, 0, 0, 11, -1]" + "'", str17, "[-1, 11, 0, 0, 11, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 11, 1, 1, 11, -1]" + "'", str18, "[-1, 11, 1, 1, 11, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 11, 2, 2, 11, -1]" + "'", str19, "[-1, 11, 2, 2, 11, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 11, 3, 3, 11, -1]" + "'", str20, "[-1, 11, 3, 3, 11, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 11, 4, 4, 11, -1]" + "'", str21, "[-1, 11, 4, 4, 11, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 11, 5, 5, 11, -1]" + "'", str22, "[-1, 11, 5, 5, 11, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 11, 6, 6, 11, -1]" + "'", str23, "[-1, 11, 6, 6, 11, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 11, 7, 7, 11, -1]" + "'", str24, "[-1, 11, 7, 7, 11, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 11, 8, 8, 11, -1]" + "'", str25, "[-1, 11, 8, 8, 11, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 11, 9, 9, 11, -1]" + "'", str26, "[-1, 11, 9, 9, 11, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 12, 0, 0, 12, -1]" + "'", str27, "[-1, 12, 0, 0, 12, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 12, 1, 1, 12, -1]" + "'", str28, "[-1, 12, 1, 1, 12, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 12, 2, 2, 12, -1]" + "'", str29, "[-1, 12, 2, 2, 12, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 12, 3, 3, 12, -1]" + "'", str30, "[-1, 12, 3, 3, 12, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 12, 4, 4, 12, -1]" + "'", str31, "[-1, 12, 4, 4, 12, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 12, 5, 5, 12, -1]" + "'", str32, "[-1, 12, 5, 5, 12, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 12, 6, 6, 12, -1]" + "'", str33, "[-1, 12, 6, 6, 12, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 12, 7, 7, 12, -1]" + "'", str34, "[-1, 12, 7, 7, 12, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 12, 8, 8, 12, -1]" + "'", str35, "[-1, 12, 8, 8, 12, -1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 12, 9, 9, 12, -1]" + "'", str36, "[-1, 12, 9, 9, 12, -1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 13, 0, 0, 13, -1]" + "'", str37, "[-1, 13, 0, 0, 13, -1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 13, 1, 1, 13, -1]" + "'", str38, "[-1, 13, 1, 1, 13, -1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 13, 2, 2, 13, -1]" + "'", str39, "[-1, 13, 2, 2, 13, -1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 13, 3, 3, 13, -1]" + "'", str40, "[-1, 13, 3, 3, 13, -1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 13, 4, 4, 13, -1]" + "'", str41, "[-1, 13, 4, 4, 13, -1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 13, 5, 5, 13, -1]" + "'", str42, "[-1, 13, 5, 5, 13, -1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 13, 6, 6, 13, -1]" + "'", str43, "[-1, 13, 6, 6, 13, -1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 13, 7, 7, 13, -1]" + "'", str44, "[-1, 13, 7, 7, 13, -1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 13, 8, 8, 13, -1]" + "'", str45, "[-1, 13, 8, 8, 13, -1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 13, 9, 9, 13, -1]" + "'", str46, "[-1, 13, 9, 9, 13, -1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 14, 0, 0, 14, -1]" + "'", str47, "[-1, 14, 0, 0, 14, -1]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2036");
        int[] intArray3 = new int[] { (short) -1, 100, (short) 10 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str57 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str58 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str59 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str60 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str61 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str62 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str63 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 160, 10]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[-1, 101, 10]" + "'", str4, "[-1, 101, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[-1, 102, 10]" + "'", str5, "[-1, 102, 10]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1, 103, 10]" + "'", str6, "[-1, 103, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-1, 104, 10]" + "'", str7, "[-1, 104, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[-1, 105, 10]" + "'", str8, "[-1, 105, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[-1, 106, 10]" + "'", str9, "[-1, 106, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1, 107, 10]" + "'", str10, "[-1, 107, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1, 108, 10]" + "'", str11, "[-1, 108, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[-1, 109, 10]" + "'", str12, "[-1, 109, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[-1, 110, 10]" + "'", str13, "[-1, 110, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[-1, 111, 10]" + "'", str14, "[-1, 111, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[-1, 112, 10]" + "'", str15, "[-1, 112, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[-1, 113, 10]" + "'", str16, "[-1, 113, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1, 114, 10]" + "'", str17, "[-1, 114, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[-1, 115, 10]" + "'", str18, "[-1, 115, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[-1, 116, 10]" + "'", str19, "[-1, 116, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[-1, 117, 10]" + "'", str20, "[-1, 117, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[-1, 118, 10]" + "'", str21, "[-1, 118, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[-1, 119, 10]" + "'", str22, "[-1, 119, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[-1, 120, 10]" + "'", str23, "[-1, 120, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[-1, 121, 10]" + "'", str24, "[-1, 121, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[-1, 122, 10]" + "'", str25, "[-1, 122, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[-1, 123, 10]" + "'", str26, "[-1, 123, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[-1, 124, 10]" + "'", str27, "[-1, 124, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[-1, 125, 10]" + "'", str28, "[-1, 125, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[-1, 126, 10]" + "'", str29, "[-1, 126, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[-1, 127, 10]" + "'", str30, "[-1, 127, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[-1, 128, 10]" + "'", str31, "[-1, 128, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[-1, 129, 10]" + "'", str32, "[-1, 129, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[-1, 130, 10]" + "'", str33, "[-1, 130, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[-1, 131, 10]" + "'", str34, "[-1, 131, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[-1, 132, 10]" + "'", str35, "[-1, 132, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[-1, 133, 10]" + "'", str36, "[-1, 133, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[-1, 134, 10]" + "'", str37, "[-1, 134, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[-1, 135, 10]" + "'", str38, "[-1, 135, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[-1, 136, 10]" + "'", str39, "[-1, 136, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[-1, 137, 10]" + "'", str40, "[-1, 137, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[-1, 138, 10]" + "'", str41, "[-1, 138, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[-1, 139, 10]" + "'", str42, "[-1, 139, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[-1, 140, 10]" + "'", str43, "[-1, 140, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[-1, 141, 10]" + "'", str44, "[-1, 141, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[-1, 142, 10]" + "'", str45, "[-1, 142, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[-1, 143, 10]" + "'", str46, "[-1, 143, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[-1, 144, 10]" + "'", str47, "[-1, 144, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[-1, 145, 10]" + "'", str48, "[-1, 145, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[-1, 146, 10]" + "'", str49, "[-1, 146, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[-1, 147, 10]" + "'", str50, "[-1, 147, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[-1, 148, 10]" + "'", str51, "[-1, 148, 10]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[-1, 149, 10]" + "'", str52, "[-1, 149, 10]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[-1, 150, 10]" + "'", str53, "[-1, 150, 10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[-1, 151, 10]" + "'", str54, "[-1, 151, 10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[-1, 152, 10]" + "'", str55, "[-1, 152, 10]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[-1, 153, 10]" + "'", str56, "[-1, 153, 10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[-1, 154, 10]" + "'", str57, "[-1, 154, 10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[-1, 155, 10]" + "'", str58, "[-1, 155, 10]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[-1, 156, 10]" + "'", str59, "[-1, 156, 10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[-1, 157, 10]" + "'", str60, "[-1, 157, 10]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[-1, 158, 10]" + "'", str61, "[-1, 158, 10]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[-1, 159, 10]" + "'", str62, "[-1, 159, 10]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[-1, 160, 10]" + "'", str63, "[-1, 160, 10]");
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2037");
        int[] intArray3 = new int[] { (byte) 1, (short) 0, (byte) 0 };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str57 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str58 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str59 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str60 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str61 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str62 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass63 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[6, 9, 5]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[1, 1, 0]" + "'", str4, "[1, 1, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[1, 2, 0]" + "'", str5, "[1, 2, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1, 3, 0]" + "'", str6, "[1, 3, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[1, 4, 0]" + "'", str7, "[1, 4, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1, 5, 0]" + "'", str8, "[1, 5, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1, 6, 0]" + "'", str9, "[1, 6, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[1, 7, 0]" + "'", str10, "[1, 7, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[1, 8, 0]" + "'", str11, "[1, 8, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 9, 0]" + "'", str12, "[1, 9, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[2, 0, 1]" + "'", str13, "[2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2, 1, 1]" + "'", str14, "[2, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[2, 2, 1]" + "'", str15, "[2, 2, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[2, 3, 1]" + "'", str16, "[2, 3, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[2, 4, 1]" + "'", str17, "[2, 4, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[2, 5, 1]" + "'", str18, "[2, 5, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[2, 6, 1]" + "'", str19, "[2, 6, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[2, 7, 1]" + "'", str20, "[2, 7, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[2, 8, 1]" + "'", str21, "[2, 8, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[2, 9, 1]" + "'", str22, "[2, 9, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[3, 0, 2]" + "'", str23, "[3, 0, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[3, 1, 2]" + "'", str24, "[3, 1, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3, 2, 2]" + "'", str25, "[3, 2, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[3, 3, 2]" + "'", str26, "[3, 3, 2]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[3, 4, 2]" + "'", str27, "[3, 4, 2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[3, 5, 2]" + "'", str28, "[3, 5, 2]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[3, 6, 2]" + "'", str29, "[3, 6, 2]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[3, 7, 2]" + "'", str30, "[3, 7, 2]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[3, 8, 2]" + "'", str31, "[3, 8, 2]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[3, 9, 2]" + "'", str32, "[3, 9, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[4, 0, 3]" + "'", str33, "[4, 0, 3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[4, 1, 3]" + "'", str34, "[4, 1, 3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4, 2, 3]" + "'", str35, "[4, 2, 3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4, 3, 3]" + "'", str36, "[4, 3, 3]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[4, 4, 3]" + "'", str37, "[4, 4, 3]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4, 5, 3]" + "'", str38, "[4, 5, 3]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[4, 6, 3]" + "'", str39, "[4, 6, 3]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[4, 7, 3]" + "'", str40, "[4, 7, 3]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[4, 8, 3]" + "'", str41, "[4, 8, 3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[4, 9, 3]" + "'", str42, "[4, 9, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[5, 0, 4]" + "'", str43, "[5, 0, 4]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[5, 1, 4]" + "'", str44, "[5, 1, 4]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[5, 2, 4]" + "'", str45, "[5, 2, 4]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[5, 3, 4]" + "'", str46, "[5, 3, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5, 4, 4]" + "'", str47, "[5, 4, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[5, 5, 4]" + "'", str48, "[5, 5, 4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[5, 6, 4]" + "'", str49, "[5, 6, 4]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[5, 7, 4]" + "'", str50, "[5, 7, 4]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[5, 8, 4]" + "'", str51, "[5, 8, 4]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[5, 9, 4]" + "'", str52, "[5, 9, 4]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[6, 0, 5]" + "'", str53, "[6, 0, 5]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[6, 1, 5]" + "'", str54, "[6, 1, 5]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[6, 2, 5]" + "'", str55, "[6, 2, 5]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[6, 3, 5]" + "'", str56, "[6, 3, 5]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[6, 4, 5]" + "'", str57, "[6, 4, 5]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[6, 5, 5]" + "'", str58, "[6, 5, 5]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[6, 6, 5]" + "'", str59, "[6, 6, 5]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[6, 7, 5]" + "'", str60, "[6, 7, 5]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[6, 8, 5]" + "'", str61, "[6, 8, 5]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[6, 9, 5]" + "'", str62, "[6, 9, 5]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2038");
        int[] intArray1 = new int[] { (short) -1 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str57 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str58 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str59 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str60 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str61 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str62 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str63 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str64 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str65 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str66 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str67 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str68 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str69 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str70 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str71 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str72 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[0]" + "'", str2, "[0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[1]" + "'", str3, "[1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[2]" + "'", str4, "[2]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[3]" + "'", str5, "[3]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[4]" + "'", str6, "[4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[5]" + "'", str7, "[5]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6]" + "'", str8, "[6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[7]" + "'", str9, "[7]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[8]" + "'", str10, "[8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[9]" + "'", str11, "[9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[1, 0, 1]" + "'", str12, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[1]" + "'", str13, "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[2]" + "'", str14, "[2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[3]" + "'", str15, "[3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[4]" + "'", str16, "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[5]" + "'", str17, "[5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[6]" + "'", str18, "[6]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[7]" + "'", str19, "[7]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[8]" + "'", str20, "[8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[9]" + "'", str21, "[9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[1, 0, 1]" + "'", str22, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[1]" + "'", str23, "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[2]" + "'", str24, "[2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[3]" + "'", str25, "[3]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[5]" + "'", str27, "[5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[6]" + "'", str28, "[6]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[7]" + "'", str29, "[7]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[8]" + "'", str30, "[8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[9]" + "'", str31, "[9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[1, 0, 1]" + "'", str32, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[1]" + "'", str33, "[1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2]" + "'", str34, "[2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[3]" + "'", str35, "[3]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[4]" + "'", str36, "[4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[5]" + "'", str37, "[5]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[6]" + "'", str38, "[6]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[7]" + "'", str39, "[7]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[8]" + "'", str40, "[8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[9]" + "'", str41, "[9]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[1, 0, 1]" + "'", str42, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[1]" + "'", str43, "[1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[2]" + "'", str44, "[2]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[3]" + "'", str45, "[3]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[4]" + "'", str46, "[4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[5]" + "'", str47, "[5]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[6]" + "'", str48, "[6]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[7]" + "'", str49, "[7]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[8]" + "'", str50, "[8]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[9]" + "'", str51, "[9]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[1, 0, 1]" + "'", str52, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[1]" + "'", str53, "[1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[2]" + "'", str54, "[2]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[3]" + "'", str55, "[3]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[4]" + "'", str56, "[4]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[5]" + "'", str57, "[5]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[6]" + "'", str58, "[6]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[7]" + "'", str59, "[7]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[8]" + "'", str60, "[8]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[9]" + "'", str61, "[9]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[1, 0, 1]" + "'", str62, "[1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[1]" + "'", str63, "[1]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[2]" + "'", str64, "[2]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[3]" + "'", str65, "[3]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[4]" + "'", str66, "[4]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[5]" + "'", str67, "[5]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[6]" + "'", str68, "[6]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[7]" + "'", str69, "[7]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[8]" + "'", str70, "[8]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[9]" + "'", str71, "[9]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[1, 0, 1]" + "'", str72, "[1, 0, 1]");
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2039");
        int[] intArray3 = new int[] { ' ', 1, (-1) };
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray3);
        java.lang.Class<?> wildcardClass48 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[36, 5, 3]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[32, 2, -1]" + "'", str4, "[32, 2, -1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[32, 3, -1]" + "'", str5, "[32, 3, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[32, 4, -1]" + "'", str6, "[32, 4, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[32, 5, -1]" + "'", str7, "[32, 5, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[32, 6, -1]" + "'", str8, "[32, 6, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[32, 7, -1]" + "'", str9, "[32, 7, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[32, 8, -1]" + "'", str10, "[32, 8, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[32, 9, -1]" + "'", str11, "[32, 9, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[33, 0, 0]" + "'", str12, "[33, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[33, 1, 0]" + "'", str13, "[33, 1, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[33, 2, 0]" + "'", str14, "[33, 2, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[33, 3, 0]" + "'", str15, "[33, 3, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[33, 4, 0]" + "'", str16, "[33, 4, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[33, 5, 0]" + "'", str17, "[33, 5, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[33, 6, 0]" + "'", str18, "[33, 6, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[33, 7, 0]" + "'", str19, "[33, 7, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[33, 8, 0]" + "'", str20, "[33, 8, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[33, 9, 0]" + "'", str21, "[33, 9, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[34, 0, 1]" + "'", str22, "[34, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[34, 1, 1]" + "'", str23, "[34, 1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[34, 2, 1]" + "'", str24, "[34, 2, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[34, 3, 1]" + "'", str25, "[34, 3, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[34, 4, 1]" + "'", str26, "[34, 4, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[34, 5, 1]" + "'", str27, "[34, 5, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[34, 6, 1]" + "'", str28, "[34, 6, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[34, 7, 1]" + "'", str29, "[34, 7, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[34, 8, 1]" + "'", str30, "[34, 8, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[34, 9, 1]" + "'", str31, "[34, 9, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[35, 0, 2]" + "'", str32, "[35, 0, 2]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[35, 1, 2]" + "'", str33, "[35, 1, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[35, 2, 2]" + "'", str34, "[35, 2, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[35, 3, 2]" + "'", str35, "[35, 3, 2]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[35, 4, 2]" + "'", str36, "[35, 4, 2]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[35, 5, 2]" + "'", str37, "[35, 5, 2]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[35, 6, 2]" + "'", str38, "[35, 6, 2]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[35, 7, 2]" + "'", str39, "[35, 7, 2]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[35, 8, 2]" + "'", str40, "[35, 8, 2]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[35, 9, 2]" + "'", str41, "[35, 9, 2]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[36, 0, 3]" + "'", str42, "[36, 0, 3]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[36, 1, 3]" + "'", str43, "[36, 1, 3]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[36, 2, 3]" + "'", str44, "[36, 2, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[36, 3, 3]" + "'", str45, "[36, 3, 3]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[36, 4, 3]" + "'", str46, "[36, 4, 3]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[36, 5, 3]" + "'", str47, "[36, 5, 3]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2040");
        int[] intArray4 = new int[] { (short) 0, 100, (byte) 0, (byte) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 103, 3, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 1, 0]" + "'", str5, "[0, 101, 1, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 2, 0]" + "'", str6, "[0, 102, 2, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 3, 0]" + "'", str7, "[0, 103, 3, 0]");
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2041");
        int[] intArray4 = new int[] { 100, (byte) 100, (byte) 100, (short) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass15 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 110, 110, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[100, 101, 101, 0]" + "'", str5, "[100, 101, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, 102, 102, 0]" + "'", str6, "[100, 102, 102, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, 103, 103, 0]" + "'", str7, "[100, 103, 103, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, 104, 104, 0]" + "'", str8, "[100, 104, 104, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, 105, 105, 0]" + "'", str9, "[100, 105, 105, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, 106, 106, 0]" + "'", str10, "[100, 106, 106, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, 107, 107, 0]" + "'", str11, "[100, 107, 107, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, 108, 108, 0]" + "'", str12, "[100, 108, 108, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, 109, 109, 0]" + "'", str13, "[100, 109, 109, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, 110, 110, 0]" + "'", str14, "[100, 110, 110, 0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2042");
        int[] intArray5 = new int[] { (short) 100, (short) -1, (byte) 10, (short) 100, (byte) -1 };
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, 55, 100, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[100, -1, 11, 100, -1]" + "'", str6, "[100, -1, 11, 100, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[100, -1, 12, 100, -1]" + "'", str7, "[100, -1, 12, 100, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[100, -1, 13, 100, -1]" + "'", str8, "[100, -1, 13, 100, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[100, -1, 14, 100, -1]" + "'", str9, "[100, -1, 14, 100, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[100, -1, 15, 100, -1]" + "'", str10, "[100, -1, 15, 100, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100, -1, 16, 100, -1]" + "'", str11, "[100, -1, 16, 100, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100, -1, 17, 100, -1]" + "'", str12, "[100, -1, 17, 100, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[100, -1, 18, 100, -1]" + "'", str13, "[100, -1, 18, 100, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[100, -1, 19, 100, -1]" + "'", str14, "[100, -1, 19, 100, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[100, -1, 20, 100, -1]" + "'", str15, "[100, -1, 20, 100, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[100, -1, 21, 100, -1]" + "'", str16, "[100, -1, 21, 100, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[100, -1, 22, 100, -1]" + "'", str17, "[100, -1, 22, 100, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[100, -1, 23, 100, -1]" + "'", str18, "[100, -1, 23, 100, -1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[100, -1, 24, 100, -1]" + "'", str19, "[100, -1, 24, 100, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[100, -1, 25, 100, -1]" + "'", str20, "[100, -1, 25, 100, -1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[100, -1, 26, 100, -1]" + "'", str21, "[100, -1, 26, 100, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[100, -1, 27, 100, -1]" + "'", str22, "[100, -1, 27, 100, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[100, -1, 28, 100, -1]" + "'", str23, "[100, -1, 28, 100, -1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[100, -1, 29, 100, -1]" + "'", str24, "[100, -1, 29, 100, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[100, -1, 30, 100, -1]" + "'", str25, "[100, -1, 30, 100, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[100, -1, 31, 100, -1]" + "'", str26, "[100, -1, 31, 100, -1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[100, -1, 32, 100, -1]" + "'", str27, "[100, -1, 32, 100, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[100, -1, 33, 100, -1]" + "'", str28, "[100, -1, 33, 100, -1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100, -1, 34, 100, -1]" + "'", str29, "[100, -1, 34, 100, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[100, -1, 35, 100, -1]" + "'", str30, "[100, -1, 35, 100, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100, -1, 36, 100, -1]" + "'", str31, "[100, -1, 36, 100, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100, -1, 37, 100, -1]" + "'", str32, "[100, -1, 37, 100, -1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[100, -1, 38, 100, -1]" + "'", str33, "[100, -1, 38, 100, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, -1, 39, 100, -1]" + "'", str34, "[100, -1, 39, 100, -1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, -1, 40, 100, -1]" + "'", str35, "[100, -1, 40, 100, -1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, -1, 41, 100, -1]" + "'", str36, "[100, -1, 41, 100, -1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, -1, 42, 100, -1]" + "'", str37, "[100, -1, 42, 100, -1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, -1, 43, 100, -1]" + "'", str38, "[100, -1, 43, 100, -1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, -1, 44, 100, -1]" + "'", str39, "[100, -1, 44, 100, -1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, -1, 45, 100, -1]" + "'", str40, "[100, -1, 45, 100, -1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, -1, 46, 100, -1]" + "'", str41, "[100, -1, 46, 100, -1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, -1, 47, 100, -1]" + "'", str42, "[100, -1, 47, 100, -1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, -1, 48, 100, -1]" + "'", str43, "[100, -1, 48, 100, -1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[100, -1, 49, 100, -1]" + "'", str44, "[100, -1, 49, 100, -1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[100, -1, 50, 100, -1]" + "'", str45, "[100, -1, 50, 100, -1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[100, -1, 51, 100, -1]" + "'", str46, "[100, -1, 51, 100, -1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[100, -1, 52, 100, -1]" + "'", str47, "[100, -1, 52, 100, -1]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[100, -1, 53, 100, -1]" + "'", str48, "[100, -1, 53, 100, -1]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[100, -1, 54, 100, -1]" + "'", str49, "[100, -1, 54, 100, -1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[100, -1, 55, 100, -1]" + "'", str50, "[100, -1, 55, 100, -1]");
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2043");
        int[] intArray4 = new int[] { '4', (byte) -1, 100, (byte) 0 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str57 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str58 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str59 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str60 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str61 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str62 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str63 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str64 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str65 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass66 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 60, 161, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[52, 0, 101, 0]" + "'", str5, "[52, 0, 101, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[52, 1, 102, 0]" + "'", str6, "[52, 1, 102, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[52, 2, 103, 0]" + "'", str7, "[52, 2, 103, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[52, 3, 104, 0]" + "'", str8, "[52, 3, 104, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[52, 4, 105, 0]" + "'", str9, "[52, 4, 105, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[52, 5, 106, 0]" + "'", str10, "[52, 5, 106, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[52, 6, 107, 0]" + "'", str11, "[52, 6, 107, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[52, 7, 108, 0]" + "'", str12, "[52, 7, 108, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[52, 8, 109, 0]" + "'", str13, "[52, 8, 109, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[52, 9, 110, 0]" + "'", str14, "[52, 9, 110, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[52, 10, 111, 0]" + "'", str15, "[52, 10, 111, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[52, 11, 112, 0]" + "'", str16, "[52, 11, 112, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[52, 12, 113, 0]" + "'", str17, "[52, 12, 113, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[52, 13, 114, 0]" + "'", str18, "[52, 13, 114, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[52, 14, 115, 0]" + "'", str19, "[52, 14, 115, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[52, 15, 116, 0]" + "'", str20, "[52, 15, 116, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[52, 16, 117, 0]" + "'", str21, "[52, 16, 117, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[52, 17, 118, 0]" + "'", str22, "[52, 17, 118, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[52, 18, 119, 0]" + "'", str23, "[52, 18, 119, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[52, 19, 120, 0]" + "'", str24, "[52, 19, 120, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[52, 20, 121, 0]" + "'", str25, "[52, 20, 121, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[52, 21, 122, 0]" + "'", str26, "[52, 21, 122, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[52, 22, 123, 0]" + "'", str27, "[52, 22, 123, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[52, 23, 124, 0]" + "'", str28, "[52, 23, 124, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[52, 24, 125, 0]" + "'", str29, "[52, 24, 125, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[52, 25, 126, 0]" + "'", str30, "[52, 25, 126, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[52, 26, 127, 0]" + "'", str31, "[52, 26, 127, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[52, 27, 128, 0]" + "'", str32, "[52, 27, 128, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[52, 28, 129, 0]" + "'", str33, "[52, 28, 129, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[52, 29, 130, 0]" + "'", str34, "[52, 29, 130, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[52, 30, 131, 0]" + "'", str35, "[52, 30, 131, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[52, 31, 132, 0]" + "'", str36, "[52, 31, 132, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[52, 32, 133, 0]" + "'", str37, "[52, 32, 133, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[52, 33, 134, 0]" + "'", str38, "[52, 33, 134, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[52, 34, 135, 0]" + "'", str39, "[52, 34, 135, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[52, 35, 136, 0]" + "'", str40, "[52, 35, 136, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[52, 36, 137, 0]" + "'", str41, "[52, 36, 137, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[52, 37, 138, 0]" + "'", str42, "[52, 37, 138, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[52, 38, 139, 0]" + "'", str43, "[52, 38, 139, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[52, 39, 140, 0]" + "'", str44, "[52, 39, 140, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[52, 40, 141, 0]" + "'", str45, "[52, 40, 141, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[52, 41, 142, 0]" + "'", str46, "[52, 41, 142, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[52, 42, 143, 0]" + "'", str47, "[52, 42, 143, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[52, 43, 144, 0]" + "'", str48, "[52, 43, 144, 0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[52, 44, 145, 0]" + "'", str49, "[52, 44, 145, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[52, 45, 146, 0]" + "'", str50, "[52, 45, 146, 0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[52, 46, 147, 0]" + "'", str51, "[52, 46, 147, 0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[52, 47, 148, 0]" + "'", str52, "[52, 47, 148, 0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[52, 48, 149, 0]" + "'", str53, "[52, 48, 149, 0]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[52, 49, 150, 0]" + "'", str54, "[52, 49, 150, 0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[52, 50, 151, 0]" + "'", str55, "[52, 50, 151, 0]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[52, 51, 152, 0]" + "'", str56, "[52, 51, 152, 0]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[52, 52, 153, 0]" + "'", str57, "[52, 52, 153, 0]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[52, 53, 154, 0]" + "'", str58, "[52, 53, 154, 0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[52, 54, 155, 0]" + "'", str59, "[52, 54, 155, 0]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[52, 55, 156, 0]" + "'", str60, "[52, 55, 156, 0]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[52, 56, 157, 0]" + "'", str61, "[52, 56, 157, 0]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[52, 57, 158, 0]" + "'", str62, "[52, 57, 158, 0]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[52, 58, 159, 0]" + "'", str63, "[52, 58, 159, 0]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[52, 59, 160, 0]" + "'", str64, "[52, 59, 160, 0]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[52, 60, 161, 0]" + "'", str65, "[52, 60, 161, 0]");
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2044");
        int[] intArray1 = new int[] { (short) 100 };
        java.lang.String str2 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str3 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str4 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[148]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[101]" + "'", str2, "[101]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[102]" + "'", str3, "[102]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[103]" + "'", str4, "[103]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[104]" + "'", str5, "[104]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[105]" + "'", str6, "[105]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[106]" + "'", str7, "[106]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[107]" + "'", str8, "[107]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[108]" + "'", str9, "[108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[109]" + "'", str10, "[109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[110]" + "'", str11, "[110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[111]" + "'", str12, "[111]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[112]" + "'", str13, "[112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[113]" + "'", str14, "[113]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[114]" + "'", str15, "[114]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[115]" + "'", str16, "[115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[116]" + "'", str17, "[116]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[117]" + "'", str18, "[117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[118]" + "'", str19, "[118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[119]" + "'", str20, "[119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[120]" + "'", str21, "[120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[121]" + "'", str22, "[121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[122]" + "'", str23, "[122]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[123]" + "'", str24, "[123]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[124]" + "'", str25, "[124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[125]" + "'", str26, "[125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[126]" + "'", str27, "[126]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[127]" + "'", str28, "[127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[128]" + "'", str29, "[128]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[129]" + "'", str30, "[129]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[130]" + "'", str31, "[130]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[131]" + "'", str32, "[131]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[132]" + "'", str33, "[132]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[133]" + "'", str34, "[133]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[134]" + "'", str35, "[134]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[135]" + "'", str36, "[135]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[136]" + "'", str37, "[136]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[137]" + "'", str38, "[137]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[138]" + "'", str39, "[138]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[139]" + "'", str40, "[139]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[140]" + "'", str41, "[140]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[141]" + "'", str42, "[141]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[142]" + "'", str43, "[142]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[143]" + "'", str44, "[143]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[144]" + "'", str45, "[144]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[145]" + "'", str46, "[145]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[146]" + "'", str47, "[146]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[147]" + "'", str48, "[147]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[148]" + "'", str49, "[148]");
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2045");
        int[] intArray4 = new int[] { 'a', 100, (byte) 0, '4' };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str19 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str20 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str21 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str22 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str23 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str24 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str25 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str26 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str27 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str28 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str29 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str30 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str31 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str32 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str33 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str34 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str35 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str36 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str37 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str38 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str39 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str40 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str41 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str42 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str43 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str44 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str45 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str46 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str47 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str48 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str49 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str50 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str51 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str52 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str53 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str54 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str55 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str56 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str57 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str58 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str59 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str60 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str61 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str62 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str63 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str64 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str65 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str66 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass67 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[103, 2, 2, 58]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[97, 101, 1, 52]" + "'", str5, "[97, 101, 1, 52]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[97, 102, 2, 52]" + "'", str6, "[97, 102, 2, 52]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[97, 103, 3, 52]" + "'", str7, "[97, 103, 3, 52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[97, 104, 4, 52]" + "'", str8, "[97, 104, 4, 52]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97, 105, 5, 52]" + "'", str9, "[97, 105, 5, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[97, 106, 6, 52]" + "'", str10, "[97, 106, 6, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[97, 107, 7, 52]" + "'", str11, "[97, 107, 7, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[97, 108, 8, 52]" + "'", str12, "[97, 108, 8, 52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[97, 109, 9, 52]" + "'", str13, "[97, 109, 9, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[98, 0, 0, 53]" + "'", str14, "[98, 0, 0, 53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[98, 1, 1, 53]" + "'", str15, "[98, 1, 1, 53]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[98, 2, 2, 53]" + "'", str16, "[98, 2, 2, 53]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[98, 3, 3, 53]" + "'", str17, "[98, 3, 3, 53]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[98, 4, 4, 53]" + "'", str18, "[98, 4, 4, 53]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[98, 5, 5, 53]" + "'", str19, "[98, 5, 5, 53]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[98, 6, 6, 53]" + "'", str20, "[98, 6, 6, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[98, 7, 7, 53]" + "'", str21, "[98, 7, 7, 53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[98, 8, 8, 53]" + "'", str22, "[98, 8, 8, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[98, 9, 9, 53]" + "'", str23, "[98, 9, 9, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[99, 0, 0, 54]" + "'", str24, "[99, 0, 0, 54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[99, 1, 1, 54]" + "'", str25, "[99, 1, 1, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[99, 2, 2, 54]" + "'", str26, "[99, 2, 2, 54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[99, 3, 3, 54]" + "'", str27, "[99, 3, 3, 54]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[99, 4, 4, 54]" + "'", str28, "[99, 4, 4, 54]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[99, 5, 5, 54]" + "'", str29, "[99, 5, 5, 54]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[99, 6, 6, 54]" + "'", str30, "[99, 6, 6, 54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[99, 7, 7, 54]" + "'", str31, "[99, 7, 7, 54]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[99, 8, 8, 54]" + "'", str32, "[99, 8, 8, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[99, 9, 9, 54]" + "'", str33, "[99, 9, 9, 54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[100, 0, 0, 55]" + "'", str34, "[100, 0, 0, 55]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[100, 1, 1, 55]" + "'", str35, "[100, 1, 1, 55]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[100, 2, 2, 55]" + "'", str36, "[100, 2, 2, 55]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[100, 3, 3, 55]" + "'", str37, "[100, 3, 3, 55]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100, 4, 4, 55]" + "'", str38, "[100, 4, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[100, 5, 5, 55]" + "'", str39, "[100, 5, 5, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[100, 6, 6, 55]" + "'", str40, "[100, 6, 6, 55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[100, 7, 7, 55]" + "'", str41, "[100, 7, 7, 55]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100, 8, 8, 55]" + "'", str42, "[100, 8, 8, 55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[100, 9, 9, 55]" + "'", str43, "[100, 9, 9, 55]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[101, 0, 0, 56]" + "'", str44, "[101, 0, 0, 56]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[101, 1, 1, 56]" + "'", str45, "[101, 1, 1, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[101, 2, 2, 56]" + "'", str46, "[101, 2, 2, 56]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[101, 3, 3, 56]" + "'", str47, "[101, 3, 3, 56]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[101, 4, 4, 56]" + "'", str48, "[101, 4, 4, 56]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[101, 5, 5, 56]" + "'", str49, "[101, 5, 5, 56]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[101, 6, 6, 56]" + "'", str50, "[101, 6, 6, 56]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[101, 7, 7, 56]" + "'", str51, "[101, 7, 7, 56]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[101, 8, 8, 56]" + "'", str52, "[101, 8, 8, 56]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[101, 9, 9, 56]" + "'", str53, "[101, 9, 9, 56]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[102, 0, 0, 57]" + "'", str54, "[102, 0, 0, 57]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[102, 1, 1, 57]" + "'", str55, "[102, 1, 1, 57]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[102, 2, 2, 57]" + "'", str56, "[102, 2, 2, 57]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[102, 3, 3, 57]" + "'", str57, "[102, 3, 3, 57]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[102, 4, 4, 57]" + "'", str58, "[102, 4, 4, 57]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[102, 5, 5, 57]" + "'", str59, "[102, 5, 5, 57]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[102, 6, 6, 57]" + "'", str60, "[102, 6, 6, 57]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[102, 7, 7, 57]" + "'", str61, "[102, 7, 7, 57]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[102, 8, 8, 57]" + "'", str62, "[102, 8, 8, 57]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[102, 9, 9, 57]" + "'", str63, "[102, 9, 9, 57]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[103, 0, 0, 58]" + "'", str64, "[103, 0, 0, 58]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[103, 1, 1, 58]" + "'", str65, "[103, 1, 1, 58]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[103, 2, 2, 58]" + "'", str66, "[103, 2, 2, 58]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2046");
        int[] intArray4 = new int[] { (byte) 0, ' ', (byte) 100, (byte) 1 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass18 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 45, 113, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 33, 101, 1]" + "'", str5, "[0, 33, 101, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 34, 102, 1]" + "'", str6, "[0, 34, 102, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 35, 103, 1]" + "'", str7, "[0, 35, 103, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 36, 104, 1]" + "'", str8, "[0, 36, 104, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 37, 105, 1]" + "'", str9, "[0, 37, 105, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 38, 106, 1]" + "'", str10, "[0, 38, 106, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 39, 107, 1]" + "'", str11, "[0, 39, 107, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 40, 108, 1]" + "'", str12, "[0, 40, 108, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 41, 109, 1]" + "'", str13, "[0, 41, 109, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 42, 110, 1]" + "'", str14, "[0, 42, 110, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 43, 111, 1]" + "'", str15, "[0, 43, 111, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 44, 112, 1]" + "'", str16, "[0, 44, 112, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 45, 113, 1]" + "'", str17, "[0, 45, 113, 1]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest4.test2047");
        int[] intArray4 = new int[] { (short) 0, (short) 100, 10, 1 };
        java.lang.String str5 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str6 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str7 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str8 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str9 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str10 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str11 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str12 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str13 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str14 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str15 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str16 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str17 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.String str18 = java_programs.NEXT_PALINDROME.next_palindrome(intArray4);
        java.lang.Class<?> wildcardClass19 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 114, 24, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0, 101, 11, 1]" + "'", str5, "[0, 101, 11, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[0, 102, 12, 1]" + "'", str6, "[0, 102, 12, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 103, 13, 1]" + "'", str7, "[0, 103, 13, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[0, 104, 14, 1]" + "'", str8, "[0, 104, 14, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0, 105, 15, 1]" + "'", str9, "[0, 105, 15, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0, 106, 16, 1]" + "'", str10, "[0, 106, 16, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0, 107, 17, 1]" + "'", str11, "[0, 107, 17, 1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0, 108, 18, 1]" + "'", str12, "[0, 108, 18, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0, 109, 19, 1]" + "'", str13, "[0, 109, 19, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[0, 110, 20, 1]" + "'", str14, "[0, 110, 20, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[0, 111, 21, 1]" + "'", str15, "[0, 111, 21, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0, 112, 22, 1]" + "'", str16, "[0, 112, 22, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[0, 113, 23, 1]" + "'", str17, "[0, 113, 23, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[0, 114, 24, 1]" + "'", str18, "[0, 114, 24, 1]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }
}

