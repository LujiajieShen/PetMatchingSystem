/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 04 21:14:53 GMT 2024
 */

package java_programs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java_programs.MINIMUM_SPANNING_TREE;
import java_programs.Node;
import java_programs.WeightedEdge;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MINIMUM_SPANNING_TREE_ESTest extends MINIMUM_SPANNING_TREE_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Node, Set<Node>> hashMap0 = new HashMap<Node, Set<Node>>();
      Node node0 = new Node("5euK}tHAP87Y(R9z", (ArrayList<Node>) null, (ArrayList<Node>) null);
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      hashMap0.put(node0, linkedHashSet0);
      Map<Node, Set<Node>> map0 = MINIMUM_SPANNING_TREE.update(hashMap0, node0, node0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Node, Set<Node>> hashMap0 = new HashMap<Node, Set<Node>>();
      Node node0 = new Node();
      // Undeclared exception!
      try { 
        MINIMUM_SPANNING_TREE.update(hashMap0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java_programs.MINIMUM_SPANNING_TREE", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ArrayList<WeightedEdge> arrayList0 = new ArrayList<WeightedEdge>();
      WeightedEdge weightedEdge0 = new WeightedEdge();
      Node node0 = new Node("java_programs.Node");
      weightedEdge0.node2 = node0;
      arrayList0.add(weightedEdge0);
      WeightedEdge weightedEdge1 = new WeightedEdge();
      Node node1 = new Node("", (Node) null);
      weightedEdge1.node1 = node1;
      arrayList0.add(weightedEdge1);
      // Undeclared exception!
      try { 
        MINIMUM_SPANNING_TREE.minimum_spanning_tree(arrayList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        MINIMUM_SPANNING_TREE.minimum_spanning_tree((List<WeightedEdge>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ArrayList<WeightedEdge> arrayList0 = new ArrayList<WeightedEdge>();
      WeightedEdge weightedEdge0 = new WeightedEdge();
      arrayList0.add(weightedEdge0);
      arrayList0.add(weightedEdge0);
      Set<WeightedEdge> set0 = MINIMUM_SPANNING_TREE.minimum_spanning_tree(arrayList0);
      assertFalse(set0.contains(weightedEdge0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ArrayList<WeightedEdge> arrayList0 = new ArrayList<WeightedEdge>();
      WeightedEdge weightedEdge0 = new WeightedEdge();
      Node node0 = new Node();
      weightedEdge0.node2 = node0;
      arrayList0.add(weightedEdge0);
      Set<WeightedEdge> set0 = MINIMUM_SPANNING_TREE.minimum_spanning_tree(arrayList0);
      assertTrue(set0.contains(weightedEdge0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MINIMUM_SPANNING_TREE mINIMUM_SPANNING_TREE0 = new MINIMUM_SPANNING_TREE();
  }
}
